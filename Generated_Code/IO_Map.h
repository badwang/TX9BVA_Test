/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : IO_Map.h
**     Project     : TX9BVA_Test
**     Processor   : MC9S08PA4VTG
**     Component   : IO_Map
**     Version     : Driver 01.07
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2015-03-13, 22:02, # CodeGen: 0
**     Abstract    :
**         IO_Map.h - implements an IO device's mapping. 
**         This module contains symbol definitions of all peripheral 
**         registers and bits. 
**     Settings    :
**
**     Contents    :
**         No public methods
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file IO_Map.h
** @version 01.07
** @brief
**         IO_Map.h - implements an IO device's mapping. 
**         This module contains symbol definitions of all peripheral 
**         registers and bits. 
*/         
/*!
**  @addtogroup IO_Map_module IO_Map module documentation
**  @{
*/         

#ifndef _IO_MAP_H
#define _IO_MAP_H
/*lint -save  -e950 -e46 -esym(960,18.4) Disable MISRA rule (1.1,6.4,18.4) checking. */
/* Based on CPU DB MC9S08PA4_16, version 3.00.000 (RegistersPrg V2.33) */
/* DataSheet : MC9S08PA4RM Rev. 0 Draft B, 10/2011 */

#include "PE_Types.h"

#pragma MESSAGE DISABLE C1106 /* WARNING C1106: Non-standard bitfield type */

/*********************************************/
/*                                           */
/* PE I/O map                                */
/*                                           */
/*********************************************/

/**************** interrupt vector numbers ****************/
#define VectorNumber_Vnvm               39U
#define VectorNumber_VReserved38        38U
#define VectorNumber_Vkbi0              37U
#define VectorNumber_VReserved36        36U
#define VectorNumber_Vrtc               35U
#define VectorNumber_VReserved34        34U
#define VectorNumber_VReserved33        33U
#define VectorNumber_VReserved32        32U
#define VectorNumber_VReserved31        31U
#define VectorNumber_VReserved30        30U
#define VectorNumber_VReserved29        29U
#define VectorNumber_VReserved28        28U
#define VectorNumber_VReserved27        27U
#define VectorNumber_VReserved26        26U
#define VectorNumber_Vsci0tx            25U
#define VectorNumber_Vsci0rx            24U
#define VectorNumber_Vsci0err           23U
#define VectorNumber_Vadc               22U
#define VectorNumber_Vacmp              21U
#define VectorNumber_VReserved20        20U
#define VectorNumber_VReserved19        19U
#define VectorNumber_Vftm0ovf           18U
#define VectorNumber_Vftm0ch1           17U
#define VectorNumber_Vftm0ch0           16U
#define VectorNumber_Vftm1ovf           15U
#define VectorNumber_Vftm1ch1           14U
#define VectorNumber_Vftm1ch0           13U
#define VectorNumber_VReserved12        12U
#define VectorNumber_VReserved11        11U
#define VectorNumber_VReserved10        10U
#define VectorNumber_VReserved9         9U
#define VectorNumber_VReserved8         8U
#define VectorNumber_VReserved7         7U
#define VectorNumber_VReserved6         6U
#define VectorNumber_VReserved5         5U
#define VectorNumber_Vclk               4U
#define VectorNumber_Vlvw               3U
#define VectorNumber_Virq_wdog          2U
#define VectorNumber_Vswi               1U
#define VectorNumber_Vreset             0U

/**************** interrupt vector table ****************/
#define Vnvm                            0xFFB0U
#define VReserved38                     0xFFB2U
#define Vkbi0                           0xFFB4U
#define VReserved36                     0xFFB6U
#define Vrtc                            0xFFB8U
#define VReserved34                     0xFFBAU
#define VReserved33                     0xFFBCU
#define VReserved32                     0xFFBEU
#define VReserved31                     0xFFC0U
#define VReserved30                     0xFFC2U
#define VReserved29                     0xFFC4U
#define VReserved28                     0xFFC6U
#define VReserved27                     0xFFC8U
#define VReserved26                     0xFFCAU
#define Vsci0tx                         0xFFCCU
#define Vsci0rx                         0xFFCEU
#define Vsci0err                        0xFFD0U
#define Vadc                            0xFFD2U
#define Vacmp                           0xFFD4U
#define VReserved20                     0xFFD6U
#define VReserved19                     0xFFD8U
#define Vftm0ovf                        0xFFDAU
#define Vftm0ch1                        0xFFDCU
#define Vftm0ch0                        0xFFDEU
#define Vftm1ovf                        0xFFE0U
#define Vftm1ch1                        0xFFE2U
#define Vftm1ch0                        0xFFE4U
#define VReserved12                     0xFFE6U
#define VReserved11                     0xFFE8U
#define VReserved10                     0xFFEAU
#define VReserved9                      0xFFECU
#define VReserved8                      0xFFEEU
#define VReserved7                      0xFFF0U
#define VReserved6                      0xFFF2U
#define VReserved5                      0xFFF4U
#define Vclk                            0xFFF6U
#define Vlvw                            0xFFF8U
#define Virq_wdog                       0xFFFAU
#define Vswi                            0xFFFCU
#define Vreset                          0xFFFEU

/**************** registers I/O map ****************/

/*** PORT_PTAD - Port A Data Register; 0x00000000 ***/
typedef union {
  byte Byte;
  struct {
    byte PTAD0       :1; 
    byte PTAD1       :1; 
    byte PTAD2       :1; 
    byte PTAD3       :1; 
    byte PTAD4       :1; 
    byte PTAD5       :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTAD :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTADSTR;
extern volatile PORT_PTADSTR _PORT_PTAD @0x00000000;
#define PORT_PTAD                       _PORT_PTAD.Byte
#define PORT_PTAD_PTAD0                 _PORT_PTAD.Bits.PTAD0
#define PORT_PTAD_PTAD1                 _PORT_PTAD.Bits.PTAD1
#define PORT_PTAD_PTAD2                 _PORT_PTAD.Bits.PTAD2
#define PORT_PTAD_PTAD3                 _PORT_PTAD.Bits.PTAD3
#define PORT_PTAD_PTAD4                 _PORT_PTAD.Bits.PTAD4
#define PORT_PTAD_PTAD5                 _PORT_PTAD.Bits.PTAD5
#define PORT_PTAD_PTAD                  _PORT_PTAD.MergedBits.grpPTAD

#define PORT_PTAD_PTAD0_MASK            0x01U
#define PORT_PTAD_PTAD1_MASK            0x02U
#define PORT_PTAD_PTAD2_MASK            0x04U
#define PORT_PTAD_PTAD3_MASK            0x08U
#define PORT_PTAD_PTAD4_MASK            0x10U
#define PORT_PTAD_PTAD5_MASK            0x20U
#define PORT_PTAD_PTAD_MASK             0x3FU
#define PORT_PTAD_PTAD_BITNUM           0x00U


/*** PORT_PTBD - Port B Data Register; 0x00000001 ***/
typedef union {
  byte Byte;
  struct {
    byte PTBD0       :1; 
    byte PTBD1       :1; 
    byte PTBD2       :1; 
    byte PTBD3       :1; 
    byte PTBD4       :1; 
    byte PTBD5       :1; 
    byte PTBD6       :1; 
    byte PTBD7       :1; 
  } Bits;
} PORT_PTBDSTR;
extern volatile PORT_PTBDSTR _PORT_PTBD @0x00000001;
#define PORT_PTBD                       _PORT_PTBD.Byte
#define PORT_PTBD_PTBD0                 _PORT_PTBD.Bits.PTBD0
#define PORT_PTBD_PTBD1                 _PORT_PTBD.Bits.PTBD1
#define PORT_PTBD_PTBD2                 _PORT_PTBD.Bits.PTBD2
#define PORT_PTBD_PTBD3                 _PORT_PTBD.Bits.PTBD3
#define PORT_PTBD_PTBD4                 _PORT_PTBD.Bits.PTBD4
#define PORT_PTBD_PTBD5                 _PORT_PTBD.Bits.PTBD5
#define PORT_PTBD_PTBD6                 _PORT_PTBD.Bits.PTBD6
#define PORT_PTBD_PTBD7                 _PORT_PTBD.Bits.PTBD7

#define PORT_PTBD_PTBD0_MASK            0x01U
#define PORT_PTBD_PTBD1_MASK            0x02U
#define PORT_PTBD_PTBD2_MASK            0x04U
#define PORT_PTBD_PTBD3_MASK            0x08U
#define PORT_PTBD_PTBD4_MASK            0x10U
#define PORT_PTBD_PTBD5_MASK            0x20U
#define PORT_PTBD_PTBD6_MASK            0x40U
#define PORT_PTBD_PTBD7_MASK            0x80U


/*** PORT_PTCD - Port C Data Register; 0x00000002 ***/
typedef union {
  byte Byte;
  struct {
    byte PTCD0       :1; 
    byte PTCD1       :1; 
    byte PTCD2       :1; 
    byte PTCD3       :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTCD :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTCDSTR;
extern volatile PORT_PTCDSTR _PORT_PTCD @0x00000002;
#define PORT_PTCD                       _PORT_PTCD.Byte
#define PORT_PTCD_PTCD0                 _PORT_PTCD.Bits.PTCD0
#define PORT_PTCD_PTCD1                 _PORT_PTCD.Bits.PTCD1
#define PORT_PTCD_PTCD2                 _PORT_PTCD.Bits.PTCD2
#define PORT_PTCD_PTCD3                 _PORT_PTCD.Bits.PTCD3
#define PORT_PTCD_PTCD                  _PORT_PTCD.MergedBits.grpPTCD

#define PORT_PTCD_PTCD0_MASK            0x01U
#define PORT_PTCD_PTCD1_MASK            0x02U
#define PORT_PTCD_PTCD2_MASK            0x04U
#define PORT_PTCD_PTCD3_MASK            0x08U
#define PORT_PTCD_PTCD_MASK             0x0FU
#define PORT_PTCD_PTCD_BITNUM           0x00U


/*** ADC_SC1 - Status and Control Register 1; 0x00000010 ***/
typedef union {
  byte Byte;
  struct {
    byte ADCH0       :1;                                       /* Input Channel Select, bit 0 */
    byte ADCH1       :1;                                       /* Input Channel Select, bit 1 */
    byte ADCH2       :1;                                       /* Input Channel Select, bit 2 */
    byte ADCH3       :1;                                       /* Input Channel Select, bit 3 */
    byte ADCH4       :1;                                       /* Input Channel Select, bit 4 */
    byte ADCO        :1;                                       /* Continuous Conversion Enable */
    byte AIEN        :1;                                       /* Interrupt Enable */
    byte COCO        :1;                                       /* Conversion Complete Flag */
  } Bits;
  struct {
    byte grpADCH :5;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ADC_SC1STR;
extern volatile ADC_SC1STR _ADC_SC1 @0x00000010;
#define ADC_SC1                         _ADC_SC1.Byte
#define ADC_SC1_ADCH0                   _ADC_SC1.Bits.ADCH0
#define ADC_SC1_ADCH1                   _ADC_SC1.Bits.ADCH1
#define ADC_SC1_ADCH2                   _ADC_SC1.Bits.ADCH2
#define ADC_SC1_ADCH3                   _ADC_SC1.Bits.ADCH3
#define ADC_SC1_ADCH4                   _ADC_SC1.Bits.ADCH4
#define ADC_SC1_ADCO                    _ADC_SC1.Bits.ADCO
#define ADC_SC1_AIEN                    _ADC_SC1.Bits.AIEN
#define ADC_SC1_COCO                    _ADC_SC1.Bits.COCO
#define ADC_SC1_ADCH                    _ADC_SC1.MergedBits.grpADCH

#define ADC_SC1_ADCH0_MASK              0x01U
#define ADC_SC1_ADCH1_MASK              0x02U
#define ADC_SC1_ADCH2_MASK              0x04U
#define ADC_SC1_ADCH3_MASK              0x08U
#define ADC_SC1_ADCH4_MASK              0x10U
#define ADC_SC1_ADCO_MASK               0x20U
#define ADC_SC1_AIEN_MASK               0x40U
#define ADC_SC1_COCO_MASK               0x80U
#define ADC_SC1_ADCH_MASK               0x1FU
#define ADC_SC1_ADCH_BITNUM             0x00U


/*** ADC_SC2 - Status and Control Register 2; 0x00000011 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte FFULL       :1;                                       /* Result FIFO full */
    byte FEMPTY      :1;                                       /* Result FIFO empty */
    byte ACFGT       :1;                                       /* Compare Function Greater Than Enable */
    byte ACFE        :1;                                       /* Compare Function Enable */
    byte ADTRG       :1;                                       /* Conversion Trigger Select */
    byte ADACT       :1;                                       /* Conversion Active */
  } Bits;
} ADC_SC2STR;
extern volatile ADC_SC2STR _ADC_SC2 @0x00000011;
#define ADC_SC2                         _ADC_SC2.Byte
#define ADC_SC2_FFULL                   _ADC_SC2.Bits.FFULL
#define ADC_SC2_FEMPTY                  _ADC_SC2.Bits.FEMPTY
#define ADC_SC2_ACFGT                   _ADC_SC2.Bits.ACFGT
#define ADC_SC2_ACFE                    _ADC_SC2.Bits.ACFE
#define ADC_SC2_ADTRG                   _ADC_SC2.Bits.ADTRG
#define ADC_SC2_ADACT                   _ADC_SC2.Bits.ADACT

#define ADC_SC2_FFULL_MASK              0x04U
#define ADC_SC2_FEMPTY_MASK             0x08U
#define ADC_SC2_ACFGT_MASK              0x10U
#define ADC_SC2_ACFE_MASK               0x20U
#define ADC_SC2_ADTRG_MASK              0x40U
#define ADC_SC2_ADACT_MASK              0x80U


/*** ADC_SC3 - Status and Control Register 3; 0x00000012 ***/
typedef union {
  byte Byte;
  struct {
    byte ADICLK0     :1;                                       /* Input Clock Select, bit 0 */
    byte ADICLK1     :1;                                       /* Input Clock Select, bit 1 */
    byte MODE0       :1;                                       /* Conversion Mode Selection, bit 0 */
    byte MODE1       :1;                                       /* Conversion Mode Selection, bit 1 */
    byte ADLSMP      :1;                                       /* Long Sample Time Configuration */
    byte ADIV0       :1;                                       /* Clock Divide Select, bit 0 */
    byte ADIV1       :1;                                       /* Clock Divide Select, bit 1 */
    byte ADLPC       :1;                                       /* Low-Power Configuration */
  } Bits;
  struct {
    byte grpADICLK :2;
    byte grpMODE :2;
    byte         :1;
    byte grpADIV :2;
    byte         :1;
  } MergedBits;
} ADC_SC3STR;
extern volatile ADC_SC3STR _ADC_SC3 @0x00000012;
#define ADC_SC3                         _ADC_SC3.Byte
#define ADC_SC3_ADICLK0                 _ADC_SC3.Bits.ADICLK0
#define ADC_SC3_ADICLK1                 _ADC_SC3.Bits.ADICLK1
#define ADC_SC3_MODE0                   _ADC_SC3.Bits.MODE0
#define ADC_SC3_MODE1                   _ADC_SC3.Bits.MODE1
#define ADC_SC3_ADLSMP                  _ADC_SC3.Bits.ADLSMP
#define ADC_SC3_ADIV0                   _ADC_SC3.Bits.ADIV0
#define ADC_SC3_ADIV1                   _ADC_SC3.Bits.ADIV1
#define ADC_SC3_ADLPC                   _ADC_SC3.Bits.ADLPC
#define ADC_SC3_ADICLK                  _ADC_SC3.MergedBits.grpADICLK
#define ADC_SC3_MODE                    _ADC_SC3.MergedBits.grpMODE
#define ADC_SC3_ADIV                    _ADC_SC3.MergedBits.grpADIV

#define ADC_SC3_ADICLK0_MASK            0x01U
#define ADC_SC3_ADICLK1_MASK            0x02U
#define ADC_SC3_MODE0_MASK              0x04U
#define ADC_SC3_MODE1_MASK              0x08U
#define ADC_SC3_ADLSMP_MASK             0x10U
#define ADC_SC3_ADIV0_MASK              0x20U
#define ADC_SC3_ADIV1_MASK              0x40U
#define ADC_SC3_ADLPC_MASK              0x80U
#define ADC_SC3_ADICLK_MASK             0x03U
#define ADC_SC3_ADICLK_BITNUM           0x00U
#define ADC_SC3_MODE_MASK               0x0CU
#define ADC_SC3_MODE_BITNUM             0x02U
#define ADC_SC3_ADIV_MASK               0x60U
#define ADC_SC3_ADIV_BITNUM             0x05U


/*** ADC_SC4 - Status and Control Register 4; 0x00000013 ***/
typedef union {
  byte Byte;
  struct {
    byte AFDEP0      :1;                                       /* FIFO Depth enables the FIFO function and sets the depth of FIFO. When AFDEP is cleared, the FIFO is disabled. When AFDEP is set to nonzero, the FIFO function is enabled and the depth is indicated by the AFDEP bits. The ADCH in ADCSC1 and ADCRH:ADCRL must be accessed by FIFO mode when FIFO function is enabled. ADC starts conversion when the analog channel FIFO is upon the level indicated by AFDEP bits. The COCO bit is set when the set of conversions are completed and the result FIFO is upon the level indicated by AFDEP bits, bit 0 */
    byte AFDEP1      :1;                                       /* FIFO Depth enables the FIFO function and sets the depth of FIFO. When AFDEP is cleared, the FIFO is disabled. When AFDEP is set to nonzero, the FIFO function is enabled and the depth is indicated by the AFDEP bits. The ADCH in ADCSC1 and ADCRH:ADCRL must be accessed by FIFO mode when FIFO function is enabled. ADC starts conversion when the analog channel FIFO is upon the level indicated by AFDEP bits. The COCO bit is set when the set of conversions are completed and the result FIFO is upon the level indicated by AFDEP bits, bit 1 */
    byte AFDEP2      :1;                                       /* FIFO Depth enables the FIFO function and sets the depth of FIFO. When AFDEP is cleared, the FIFO is disabled. When AFDEP is set to nonzero, the FIFO function is enabled and the depth is indicated by the AFDEP bits. The ADCH in ADCSC1 and ADCRH:ADCRL must be accessed by FIFO mode when FIFO function is enabled. ADC starts conversion when the analog channel FIFO is upon the level indicated by AFDEP bits. The COCO bit is set when the set of conversions are completed and the result FIFO is upon the level indicated by AFDEP bits, bit 2 */
    byte             :1; 
    byte             :1; 
    byte ACFSEL      :1;                                       /* Compare function select OR/AND when the FIFO function is enabled (AFDEP > 0) .When this bit is cleared, ADC will OR all of compare triggers and set COCO after at least one of compare trigger occurs. When this bit is set, ADC will AND all of compare triggers and set COCO after all of compare tiggers occur */
    byte ASCANE      :1;                                       /* FIFO Scan Mode Enable */
    byte             :1; 
  } Bits;
  struct {
    byte grpAFDEP :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ADC_SC4STR;
extern volatile ADC_SC4STR _ADC_SC4 @0x00000013;
#define ADC_SC4                         _ADC_SC4.Byte
#define ADC_SC4_AFDEP0                  _ADC_SC4.Bits.AFDEP0
#define ADC_SC4_AFDEP1                  _ADC_SC4.Bits.AFDEP1
#define ADC_SC4_AFDEP2                  _ADC_SC4.Bits.AFDEP2
#define ADC_SC4_ACFSEL                  _ADC_SC4.Bits.ACFSEL
#define ADC_SC4_ASCANE                  _ADC_SC4.Bits.ASCANE
#define ADC_SC4_AFDEP                   _ADC_SC4.MergedBits.grpAFDEP

#define ADC_SC4_AFDEP0_MASK             0x01U
#define ADC_SC4_AFDEP1_MASK             0x02U
#define ADC_SC4_AFDEP2_MASK             0x04U
#define ADC_SC4_ACFSEL_MASK             0x20U
#define ADC_SC4_ASCANE_MASK             0x40U
#define ADC_SC4_AFDEP_MASK              0x07U
#define ADC_SC4_AFDEP_BITNUM            0x00U


/*** ADC_R - Data Result Register; 0x00000014 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ADC_RH - Conversion Result High Register; 0x00000014 ***/
    union {
      byte Byte;
      struct {
        byte ADR0        :1;                                       /* Conversion Result[15:8], bit 0 */
        byte ADR1        :1;                                       /* Conversion Result[15:8], bit 1 */
        byte ADR2        :1;                                       /* Conversion Result[15:8], bit 2 */
        byte ADR3        :1;                                       /* Conversion Result[15:8], bit 3 */
        byte ADR4        :1;                                       /* Conversion Result[15:8], bit 4 */
        byte ADR5        :1;                                       /* Conversion Result[15:8], bit 5 */
        byte ADR6        :1;                                       /* Conversion Result[15:8], bit 6 */
        byte ADR7        :1;                                       /* Conversion Result[15:8], bit 7 */
      } Bits;
    } ADC_RHSTR;
    #define ADC_RH                      _ADC_R.Overlap_STR.ADC_RHSTR.Byte
    #define ADC_RH_ADR0                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR0
    #define ADC_RH_ADR1                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR1
    #define ADC_RH_ADR2                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR2
    #define ADC_RH_ADR3                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR3
    #define ADC_RH_ADR4                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR4
    #define ADC_RH_ADR5                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR5
    #define ADC_RH_ADR6                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR6
    #define ADC_RH_ADR7                 _ADC_R.Overlap_STR.ADC_RHSTR.Bits.ADR7
    
    #define ADC_RH_ADR0_MASK            0x01U
    #define ADC_RH_ADR1_MASK            0x02U
    #define ADC_RH_ADR2_MASK            0x04U
    #define ADC_RH_ADR3_MASK            0x08U
    #define ADC_RH_ADR4_MASK            0x10U
    #define ADC_RH_ADR5_MASK            0x20U
    #define ADC_RH_ADR6_MASK            0x40U
    #define ADC_RH_ADR7_MASK            0x80U
    

    /*** ADC_RL - Conversion Result Low Register; 0x00000015 ***/
    union {
      byte Byte;
      struct {
        byte ADR0        :1;                                       /* Conversion Result[7:0], bit 0 */
        byte ADR1        :1;                                       /* Conversion Result[7:0], bit 1 */
        byte ADR2        :1;                                       /* Conversion Result[7:0], bit 2 */
        byte ADR3        :1;                                       /* Conversion Result[7:0], bit 3 */
        byte ADR4        :1;                                       /* Conversion Result[7:0], bit 4 */
        byte ADR5        :1;                                       /* Conversion Result[7:0], bit 5 */
        byte ADR6        :1;                                       /* Conversion Result[7:0], bit 6 */
        byte ADR7        :1;                                       /* Conversion Result[7:0], bit 7 */
      } Bits;
    } ADC_RLSTR;
    #define ADC_RL                      _ADC_R.Overlap_STR.ADC_RLSTR.Byte
    #define ADC_RL_ADR0                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR0
    #define ADC_RL_ADR1                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR1
    #define ADC_RL_ADR2                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR2
    #define ADC_RL_ADR3                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR3
    #define ADC_RL_ADR4                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR4
    #define ADC_RL_ADR5                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR5
    #define ADC_RL_ADR6                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR6
    #define ADC_RL_ADR7                 _ADC_R.Overlap_STR.ADC_RLSTR.Bits.ADR7
    
    #define ADC_RL_ADR0_MASK            0x01U
    #define ADC_RL_ADR1_MASK            0x02U
    #define ADC_RL_ADR2_MASK            0x04U
    #define ADC_RL_ADR3_MASK            0x08U
    #define ADC_RL_ADR4_MASK            0x10U
    #define ADC_RL_ADR5_MASK            0x20U
    #define ADC_RL_ADR6_MASK            0x40U
    #define ADC_RL_ADR7_MASK            0x80U
    
  } Overlap_STR;

} ADC_RSTR;
extern volatile ADC_RSTR _ADC_R @0x00000014;
#define ADC_R                           _ADC_R.Word


/*** ADC_CV - Compare Value Register; 0x00000016 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ADC_CVH - Compare Value High Register; 0x00000016 ***/
    union {
      byte Byte;
      struct {
        byte CV0         :1;                                       /* Conversion Result[15:8], bit 0 */
        byte CV1         :1;                                       /* Conversion Result[15:8], bit 1 */
        byte CV2         :1;                                       /* Conversion Result[15:8], bit 2 */
        byte CV3         :1;                                       /* Conversion Result[15:8], bit 3 */
        byte CV4         :1;                                       /* Conversion Result[15:8], bit 4 */
        byte CV5         :1;                                       /* Conversion Result[15:8], bit 5 */
        byte CV6         :1;                                       /* Conversion Result[15:8], bit 6 */
        byte CV7         :1;                                       /* Conversion Result[15:8], bit 7 */
      } Bits;
    } ADC_CVHSTR;
    #define ADC_CVH                     _ADC_CV.Overlap_STR.ADC_CVHSTR.Byte
    #define ADC_CVH_CV0                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV0
    #define ADC_CVH_CV1                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV1
    #define ADC_CVH_CV2                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV2
    #define ADC_CVH_CV3                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV3
    #define ADC_CVH_CV4                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV4
    #define ADC_CVH_CV5                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV5
    #define ADC_CVH_CV6                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV6
    #define ADC_CVH_CV7                 _ADC_CV.Overlap_STR.ADC_CVHSTR.Bits.CV7
    
    #define ADC_CVH_CV0_MASK            0x01U
    #define ADC_CVH_CV1_MASK            0x02U
    #define ADC_CVH_CV2_MASK            0x04U
    #define ADC_CVH_CV3_MASK            0x08U
    #define ADC_CVH_CV4_MASK            0x10U
    #define ADC_CVH_CV5_MASK            0x20U
    #define ADC_CVH_CV6_MASK            0x40U
    #define ADC_CVH_CV7_MASK            0x80U
    

    /*** ADC_CVL - Compare Value Low Register; 0x00000017 ***/
    union {
      byte Byte;
      struct {
        byte CV0         :1;                                       /* Conversion Result[7:0], bit 0 */
        byte CV1         :1;                                       /* Conversion Result[7:0], bit 1 */
        byte CV2         :1;                                       /* Conversion Result[7:0], bit 2 */
        byte CV3         :1;                                       /* Conversion Result[7:0], bit 3 */
        byte CV4         :1;                                       /* Conversion Result[7:0], bit 4 */
        byte CV5         :1;                                       /* Conversion Result[7:0], bit 5 */
        byte CV6         :1;                                       /* Conversion Result[7:0], bit 6 */
        byte CV7         :1;                                       /* Conversion Result[7:0], bit 7 */
      } Bits;
    } ADC_CVLSTR;
    #define ADC_CVL                     _ADC_CV.Overlap_STR.ADC_CVLSTR.Byte
    #define ADC_CVL_CV0                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV0
    #define ADC_CVL_CV1                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV1
    #define ADC_CVL_CV2                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV2
    #define ADC_CVL_CV3                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV3
    #define ADC_CVL_CV4                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV4
    #define ADC_CVL_CV5                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV5
    #define ADC_CVL_CV6                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV6
    #define ADC_CVL_CV7                 _ADC_CV.Overlap_STR.ADC_CVLSTR.Bits.CV7
    
    #define ADC_CVL_CV0_MASK            0x01U
    #define ADC_CVL_CV1_MASK            0x02U
    #define ADC_CVL_CV2_MASK            0x04U
    #define ADC_CVL_CV3_MASK            0x08U
    #define ADC_CVL_CV4_MASK            0x10U
    #define ADC_CVL_CV5_MASK            0x20U
    #define ADC_CVL_CV6_MASK            0x40U
    #define ADC_CVL_CV7_MASK            0x80U
    
  } Overlap_STR;

} ADC_CVSTR;
extern volatile ADC_CVSTR _ADC_CV @0x00000016;
#define ADC_CV                          _ADC_CV.Word


/*** FTM0_SC - Status and Control; 0x00000020 ***/
typedef union {
  byte Byte;
  struct {
    byte PS0         :1;                                       /* Prescale Factor Selection, bit 0 */
    byte PS1         :1;                                       /* Prescale Factor Selection, bit 1 */
    byte PS2         :1;                                       /* Prescale Factor Selection, bit 2 */
    byte CLKS0       :1;                                       /* Clock Source Selection, bit 0 */
    byte CLKS1       :1;                                       /* Clock Source Selection, bit 1 */
    byte CPWMS       :1;                                       /* Center-aligned PWM Select */
    byte TOIE        :1;                                       /* Timer Overflow Interrupt Enable */
    byte TOF         :1;                                       /* Timer Overflow Flag */
  } Bits;
  struct {
    byte grpPS   :3;
    byte grpCLKS :2;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} FTM0_SCSTR;
extern volatile FTM0_SCSTR _FTM0_SC @0x00000020;
#define FTM0_SC                         _FTM0_SC.Byte
#define FTM0_SC_PS0                     _FTM0_SC.Bits.PS0
#define FTM0_SC_PS1                     _FTM0_SC.Bits.PS1
#define FTM0_SC_PS2                     _FTM0_SC.Bits.PS2
#define FTM0_SC_CLKS0                   _FTM0_SC.Bits.CLKS0
#define FTM0_SC_CLKS1                   _FTM0_SC.Bits.CLKS1
#define FTM0_SC_CPWMS                   _FTM0_SC.Bits.CPWMS
#define FTM0_SC_TOIE                    _FTM0_SC.Bits.TOIE
#define FTM0_SC_TOF                     _FTM0_SC.Bits.TOF
#define FTM0_SC_PS                      _FTM0_SC.MergedBits.grpPS
#define FTM0_SC_CLKS                    _FTM0_SC.MergedBits.grpCLKS

#define FTM0_SC_PS0_MASK                0x01U
#define FTM0_SC_PS1_MASK                0x02U
#define FTM0_SC_PS2_MASK                0x04U
#define FTM0_SC_CLKS0_MASK              0x08U
#define FTM0_SC_CLKS1_MASK              0x10U
#define FTM0_SC_CPWMS_MASK              0x20U
#define FTM0_SC_TOIE_MASK               0x40U
#define FTM0_SC_TOF_MASK                0x80U
#define FTM0_SC_PS_MASK                 0x07U
#define FTM0_SC_PS_BITNUM               0x00U
#define FTM0_SC_CLKS_MASK               0x18U
#define FTM0_SC_CLKS_BITNUM             0x03U


/*** FTM0_CNT - FTM0 Timer Counter Register; 0x00000021 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM0_CNTH - Counter High; 0x00000021 ***/
    union {
      byte Byte;
    } FTM0_CNTHSTR;
    #define FTM0_CNTH                   _FTM0_CNT.Overlap_STR.FTM0_CNTHSTR.Byte
    

    /*** FTM0_CNTL - Counter Low; 0x00000022 ***/
    union {
      byte Byte;
    } FTM0_CNTLSTR;
    #define FTM0_CNTL                   _FTM0_CNT.Overlap_STR.FTM0_CNTLSTR.Byte
    
  } Overlap_STR;

} FTM0_CNTSTR;
extern volatile FTM0_CNTSTR _FTM0_CNT @0x00000021;
#define FTM0_CNT                        _FTM0_CNT.Word


/*** FTM0_MOD - FTM0 Timer Counter Modulo Register; 0x00000023 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM0_MODH - Modulo High; 0x00000023 ***/
    union {
      byte Byte;
    } FTM0_MODHSTR;
    #define FTM0_MODH                   _FTM0_MOD.Overlap_STR.FTM0_MODHSTR.Byte
    

    /*** FTM0_MODL - Modulo Low; 0x00000024 ***/
    union {
      byte Byte;
    } FTM0_MODLSTR;
    #define FTM0_MODL                   _FTM0_MOD.Overlap_STR.FTM0_MODLSTR.Byte
    
  } Overlap_STR;

} FTM0_MODSTR;
extern volatile FTM0_MODSTR _FTM0_MOD @0x00000023;
#define FTM0_MOD                        _FTM0_MOD.Word


/*** FTM0_C0SC - Channel Status and Control; 0x00000025 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte ELSA        :1;                                       /* Edge or Level Select */
    byte ELSB        :1;                                       /* Edge or Level Select */
    byte MSA         :1;                                       /* Channel Mode Select */
    byte MSB         :1;                                       /* Channel Mode Select */
    byte CHIE        :1;                                       /* Channel Interrupt Enable */
    byte CHF         :1;                                       /* Channel Flag */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpELSx :2;
    byte grpMSx  :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} FTM0_C0SCSTR;
extern volatile FTM0_C0SCSTR _FTM0_C0SC @0x00000025;
#define FTM0_C0SC                       _FTM0_C0SC.Byte
#define FTM0_C0SC_ELSA                  _FTM0_C0SC.Bits.ELSA
#define FTM0_C0SC_ELSB                  _FTM0_C0SC.Bits.ELSB
#define FTM0_C0SC_MSA                   _FTM0_C0SC.Bits.MSA
#define FTM0_C0SC_MSB                   _FTM0_C0SC.Bits.MSB
#define FTM0_C0SC_CHIE                  _FTM0_C0SC.Bits.CHIE
#define FTM0_C0SC_CHF                   _FTM0_C0SC.Bits.CHF
#define FTM0_C0SC_ELSx                  _FTM0_C0SC.MergedBits.grpELSx
#define FTM0_C0SC_MSx                   _FTM0_C0SC.MergedBits.grpMSx

#define FTM0_C0SC_ELSA_MASK             0x04U
#define FTM0_C0SC_ELSB_MASK             0x08U
#define FTM0_C0SC_MSA_MASK              0x10U
#define FTM0_C0SC_MSB_MASK              0x20U
#define FTM0_C0SC_CHIE_MASK             0x40U
#define FTM0_C0SC_CHF_MASK              0x80U
#define FTM0_C0SC_ELSx_MASK             0x0CU
#define FTM0_C0SC_ELSx_BITNUM           0x02U
#define FTM0_C0SC_MSx_MASK              0x30U
#define FTM0_C0SC_MSx_BITNUM            0x04U


/*** FTM0_C0V - FTM0 Timer Channel 0 Value Register; 0x00000026 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM0_C0VH - Channel Value High; 0x00000026 ***/
    union {
      byte Byte;
    } FTM0_C0VHSTR;
    #define FTM0_C0VH                   _FTM0_C0V.Overlap_STR.FTM0_C0VHSTR.Byte
    

    /*** FTM0_C0VL - Channel Value Low; 0x00000027 ***/
    union {
      byte Byte;
    } FTM0_C0VLSTR;
    #define FTM0_C0VL                   _FTM0_C0V.Overlap_STR.FTM0_C0VLSTR.Byte
    
  } Overlap_STR;

} FTM0_C0VSTR;
extern volatile FTM0_C0VSTR _FTM0_C0V @0x00000026;
#define FTM0_C0V                        _FTM0_C0V.Word


/*** FTM0_C1SC - Channel Status and Control; 0x00000028 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte ELSA        :1;                                       /* Edge or Level Select */
    byte ELSB        :1;                                       /* Edge or Level Select */
    byte MSA         :1;                                       /* Channel Mode Select */
    byte MSB         :1;                                       /* Channel Mode Select */
    byte CHIE        :1;                                       /* Channel Interrupt Enable */
    byte CHF         :1;                                       /* Channel Flag */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpELSx :2;
    byte grpMSx  :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} FTM0_C1SCSTR;
extern volatile FTM0_C1SCSTR _FTM0_C1SC @0x00000028;
#define FTM0_C1SC                       _FTM0_C1SC.Byte
#define FTM0_C1SC_ELSA                  _FTM0_C1SC.Bits.ELSA
#define FTM0_C1SC_ELSB                  _FTM0_C1SC.Bits.ELSB
#define FTM0_C1SC_MSA                   _FTM0_C1SC.Bits.MSA
#define FTM0_C1SC_MSB                   _FTM0_C1SC.Bits.MSB
#define FTM0_C1SC_CHIE                  _FTM0_C1SC.Bits.CHIE
#define FTM0_C1SC_CHF                   _FTM0_C1SC.Bits.CHF
#define FTM0_C1SC_ELSx                  _FTM0_C1SC.MergedBits.grpELSx
#define FTM0_C1SC_MSx                   _FTM0_C1SC.MergedBits.grpMSx

#define FTM0_C1SC_ELSA_MASK             0x04U
#define FTM0_C1SC_ELSB_MASK             0x08U
#define FTM0_C1SC_MSA_MASK              0x10U
#define FTM0_C1SC_MSB_MASK              0x20U
#define FTM0_C1SC_CHIE_MASK             0x40U
#define FTM0_C1SC_CHF_MASK              0x80U
#define FTM0_C1SC_ELSx_MASK             0x0CU
#define FTM0_C1SC_ELSx_BITNUM           0x02U
#define FTM0_C1SC_MSx_MASK              0x30U
#define FTM0_C1SC_MSx_BITNUM            0x04U


/*** FTM0_C1V - FTM0 Timer Channel 1 Value Register; 0x00000029 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM0_C1VH - Channel Value High; 0x00000029 ***/
    union {
      byte Byte;
    } FTM0_C1VHSTR;
    #define FTM0_C1VH                   _FTM0_C1V.Overlap_STR.FTM0_C1VHSTR.Byte
    

    /*** FTM0_C1VL - Channel Value Low; 0x0000002A ***/
    union {
      byte Byte;
    } FTM0_C1VLSTR;
    #define FTM0_C1VL                   _FTM0_C1V.Overlap_STR.FTM0_C1VLSTR.Byte
    
  } Overlap_STR;

} FTM0_C1VSTR;
extern volatile FTM0_C1VSTR _FTM0_C1V @0x00000029;
#define FTM0_C1V                        _FTM0_C1V.Word


/*** ACMP_CS - ACMP Control and Status Register; 0x0000002C ***/
typedef union {
  byte Byte;
  struct {
    byte ACMOD0      :1;                                       /* ACMP MOD, bit 0 */
    byte ACMOD1      :1;                                       /* ACMP MOD, bit 1 */
    byte ACOPE       :1;                                       /* ACMP Output Pin Enable */
    byte ACO         :1;                                       /* ACMP Output */
    byte ACIE        :1;                                       /* ACMP Interrupt Enable */
    byte ACF         :1;                                       /* ACMP Interrupt Flag Bit */
    byte HYST        :1;                                       /* Analoy Comparator Hystersis Selection */
    byte ACE         :1;                                       /* Analog Comparator Enable */
  } Bits;
  struct {
    byte grpACMOD :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ACMP_CSSTR;
extern volatile ACMP_CSSTR _ACMP_CS @0x0000002C;
#define ACMP_CS                         _ACMP_CS.Byte
#define ACMP_CS_ACMOD0                  _ACMP_CS.Bits.ACMOD0
#define ACMP_CS_ACMOD1                  _ACMP_CS.Bits.ACMOD1
#define ACMP_CS_ACOPE                   _ACMP_CS.Bits.ACOPE
#define ACMP_CS_ACO                     _ACMP_CS.Bits.ACO
#define ACMP_CS_ACIE                    _ACMP_CS.Bits.ACIE
#define ACMP_CS_ACF                     _ACMP_CS.Bits.ACF
#define ACMP_CS_HYST                    _ACMP_CS.Bits.HYST
#define ACMP_CS_ACE                     _ACMP_CS.Bits.ACE
#define ACMP_CS_ACMOD                   _ACMP_CS.MergedBits.grpACMOD

#define ACMP_CS_ACMOD0_MASK             0x01U
#define ACMP_CS_ACMOD1_MASK             0x02U
#define ACMP_CS_ACOPE_MASK              0x04U
#define ACMP_CS_ACO_MASK                0x08U
#define ACMP_CS_ACIE_MASK               0x10U
#define ACMP_CS_ACF_MASK                0x20U
#define ACMP_CS_HYST_MASK               0x40U
#define ACMP_CS_ACE_MASK                0x80U
#define ACMP_CS_ACMOD_MASK              0x03U
#define ACMP_CS_ACMOD_BITNUM            0x00U


/*** ACMP_C0 - ACMP Control Register 0; 0x0000002D ***/
typedef union {
  byte Byte;
  struct {
    byte ACNSEL0     :1;                                       /* ACMP Negative Input Select, bit 0 */
    byte ACNSEL1     :1;                                       /* ACMP Negative Input Select, bit 1 */
    byte             :1; 
    byte             :1; 
    byte ACPSEL0     :1;                                       /* ACMP Positive Input Select, bit 0 */
    byte ACPSEL1     :1;                                       /* ACMP Positive Input Select, bit 1 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpACNSEL :2;
    byte         :1;
    byte         :1;
    byte grpACPSEL :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} ACMP_C0STR;
extern volatile ACMP_C0STR _ACMP_C0 @0x0000002D;
#define ACMP_C0                         _ACMP_C0.Byte
#define ACMP_C0_ACNSEL0                 _ACMP_C0.Bits.ACNSEL0
#define ACMP_C0_ACNSEL1                 _ACMP_C0.Bits.ACNSEL1
#define ACMP_C0_ACPSEL0                 _ACMP_C0.Bits.ACPSEL0
#define ACMP_C0_ACPSEL1                 _ACMP_C0.Bits.ACPSEL1
/* ACMP_C_ARR: Access 3 ACMP_Cx registers in an array */
#define ACMP_C_ARR                      ((volatile byte * __far) &ACMP_C0)
#define ACMP_C0_ACNSEL                  _ACMP_C0.MergedBits.grpACNSEL
#define ACMP_C0_ACPSEL                  _ACMP_C0.MergedBits.grpACPSEL

#define ACMP_C0_ACNSEL0_MASK            0x01U
#define ACMP_C0_ACNSEL1_MASK            0x02U
#define ACMP_C0_ACPSEL0_MASK            0x10U
#define ACMP_C0_ACPSEL1_MASK            0x20U
#define ACMP_C0_ACNSEL_MASK             0x03U
#define ACMP_C0_ACNSEL_BITNUM           0x00U
#define ACMP_C0_ACPSEL_MASK             0x30U
#define ACMP_C0_ACPSEL_BITNUM           0x04U


/*** ACMP_C1 - ACMP Control Register 1; 0x0000002E ***/
typedef union {
  byte Byte;
  struct {
    byte DACVAL0     :1;                                       /* DAC Output Level Selection, bit 0 */
    byte DACVAL1     :1;                                       /* DAC Output Level Selection, bit 1 */
    byte DACVAL2     :1;                                       /* DAC Output Level Selection, bit 2 */
    byte DACVAL3     :1;                                       /* DAC Output Level Selection, bit 3 */
    byte DACVAL4     :1;                                       /* DAC Output Level Selection, bit 4 */
    byte DACVAL5     :1;                                       /* DAC Output Level Selection, bit 5 */
    byte DACREF      :1;                                       /* DAC Reference Select */
    byte DACEN       :1;                                       /* DAC Enable */
  } Bits;
  struct {
    byte grpDACVAL :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} ACMP_C1STR;
extern volatile ACMP_C1STR _ACMP_C1 @0x0000002E;
#define ACMP_C1                         _ACMP_C1.Byte
#define ACMP_C1_DACVAL0                 _ACMP_C1.Bits.DACVAL0
#define ACMP_C1_DACVAL1                 _ACMP_C1.Bits.DACVAL1
#define ACMP_C1_DACVAL2                 _ACMP_C1.Bits.DACVAL2
#define ACMP_C1_DACVAL3                 _ACMP_C1.Bits.DACVAL3
#define ACMP_C1_DACVAL4                 _ACMP_C1.Bits.DACVAL4
#define ACMP_C1_DACVAL5                 _ACMP_C1.Bits.DACVAL5
#define ACMP_C1_DACREF                  _ACMP_C1.Bits.DACREF
#define ACMP_C1_DACEN                   _ACMP_C1.Bits.DACEN
#define ACMP_C1_DACVAL                  _ACMP_C1.MergedBits.grpDACVAL

#define ACMP_C1_DACVAL0_MASK            0x01U
#define ACMP_C1_DACVAL1_MASK            0x02U
#define ACMP_C1_DACVAL2_MASK            0x04U
#define ACMP_C1_DACVAL3_MASK            0x08U
#define ACMP_C1_DACVAL4_MASK            0x10U
#define ACMP_C1_DACVAL5_MASK            0x20U
#define ACMP_C1_DACREF_MASK             0x40U
#define ACMP_C1_DACEN_MASK              0x80U
#define ACMP_C1_DACVAL_MASK             0x3FU
#define ACMP_C1_DACVAL_BITNUM           0x00U


/*** ACMP_C2 - ACMP Control Register 2; 0x0000002F ***/
typedef union {
  byte Byte;
  struct {
    byte ACIPE0      :1; 
    byte ACIPE1      :1; 
    byte ACIPE2      :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpACIPE :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ACMP_C2STR;
extern volatile ACMP_C2STR _ACMP_C2 @0x0000002F;
#define ACMP_C2                         _ACMP_C2.Byte
#define ACMP_C2_ACIPE0                  _ACMP_C2.Bits.ACIPE0
#define ACMP_C2_ACIPE1                  _ACMP_C2.Bits.ACIPE1
#define ACMP_C2_ACIPE2                  _ACMP_C2.Bits.ACIPE2
#define ACMP_C2_ACIPE                   _ACMP_C2.MergedBits.grpACIPE

#define ACMP_C2_ACIPE0_MASK             0x01U
#define ACMP_C2_ACIPE1_MASK             0x02U
#define ACMP_C2_ACIPE2_MASK             0x04U
#define ACMP_C2_ACIPE_MASK              0x07U
#define ACMP_C2_ACIPE_BITNUM            0x00U


/*** FTM1_SC - Status and Control; 0x00000030 ***/
typedef union {
  byte Byte;
  struct {
    byte PS0         :1;                                       /* Prescale Factor Selection, bit 0 */
    byte PS1         :1;                                       /* Prescale Factor Selection, bit 1 */
    byte PS2         :1;                                       /* Prescale Factor Selection, bit 2 */
    byte CLKS0       :1;                                       /* Clock Source Selection, bit 0 */
    byte CLKS1       :1;                                       /* Clock Source Selection, bit 1 */
    byte CPWMS       :1;                                       /* Center-aligned PWM Select */
    byte TOIE        :1;                                       /* Timer Overflow Interrupt Enable */
    byte TOF         :1;                                       /* Timer Overflow Flag */
  } Bits;
  struct {
    byte grpPS   :3;
    byte grpCLKS :2;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} FTM1_SCSTR;
extern volatile FTM1_SCSTR _FTM1_SC @0x00000030;
#define FTM1_SC                         _FTM1_SC.Byte
#define FTM1_SC_PS0                     _FTM1_SC.Bits.PS0
#define FTM1_SC_PS1                     _FTM1_SC.Bits.PS1
#define FTM1_SC_PS2                     _FTM1_SC.Bits.PS2
#define FTM1_SC_CLKS0                   _FTM1_SC.Bits.CLKS0
#define FTM1_SC_CLKS1                   _FTM1_SC.Bits.CLKS1
#define FTM1_SC_CPWMS                   _FTM1_SC.Bits.CPWMS
#define FTM1_SC_TOIE                    _FTM1_SC.Bits.TOIE
#define FTM1_SC_TOF                     _FTM1_SC.Bits.TOF
#define FTM1_SC_PS                      _FTM1_SC.MergedBits.grpPS
#define FTM1_SC_CLKS                    _FTM1_SC.MergedBits.grpCLKS

#define FTM1_SC_PS0_MASK                0x01U
#define FTM1_SC_PS1_MASK                0x02U
#define FTM1_SC_PS2_MASK                0x04U
#define FTM1_SC_CLKS0_MASK              0x08U
#define FTM1_SC_CLKS1_MASK              0x10U
#define FTM1_SC_CPWMS_MASK              0x20U
#define FTM1_SC_TOIE_MASK               0x40U
#define FTM1_SC_TOF_MASK                0x80U
#define FTM1_SC_PS_MASK                 0x07U
#define FTM1_SC_PS_BITNUM               0x00U
#define FTM1_SC_CLKS_MASK               0x18U
#define FTM1_SC_CLKS_BITNUM             0x03U


/*** FTM1_CNT - FTM1 Timer Counter Register; 0x00000031 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM1_CNTH - Counter High; 0x00000031 ***/
    union {
      byte Byte;
    } FTM1_CNTHSTR;
    #define FTM1_CNTH                   _FTM1_CNT.Overlap_STR.FTM1_CNTHSTR.Byte
    

    /*** FTM1_CNTL - Counter Low; 0x00000032 ***/
    union {
      byte Byte;
    } FTM1_CNTLSTR;
    #define FTM1_CNTL                   _FTM1_CNT.Overlap_STR.FTM1_CNTLSTR.Byte
    
  } Overlap_STR;

} FTM1_CNTSTR;
extern volatile FTM1_CNTSTR _FTM1_CNT @0x00000031;
#define FTM1_CNT                        _FTM1_CNT.Word


/*** FTM1_MOD - FTM1 Timer Counter Modulo Register; 0x00000033 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM1_MODH - Modulo High; 0x00000033 ***/
    union {
      byte Byte;
    } FTM1_MODHSTR;
    #define FTM1_MODH                   _FTM1_MOD.Overlap_STR.FTM1_MODHSTR.Byte
    

    /*** FTM1_MODL - Modulo Low; 0x00000034 ***/
    union {
      byte Byte;
    } FTM1_MODLSTR;
    #define FTM1_MODL                   _FTM1_MOD.Overlap_STR.FTM1_MODLSTR.Byte
    
  } Overlap_STR;

} FTM1_MODSTR;
extern volatile FTM1_MODSTR _FTM1_MOD @0x00000033;
#define FTM1_MOD                        _FTM1_MOD.Word


/*** FTM1_C0SC - Channel Status and Control; 0x00000035 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte ELSA        :1;                                       /* Edge or Level Select */
    byte ELSB        :1;                                       /* Edge or Level Select */
    byte MSA         :1;                                       /* Channel Mode Select */
    byte MSB         :1;                                       /* Channel Mode Select */
    byte CHIE        :1;                                       /* Channel Interrupt Enable */
    byte CHF         :1;                                       /* Channel Flag */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpELSx :2;
    byte grpMSx  :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} FTM1_C0SCSTR;
extern volatile FTM1_C0SCSTR _FTM1_C0SC @0x00000035;
#define FTM1_C0SC                       _FTM1_C0SC.Byte
#define FTM1_C0SC_ELSA                  _FTM1_C0SC.Bits.ELSA
#define FTM1_C0SC_ELSB                  _FTM1_C0SC.Bits.ELSB
#define FTM1_C0SC_MSA                   _FTM1_C0SC.Bits.MSA
#define FTM1_C0SC_MSB                   _FTM1_C0SC.Bits.MSB
#define FTM1_C0SC_CHIE                  _FTM1_C0SC.Bits.CHIE
#define FTM1_C0SC_CHF                   _FTM1_C0SC.Bits.CHF
#define FTM1_C0SC_ELSx                  _FTM1_C0SC.MergedBits.grpELSx
#define FTM1_C0SC_MSx                   _FTM1_C0SC.MergedBits.grpMSx

#define FTM1_C0SC_ELSA_MASK             0x04U
#define FTM1_C0SC_ELSB_MASK             0x08U
#define FTM1_C0SC_MSA_MASK              0x10U
#define FTM1_C0SC_MSB_MASK              0x20U
#define FTM1_C0SC_CHIE_MASK             0x40U
#define FTM1_C0SC_CHF_MASK              0x80U
#define FTM1_C0SC_ELSx_MASK             0x0CU
#define FTM1_C0SC_ELSx_BITNUM           0x02U
#define FTM1_C0SC_MSx_MASK              0x30U
#define FTM1_C0SC_MSx_BITNUM            0x04U


/*** FTM1_C0V - FTM1 Timer Channel 0 Value Register; 0x00000036 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM1_C0VH - Channel Value High; 0x00000036 ***/
    union {
      byte Byte;
    } FTM1_C0VHSTR;
    #define FTM1_C0VH                   _FTM1_C0V.Overlap_STR.FTM1_C0VHSTR.Byte
    

    /*** FTM1_C0VL - Channel Value Low; 0x00000037 ***/
    union {
      byte Byte;
    } FTM1_C0VLSTR;
    #define FTM1_C0VL                   _FTM1_C0V.Overlap_STR.FTM1_C0VLSTR.Byte
    
  } Overlap_STR;

} FTM1_C0VSTR;
extern volatile FTM1_C0VSTR _FTM1_C0V @0x00000036;
#define FTM1_C0V                        _FTM1_C0V.Word


/*** FTM1_C1SC - Channel Status and Control; 0x00000038 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte ELSA        :1;                                       /* Edge or Level Select */
    byte ELSB        :1;                                       /* Edge or Level Select */
    byte MSA         :1;                                       /* Channel Mode Select */
    byte MSB         :1;                                       /* Channel Mode Select */
    byte CHIE        :1;                                       /* Channel Interrupt Enable */
    byte CHF         :1;                                       /* Channel Flag */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpELSx :2;
    byte grpMSx  :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} FTM1_C1SCSTR;
extern volatile FTM1_C1SCSTR _FTM1_C1SC @0x00000038;
#define FTM1_C1SC                       _FTM1_C1SC.Byte
#define FTM1_C1SC_ELSA                  _FTM1_C1SC.Bits.ELSA
#define FTM1_C1SC_ELSB                  _FTM1_C1SC.Bits.ELSB
#define FTM1_C1SC_MSA                   _FTM1_C1SC.Bits.MSA
#define FTM1_C1SC_MSB                   _FTM1_C1SC.Bits.MSB
#define FTM1_C1SC_CHIE                  _FTM1_C1SC.Bits.CHIE
#define FTM1_C1SC_CHF                   _FTM1_C1SC.Bits.CHF
#define FTM1_C1SC_ELSx                  _FTM1_C1SC.MergedBits.grpELSx
#define FTM1_C1SC_MSx                   _FTM1_C1SC.MergedBits.grpMSx

#define FTM1_C1SC_ELSA_MASK             0x04U
#define FTM1_C1SC_ELSB_MASK             0x08U
#define FTM1_C1SC_MSA_MASK              0x10U
#define FTM1_C1SC_MSB_MASK              0x20U
#define FTM1_C1SC_CHIE_MASK             0x40U
#define FTM1_C1SC_CHF_MASK              0x80U
#define FTM1_C1SC_ELSx_MASK             0x0CU
#define FTM1_C1SC_ELSx_BITNUM           0x02U
#define FTM1_C1SC_MSx_MASK              0x30U
#define FTM1_C1SC_MSx_BITNUM            0x04U


/*** FTM1_C1V - FTM1 Timer Channel 1 Value Register; 0x00000039 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** FTM1_C1VH - Channel Value High; 0x00000039 ***/
    union {
      byte Byte;
    } FTM1_C1VHSTR;
    #define FTM1_C1VH                   _FTM1_C1V.Overlap_STR.FTM1_C1VHSTR.Byte
    

    /*** FTM1_C1VL - Channel Value Low; 0x0000003A ***/
    union {
      byte Byte;
    } FTM1_C1VLSTR;
    #define FTM1_C1VL                   _FTM1_C1V.Overlap_STR.FTM1_C1VLSTR.Byte
    
  } Overlap_STR;

} FTM1_C1VSTR;
extern volatile FTM1_C1VSTR _FTM1_C1V @0x00000039;
#define FTM1_C1V                        _FTM1_C1V.Word


/*** IRQ_SC - Interrupt Pin Request Status and Control Register; 0x0000003B ***/
typedef union {
  byte Byte;
  struct {
    byte IRQMOD      :1;                                       /* IRQ Detection Mode */
    byte IRQIE       :1;                                       /* IRQ Interrupt Enable */
    byte IRQACK      :1;                                       /* IRQ Acknowledge */
    byte IRQF        :1;                                       /* IRQ Flag */
    byte IRQPE       :1;                                       /* IRQ Pin Enable */
    byte IRQEDG      :1;                                       /* Interrupt Request (IRQ) Edge Select */
    byte IRQPDD      :1;                                       /* Interrupt Request (IRQ) Pull Device Disable */
    byte             :1; 
  } Bits;
} IRQ_SCSTR;
extern volatile IRQ_SCSTR _IRQ_SC @0x0000003B;
#define IRQ_SC                          _IRQ_SC.Byte
#define IRQ_SC_IRQMOD                   _IRQ_SC.Bits.IRQMOD
#define IRQ_SC_IRQIE                    _IRQ_SC.Bits.IRQIE
#define IRQ_SC_IRQACK                   _IRQ_SC.Bits.IRQACK
#define IRQ_SC_IRQF                     _IRQ_SC.Bits.IRQF
#define IRQ_SC_IRQPE                    _IRQ_SC.Bits.IRQPE
#define IRQ_SC_IRQEDG                   _IRQ_SC.Bits.IRQEDG
#define IRQ_SC_IRQPDD                   _IRQ_SC.Bits.IRQPDD

#define IRQ_SC_IRQMOD_MASK              0x01U
#define IRQ_SC_IRQIE_MASK               0x02U
#define IRQ_SC_IRQACK_MASK              0x04U
#define IRQ_SC_IRQF_MASK                0x08U
#define IRQ_SC_IRQPE_MASK               0x10U
#define IRQ_SC_IRQEDG_MASK              0x20U
#define IRQ_SC_IRQPDD_MASK              0x40U


/*** KBI0_SC - KBI Status and Control Register; 0x0000003C ***/
typedef union {
  byte Byte;
  struct {
    byte KBMOD       :1;                                       /* KBI Detection Mode */
    byte KBIE        :1;                                       /* KBI Interrupt Enable */
    byte KBACK       :1;                                       /* KBI Acknowledge */
    byte KBF         :1;                                       /* KBI Interrupt Flag */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} KBI0_SCSTR;
extern volatile KBI0_SCSTR _KBI0_SC @0x0000003C;
#define KBI0_SC                         _KBI0_SC.Byte
#define KBI0_SC_KBMOD                   _KBI0_SC.Bits.KBMOD
#define KBI0_SC_KBIE                    _KBI0_SC.Bits.KBIE
#define KBI0_SC_KBACK                   _KBI0_SC.Bits.KBACK
#define KBI0_SC_KBF                     _KBI0_SC.Bits.KBF

#define KBI0_SC_KBMOD_MASK              0x01U
#define KBI0_SC_KBIE_MASK               0x02U
#define KBI0_SC_KBACK_MASK              0x04U
#define KBI0_SC_KBF_MASK                0x08U


/*** IPC_SC - IPC Status and Control Register; 0x0000003E ***/
typedef union {
  byte Byte;
  struct {
    byte IPM0        :1;                                       /* Interrupt Priority Mask, bit 0 */
    byte IPM1        :1;                                       /* Interrupt Priority Mask, bit 1 */
    byte             :1; 
    byte PULIPM      :1;                                       /* Pull IPM from IPMPS */
    byte PSF         :1;                                       /* Pseudo Stack Full */
    byte PSE         :1;                                       /* Pseudo Stack Empty */
    byte             :1; 
    byte IPCE        :1;                                       /* Interrupt Priority Controller Enable */
  } Bits;
  struct {
    byte grpIPM  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} IPC_SCSTR;
extern volatile IPC_SCSTR _IPC_SC @0x0000003E;
#define IPC_SC                          _IPC_SC.Byte
#define IPC_SC_IPM0                     _IPC_SC.Bits.IPM0
#define IPC_SC_IPM1                     _IPC_SC.Bits.IPM1
#define IPC_SC_PULIPM                   _IPC_SC.Bits.PULIPM
#define IPC_SC_PSF                      _IPC_SC.Bits.PSF
#define IPC_SC_PSE                      _IPC_SC.Bits.PSE
#define IPC_SC_IPCE                     _IPC_SC.Bits.IPCE
#define IPC_SC_IPM                      _IPC_SC.MergedBits.grpIPM

#define IPC_SC_IPM0_MASK                0x01U
#define IPC_SC_IPM1_MASK                0x02U
#define IPC_SC_PULIPM_MASK              0x08U
#define IPC_SC_PSF_MASK                 0x10U
#define IPC_SC_PSE_MASK                 0x20U
#define IPC_SC_IPCE_MASK                0x80U
#define IPC_SC_IPM_MASK                 0x03U
#define IPC_SC_IPM_BITNUM               0x00U


/*** IPC_IPMPS - Interrupt Priority Mask Pseudo Stack Register; 0x0000003F ***/
typedef union {
  byte Byte;
  struct {
    byte IPM00       :1;                                       /* Interrupt Priority Mask pseudo stack position 0, bit 0 */
    byte IPM01       :1;                                       /* Interrupt Priority Mask pseudo stack position 0, bit 1 */
    byte IPM10       :1;                                       /* Interrupt Priority Mask pseudo stack position 1, bit 0 */
    byte IPM11       :1;                                       /* Interrupt Priority Mask pseudo stack position 1, bit 1 */
    byte IPM20       :1;                                       /* Interrupt Priority Mask pseudo stack position 2, bit 0 */
    byte IPM21       :1;                                       /* Interrupt Priority Mask pseudo stack position 2, bit 1 */
    byte IPM30       :1;                                       /* Interrupt Priority Mask pseudo stack position 3, bit 0 */
    byte IPM31       :1;                                       /* Interrupt Priority Mask pseudo stack position 3, bit 1 */
  } Bits;
  struct {
    byte grpIPM0 :2;
    byte grpIPM1 :2;
    byte grpIPM2 :2;
    byte grpIPM3 :2;
  } MergedBits;
} IPC_IPMPSSTR;
extern volatile IPC_IPMPSSTR _IPC_IPMPS @0x0000003F;
#define IPC_IPMPS                       _IPC_IPMPS.Byte
#define IPC_IPMPS_IPM00                 _IPC_IPMPS.Bits.IPM00
#define IPC_IPMPS_IPM01                 _IPC_IPMPS.Bits.IPM01
#define IPC_IPMPS_IPM10                 _IPC_IPMPS.Bits.IPM10
#define IPC_IPMPS_IPM11                 _IPC_IPMPS.Bits.IPM11
#define IPC_IPMPS_IPM20                 _IPC_IPMPS.Bits.IPM20
#define IPC_IPMPS_IPM21                 _IPC_IPMPS.Bits.IPM21
#define IPC_IPMPS_IPM30                 _IPC_IPMPS.Bits.IPM30
#define IPC_IPMPS_IPM31                 _IPC_IPMPS.Bits.IPM31
#define IPC_IPMPS_IPM0                  _IPC_IPMPS.MergedBits.grpIPM0
#define IPC_IPMPS_IPM1                  _IPC_IPMPS.MergedBits.grpIPM1
#define IPC_IPMPS_IPM2                  _IPC_IPMPS.MergedBits.grpIPM2
#define IPC_IPMPS_IPM3                  _IPC_IPMPS.MergedBits.grpIPM3

#define IPC_IPMPS_IPM00_MASK            0x01U
#define IPC_IPMPS_IPM01_MASK            0x02U
#define IPC_IPMPS_IPM10_MASK            0x04U
#define IPC_IPMPS_IPM11_MASK            0x08U
#define IPC_IPMPS_IPM20_MASK            0x10U
#define IPC_IPMPS_IPM21_MASK            0x20U
#define IPC_IPMPS_IPM30_MASK            0x40U
#define IPC_IPMPS_IPM31_MASK            0x80U
#define IPC_IPMPS_IPM0_MASK             0x03U
#define IPC_IPMPS_IPM0_BITNUM           0x00U
#define IPC_IPMPS_IPM1_MASK             0x0CU
#define IPC_IPMPS_IPM1_BITNUM           0x02U
#define IPC_IPMPS_IPM2_MASK             0x30U
#define IPC_IPMPS_IPM2_BITNUM           0x04U
#define IPC_IPMPS_IPM3_MASK             0xC0U
#define IPC_IPMPS_IPM3_BITNUM           0x06U


/*** SYS_SRS - System Reset Status Register; 0x00003000 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte LVD         :1;                                       /* Low Voltage Detect */
    byte LOC         :1;                                       /* Internal Clock Source Module Reset */
    byte ILAD        :1;                                       /* Illegal Address */
    byte ILOP        :1;                                       /* Illegal Opcode */
    byte WDOG        :1;                                       /* Watchdog (WDOG) */
    byte PIN         :1;                                       /* External Reset Pin */
    byte POR         :1;                                       /* Power-On Reset */
  } Bits;
} SYS_SRSSTR;
extern volatile SYS_SRSSTR _SYS_SRS @0x00003000;
#define SYS_SRS                         _SYS_SRS.Byte
#define SYS_SRS_LVD                     _SYS_SRS.Bits.LVD
#define SYS_SRS_LOC                     _SYS_SRS.Bits.LOC
#define SYS_SRS_ILAD                    _SYS_SRS.Bits.ILAD
#define SYS_SRS_ILOP                    _SYS_SRS.Bits.ILOP
#define SYS_SRS_WDOG                    _SYS_SRS.Bits.WDOG
#define SYS_SRS_PIN                     _SYS_SRS.Bits.PIN
#define SYS_SRS_POR                     _SYS_SRS.Bits.POR

#define SYS_SRS_LVD_MASK                0x02U
#define SYS_SRS_LOC_MASK                0x04U
#define SYS_SRS_ILAD_MASK               0x08U
#define SYS_SRS_ILOP_MASK               0x10U
#define SYS_SRS_WDOG_MASK               0x20U
#define SYS_SRS_PIN_MASK                0x40U
#define SYS_SRS_POR_MASK                0x80U


/*** SYS_SBDFR - System Background Debug Force Reset Register; 0x00003001 ***/
typedef union {
  byte Byte;
  struct {
    byte BDFR        :1;                                       /* Background Debug Force Reset */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} SYS_SBDFRSTR;
extern volatile SYS_SBDFRSTR _SYS_SBDFR @0x00003001;
#define SYS_SBDFR                       _SYS_SBDFR.Byte
#define SYS_SBDFR_BDFR                  _SYS_SBDFR.Bits.BDFR

#define SYS_SBDFR_BDFR_MASK             0x01U


/*** SYS_SDID - System Device Identification Register; 0x00003002 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** SYS_SDIDH - System Device Identification Register: High; 0x00003002 ***/
    union {
      byte Byte;
      struct {
        byte ID0         :1;                                       /* Part Identification Number, bit 0 */
        byte ID1         :1;                                       /* Part Identification Number, bit 1 */
        byte ID2         :1;                                       /* Part Identification Number, bit 2 */
        byte ID3         :1;                                       /* Part Identification Number, bit 3 */
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
      } Bits;
      struct {
        byte grpID :4;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
      } MergedBits;
    } SYS_SDIDHSTR;
    #define SYS_SDIDH                   _SYS_SDID.Overlap_STR.SYS_SDIDHSTR.Byte
    #define SYS_SDIDH_ID0               _SYS_SDID.Overlap_STR.SYS_SDIDHSTR.Bits.ID0
    #define SYS_SDIDH_ID1               _SYS_SDID.Overlap_STR.SYS_SDIDHSTR.Bits.ID1
    #define SYS_SDIDH_ID2               _SYS_SDID.Overlap_STR.SYS_SDIDHSTR.Bits.ID2
    #define SYS_SDIDH_ID3               _SYS_SDID.Overlap_STR.SYS_SDIDHSTR.Bits.ID3
    #define SYS_SDIDH_ID                _SYS_SDID.Overlap_STR.SYS_SDIDHSTR.MergedBits.grpID
    
    #define SYS_SDIDH_ID0_MASK          0x01U
    #define SYS_SDIDH_ID1_MASK          0x02U
    #define SYS_SDIDH_ID2_MASK          0x04U
    #define SYS_SDIDH_ID3_MASK          0x08U
    #define SYS_SDIDH_ID_MASK           0x0FU
    #define SYS_SDIDH_ID_BITNUM         0x00U
    

    /*** SYS_SDIDL - System Device Identification Register: Low; 0x00003003 ***/
    union {
      byte Byte;
      struct {
        byte ID0         :1;                                       /* Part Identification Number, bit 0 */
        byte ID1         :1;                                       /* Part Identification Number, bit 1 */
        byte ID2         :1;                                       /* Part Identification Number, bit 2 */
        byte ID3         :1;                                       /* Part Identification Number, bit 3 */
        byte ID4         :1;                                       /* Part Identification Number, bit 4 */
        byte ID5         :1;                                       /* Part Identification Number, bit 5 */
        byte ID6         :1;                                       /* Part Identification Number, bit 6 */
        byte ID7         :1;                                       /* Part Identification Number, bit 7 */
      } Bits;
    } SYS_SDIDLSTR;
    #define SYS_SDIDL                   _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Byte
    #define SYS_SDIDL_ID0               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID0
    #define SYS_SDIDL_ID1               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID1
    #define SYS_SDIDL_ID2               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID2
    #define SYS_SDIDL_ID3               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID3
    #define SYS_SDIDL_ID4               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID4
    #define SYS_SDIDL_ID5               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID5
    #define SYS_SDIDL_ID6               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID6
    #define SYS_SDIDL_ID7               _SYS_SDID.Overlap_STR.SYS_SDIDLSTR.Bits.ID7
    
    #define SYS_SDIDL_ID0_MASK          0x01U
    #define SYS_SDIDL_ID1_MASK          0x02U
    #define SYS_SDIDL_ID2_MASK          0x04U
    #define SYS_SDIDL_ID3_MASK          0x08U
    #define SYS_SDIDL_ID4_MASK          0x10U
    #define SYS_SDIDL_ID5_MASK          0x20U
    #define SYS_SDIDL_ID6_MASK          0x40U
    #define SYS_SDIDL_ID7_MASK          0x80U
    
  } Overlap_STR;

} SYS_SDIDSTR;
extern volatile SYS_SDIDSTR _SYS_SDID @0x00003002;
#define SYS_SDID                        _SYS_SDID.Word


/*** SYS_SOPT1 - System Options Register 1; 0x00003004 ***/
typedef union {
  byte Byte;
  struct {
    byte STOPE       :1;                                       /* Stop Mode Enable */
    byte FWAKE       :1;                                       /* Fast Wakeup Enable */
    byte RSTPE       :1;                                       /* RESET Pin Enable */
    byte BKGDPE      :1;                                       /* Background Debug Mode Pin Enable */
    byte             :1; 
    byte FTM0PS      :1;                                       /* FTM0 Pin Select */
    byte FTM1PS      :1;                                       /* FTM1 Port Pin Select */
    byte SCI0PS      :1;                                       /* SCI0 Pin Select */
  } Bits;
} SYS_SOPT1STR;
extern volatile SYS_SOPT1STR _SYS_SOPT1 @0x00003004;
#define SYS_SOPT1                       _SYS_SOPT1.Byte
#define SYS_SOPT1_STOPE                 _SYS_SOPT1.Bits.STOPE
#define SYS_SOPT1_FWAKE                 _SYS_SOPT1.Bits.FWAKE
#define SYS_SOPT1_RSTPE                 _SYS_SOPT1.Bits.RSTPE
#define SYS_SOPT1_BKGDPE                _SYS_SOPT1.Bits.BKGDPE
#define SYS_SOPT1_FTM0PS                _SYS_SOPT1.Bits.FTM0PS
#define SYS_SOPT1_FTM1PS                _SYS_SOPT1.Bits.FTM1PS
#define SYS_SOPT1_SCI0PS                _SYS_SOPT1.Bits.SCI0PS

#define SYS_SOPT1_STOPE_MASK            0x01U
#define SYS_SOPT1_FWAKE_MASK            0x02U
#define SYS_SOPT1_RSTPE_MASK            0x04U
#define SYS_SOPT1_BKGDPE_MASK           0x08U
#define SYS_SOPT1_FTM0PS_MASK           0x20U
#define SYS_SOPT1_FTM1PS_MASK           0x40U
#define SYS_SOPT1_SCI0PS_MASK           0x80U


/*** SYS_SOPT2 - System Options Register 2; 0x00003005 ***/
typedef union {
  byte Byte;
  struct {
    byte ADHWTS0     :1;                                       /* ADC Hardware Trigger Source, bit 0 */
    byte ADHWTS1     :1;                                       /* ADC Hardware Trigger Source, bit 1 */
    byte RTCC        :1;                                       /* Real-Time Counter Capture */
    byte ACIC        :1;                                       /* Analog Comparator to Input Capture Enable */
    byte RXDCE       :1;                                       /* SCI0 RxD Capture Select */
    byte RXDFE       :1;                                       /* SCI0 RxD Filter Select */
    byte             :1; 
    byte TXDME       :1;                                       /* SCI0 TxD Modulation Select */
  } Bits;
  struct {
    byte grpADHWTS :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} SYS_SOPT2STR;
extern volatile SYS_SOPT2STR _SYS_SOPT2 @0x00003005;
#define SYS_SOPT2                       _SYS_SOPT2.Byte
#define SYS_SOPT2_ADHWTS0               _SYS_SOPT2.Bits.ADHWTS0
#define SYS_SOPT2_ADHWTS1               _SYS_SOPT2.Bits.ADHWTS1
#define SYS_SOPT2_RTCC                  _SYS_SOPT2.Bits.RTCC
#define SYS_SOPT2_ACIC                  _SYS_SOPT2.Bits.ACIC
#define SYS_SOPT2_RXDCE                 _SYS_SOPT2.Bits.RXDCE
#define SYS_SOPT2_RXDFE                 _SYS_SOPT2.Bits.RXDFE
#define SYS_SOPT2_TXDME                 _SYS_SOPT2.Bits.TXDME
#define SYS_SOPT2_ADHWTS                _SYS_SOPT2.MergedBits.grpADHWTS

#define SYS_SOPT2_ADHWTS0_MASK          0x01U
#define SYS_SOPT2_ADHWTS1_MASK          0x02U
#define SYS_SOPT2_RTCC_MASK             0x04U
#define SYS_SOPT2_ACIC_MASK             0x08U
#define SYS_SOPT2_RXDCE_MASK            0x10U
#define SYS_SOPT2_RXDFE_MASK            0x20U
#define SYS_SOPT2_TXDME_MASK            0x80U
#define SYS_SOPT2_ADHWTS_MASK           0x03U
#define SYS_SOPT2_ADHWTS_BITNUM         0x00U


/*** SYS_SOPT3 - System Options Register 3; 0x00003006 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FTMCHS0     :1;                                       /* FTM Channel Select, bit 0 */
    byte FTMCHS1     :1;                                       /* FTM Channel Select, bit 1 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFTMCHS :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} SYS_SOPT3STR;
extern volatile SYS_SOPT3STR _SYS_SOPT3 @0x00003006;
#define SYS_SOPT3                       _SYS_SOPT3.Byte
#define SYS_SOPT3_FTMCHS0               _SYS_SOPT3.Bits.FTMCHS0
#define SYS_SOPT3_FTMCHS1               _SYS_SOPT3.Bits.FTMCHS1
#define SYS_SOPT3_FTMCHS                _SYS_SOPT3.MergedBits.grpFTMCHS

#define SYS_SOPT3_FTMCHS0_MASK          0x10U
#define SYS_SOPT3_FTMCHS1_MASK          0x20U
#define SYS_SOPT3_FTMCHS_MASK           0x30U
#define SYS_SOPT3_FTMCHS_BITNUM         0x04U


/*** SCG_C1 - System Clock Gating Control 1 Register; 0x0000300C ***/
typedef union {
  byte Byte;
  struct {
    byte RTC         :1;                                       /* RTC Clock Gate Control */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FTM0        :1;                                       /* FTM0 Clock Gate Control */
    byte FTM1        :1;                                       /* FTM1 Clock Gate Control */
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFTM  :2;
    byte         :1;
  } MergedBits;
} SCG_C1STR;
extern volatile SCG_C1STR _SCG_C1 @0x0000300C;
#define SCG_C1                          _SCG_C1.Byte
#define SCG_C1_RTC                      _SCG_C1.Bits.RTC
#define SCG_C1_FTM0                     _SCG_C1.Bits.FTM0
#define SCG_C1_FTM1                     _SCG_C1.Bits.FTM1
#define SCG_C1_FTM                      _SCG_C1.MergedBits.grpFTM

#define SCG_C1_RTC_MASK                 0x01U
#define SCG_C1_FTM0_MASK                0x20U
#define SCG_C1_FTM1_MASK                0x40U
#define SCG_C1_FTM_MASK                 0x60U
#define SCG_C1_FTM_BITNUM               0x05U


/*** SCG_C2 - System Clock Gating Control 2 Register; 0x0000300D ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte IPC         :1;                                       /* IPC Clock Gate Control */
    byte NVM         :1;                                       /* NVM Clock Gate Control */
    byte DBG         :1;                                       /* DBG Clock Gate Control */
    byte             :1; 
    byte             :1; 
  } Bits;
} SCG_C2STR;
extern volatile SCG_C2STR _SCG_C2 @0x0000300D;
#define SCG_C2                          _SCG_C2.Byte
#define SCG_C2_IPC                      _SCG_C2.Bits.IPC
#define SCG_C2_NVM                      _SCG_C2.Bits.NVM
#define SCG_C2_DBG                      _SCG_C2.Bits.DBG

#define SCG_C2_IPC_MASK                 0x08U
#define SCG_C2_NVM_MASK                 0x10U
#define SCG_C2_DBG_MASK                 0x20U


/*** SCG_C3 - System Clock Gating Control 3 Register; 0x0000300E ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte SCI0        :1;                                       /* SCI0 Clock Gate Control */
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} SCG_C3STR;
extern volatile SCG_C3STR _SCG_C3 @0x0000300E;
#define SCG_C3                          _SCG_C3.Byte
#define SCG_C3_SCI0                     _SCG_C3.Bits.SCI0

#define SCG_C3_SCI0_MASK                0x10U


/*** SCG_C4 - System Clock Gating Control 4 Register; 0x0000300F ***/
typedef union {
  byte Byte;
  struct {
    byte KBI0        :1;                                       /* KBI0 Clock Gate Control */
    byte             :1; 
    byte             :1; 
    byte IRQ         :1;                                       /* IRQ Clock Gate Control */
    byte             :1; 
    byte ADC         :1;                                       /* ADC Clock Gate Control */
    byte             :1; 
    byte ACMP        :1;                                       /* ACMP Clock Gate Control */
  } Bits;
} SCG_C4STR;
extern volatile SCG_C4STR _SCG_C4 @0x0000300F;
#define SCG_C4                          _SCG_C4.Byte
#define SCG_C4_KBI0                     _SCG_C4.Bits.KBI0
#define SCG_C4_IRQ                      _SCG_C4.Bits.IRQ
#define SCG_C4_ADC                      _SCG_C4.Bits.ADC
#define SCG_C4_ACMP                     _SCG_C4.Bits.ACMP

#define SCG_C4_KBI0_MASK                0x01U
#define SCG_C4_IRQ_MASK                 0x08U
#define SCG_C4_ADC_MASK                 0x20U
#define SCG_C4_ACMP_MASK                0x80U


/*** DBG_CAH - Debug Comparator A High Register; 0x00003010 ***/
typedef union {
  byte Byte;
} DBG_CAHSTR;
extern volatile DBG_CAHSTR _DBG_CAH @0x00003010;
#define DBG_CAH                         _DBG_CAH.Byte


/*** DBG_CAL - Debug Comparator A Low Register; 0x00003011 ***/
typedef union {
  byte Byte;
} DBG_CALSTR;
extern volatile DBG_CALSTR _DBG_CAL @0x00003011;
#define DBG_CAL                         _DBG_CAL.Byte


/*** DBG_CBH - Debug Comparator B High Register; 0x00003012 ***/
typedef union {
  byte Byte;
} DBG_CBHSTR;
extern volatile DBG_CBHSTR _DBG_CBH @0x00003012;
#define DBG_CBH                         _DBG_CBH.Byte


/*** DBG_CBL - Debug Comparator B Low Register; 0x00003013 ***/
typedef union {
  byte Byte;
} DBG_CBLSTR;
extern volatile DBG_CBLSTR _DBG_CBL @0x00003013;
#define DBG_CBL                         _DBG_CBL.Byte


/*** DBG_CCH - Debug Comparator C High Register; 0x00003014 ***/
typedef union {
  byte Byte;
} DBG_CCHSTR;
extern volatile DBG_CCHSTR _DBG_CCH @0x00003014;
#define DBG_CCH                         _DBG_CCH.Byte


/*** DBG_CCL - Debug Comparator C Low Register; 0x00003015 ***/
typedef union {
  byte Byte;
} DBG_CCLSTR;
extern volatile DBG_CCLSTR _DBG_CCL @0x00003015;
#define DBG_CCL                         _DBG_CCL.Byte


/*** DBG_FH - Debug FIFO High Register; 0x00003016 ***/
typedef union {
  byte Byte;
} DBG_FHSTR;
extern volatile DBG_FHSTR _DBG_FH @0x00003016;
#define DBG_FH                          _DBG_FH.Byte


/*** DBG_FL - Debug FIFO Low Register; 0x00003017 ***/
typedef union {
  byte Byte;
} DBG_FLSTR;
extern volatile DBG_FLSTR _DBG_FL @0x00003017;
#define DBG_FL                          _DBG_FL.Byte


/*** DBG_CAX - Debug Comparator A Extension Register; 0x00003018 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte RWA         :1;                                       /* Read/Write Comparator A Value Bit */
    byte RWAEN       :1;                                       /* Read/Write Comparator A Enable Bit */
  } Bits;
} DBG_CAXSTR;
extern volatile DBG_CAXSTR _DBG_CAX @0x00003018;
#define DBG_CAX                         _DBG_CAX.Byte
#define DBG_CAX_RWA                     _DBG_CAX.Bits.RWA
#define DBG_CAX_RWAEN                   _DBG_CAX.Bits.RWAEN

#define DBG_CAX_RWA_MASK                0x40U
#define DBG_CAX_RWAEN_MASK              0x80U


/*** DBG_CBX - Debug Comparator B Extension Register; 0x00003019 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte RWB         :1;                                       /* Read/Write Comparator B Value Bit */
    byte RWBEN       :1;                                       /* Read/Write Comparator B Enable Bit */
  } Bits;
} DBG_CBXSTR;
extern volatile DBG_CBXSTR _DBG_CBX @0x00003019;
#define DBG_CBX                         _DBG_CBX.Byte
#define DBG_CBX_RWB                     _DBG_CBX.Bits.RWB
#define DBG_CBX_RWBEN                   _DBG_CBX.Bits.RWBEN

#define DBG_CBX_RWB_MASK                0x40U
#define DBG_CBX_RWBEN_MASK              0x80U


/*** DBG_CCX - Debug Comparator C Extension Register; 0x0000301A ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte RWC         :1;                                       /* Read/Write Comparator C Value Bit */
    byte RWCEN       :1;                                       /* Read/Write Comparator C Enable Bit */
  } Bits;
} DBG_CCXSTR;
extern volatile DBG_CCXSTR _DBG_CCX @0x0000301A;
#define DBG_CCX                         _DBG_CCX.Byte
#define DBG_CCX_RWC                     _DBG_CCX.Bits.RWC
#define DBG_CCX_RWCEN                   _DBG_CCX.Bits.RWCEN

#define DBG_CCX_RWC_MASK                0x40U
#define DBG_CCX_RWCEN_MASK              0x80U


/*** DBG_FX - Debug FIFO Extended Information Register; 0x0000301B ***/
typedef union {
  byte Byte;
  struct {
    byte Bit16       :1;                                       /* Extended Address Bit 16 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte PPACC       :1;                                       /* PPAGE Access Indicator Bit */
  } Bits;
} DBG_FXSTR;
extern volatile DBG_FXSTR _DBG_FX @0x0000301B;
#define DBG_FX                          _DBG_FX.Byte
#define DBG_FX_Bit16                    _DBG_FX.Bits.Bit16
#define DBG_FX_PPACC                    _DBG_FX.Bits.PPACC

#define DBG_FX_Bit16_MASK               0x01U
#define DBG_FX_PPACC_MASK               0x80U


/*** DBG_C - Debug Control Register; 0x0000301C ***/
typedef union {
  byte Byte;
  struct {
    byte LOOP1       :1;                                       /* Select LOOP1 Capture Mode */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte BRKEN       :1;                                       /* Break Enable Bit */
    byte TAG         :1;                                       /* Tag or Force Bit */
    byte ARM         :1;                                       /* Arm Bit */
    byte DBGEN       :1;                                       /* DBG Module Enable Bit */
  } Bits;
} DBG_CSTR;
extern volatile DBG_CSTR _DBG_C @0x0000301C;
#define DBG_C                           _DBG_C.Byte
#define DBG_C_LOOP1                     _DBG_C.Bits.LOOP1
#define DBG_C_BRKEN                     _DBG_C.Bits.BRKEN
#define DBG_C_TAG                       _DBG_C.Bits.TAG
#define DBG_C_ARM                       _DBG_C.Bits.ARM
#define DBG_C_DBGEN                     _DBG_C.Bits.DBGEN

#define DBG_C_LOOP1_MASK                0x01U
#define DBG_C_BRKEN_MASK                0x10U
#define DBG_C_TAG_MASK                  0x20U
#define DBG_C_ARM_MASK                  0x40U
#define DBG_C_DBGEN_MASK                0x80U


/*** DBG_T - Debug Trigger Register; 0x0000301D ***/
typedef union {
  byte Byte;
  struct {
    byte TRG0        :1;                                       /* Trigger Mode Bits, bit 0 */
    byte TRG1        :1;                                       /* Trigger Mode Bits, bit 1 */
    byte TRG2        :1;                                       /* Trigger Mode Bits, bit 2 */
    byte TRG3        :1;                                       /* Trigger Mode Bits, bit 3 */
    byte             :1; 
    byte             :1; 
    byte BEGIN       :1;                                       /* Begin/End Trigger Bit */
    byte TRGSEL      :1;                                       /* Trigger Selection Bit */
  } Bits;
  struct {
    byte grpTRG  :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} DBG_TSTR;
extern volatile DBG_TSTR _DBG_T @0x0000301D;
#define DBG_T                           _DBG_T.Byte
#define DBG_T_TRG0                      _DBG_T.Bits.TRG0
#define DBG_T_TRG1                      _DBG_T.Bits.TRG1
#define DBG_T_TRG2                      _DBG_T.Bits.TRG2
#define DBG_T_TRG3                      _DBG_T.Bits.TRG3
#define DBG_T_BEGIN                     _DBG_T.Bits.BEGIN
#define DBG_T_TRGSEL                    _DBG_T.Bits.TRGSEL
#define DBG_T_TRG                       _DBG_T.MergedBits.grpTRG

#define DBG_T_TRG0_MASK                 0x01U
#define DBG_T_TRG1_MASK                 0x02U
#define DBG_T_TRG2_MASK                 0x04U
#define DBG_T_TRG3_MASK                 0x08U
#define DBG_T_BEGIN_MASK                0x40U
#define DBG_T_TRGSEL_MASK               0x80U
#define DBG_T_TRG_MASK                  0x0FU
#define DBG_T_TRG_BITNUM                0x00U


/*** DBG_S - Debug Status Register; 0x0000301E ***/
typedef union {
  byte Byte;
  struct {
    byte ARMF        :1;                                       /* Arm Flag Bit */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte CF          :1;                                       /* Trigger C Match Bit */
    byte BF          :1;                                       /* Trigger B Match Bit */
    byte AF          :1;                                       /* Trigger A Match Bit */
  } Bits;
} DBG_SSTR;
extern volatile DBG_SSTR _DBG_S @0x0000301E;
#define DBG_S                           _DBG_S.Byte
#define DBG_S_ARMF                      _DBG_S.Bits.ARMF
#define DBG_S_CF                        _DBG_S.Bits.CF
#define DBG_S_BF                        _DBG_S.Bits.BF
#define DBG_S_AF                        _DBG_S.Bits.AF

#define DBG_S_ARMF_MASK                 0x01U
#define DBG_S_CF_MASK                   0x20U
#define DBG_S_BF_MASK                   0x40U
#define DBG_S_AF_MASK                   0x80U


/*** DBG_CNT - Debug Count Status Register; 0x0000301F ***/
typedef union {
  byte Byte;
  struct {
    byte CNT         :4;                                       /* FIFO Valid Count Bitss */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} DBG_CNTSTR;
extern volatile DBG_CNTSTR _DBG_CNT @0x0000301F;
#define DBG_CNT                         _DBG_CNT.Byte
#define DBG_CNT_CNT                     _DBG_CNT.Bits.CNT

#define DBG_CNT_CNT_MASK                0x0FU
#define DBG_CNT_CNT_BITNUM              0x00U


/*** NVM_FCLKDIV - Flash Clock Divider Register; 0x00003020 ***/
typedef union {
  byte Byte;
  struct {
    byte FDIV0       :1;                                       /* Clock Divider Bits, bit 0 */
    byte FDIV1       :1;                                       /* Clock Divider Bits, bit 1 */
    byte FDIV2       :1;                                       /* Clock Divider Bits, bit 2 */
    byte FDIV3       :1;                                       /* Clock Divider Bits, bit 3 */
    byte FDIV4       :1;                                       /* Clock Divider Bits, bit 4 */
    byte FDIV5       :1;                                       /* Clock Divider Bits, bit 5 */
    byte FDIVLCK     :1;                                       /* Clock Divider Locked */
    byte FDIVLD      :1;                                       /* Clock Divider Loaded */
  } Bits;
  struct {
    byte grpFDIV :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} NVM_FCLKDIVSTR;
extern volatile NVM_FCLKDIVSTR _NVM_FCLKDIV @0x00003020;
#define NVM_FCLKDIV                     _NVM_FCLKDIV.Byte
#define NVM_FCLKDIV_FDIV0               _NVM_FCLKDIV.Bits.FDIV0
#define NVM_FCLKDIV_FDIV1               _NVM_FCLKDIV.Bits.FDIV1
#define NVM_FCLKDIV_FDIV2               _NVM_FCLKDIV.Bits.FDIV2
#define NVM_FCLKDIV_FDIV3               _NVM_FCLKDIV.Bits.FDIV3
#define NVM_FCLKDIV_FDIV4               _NVM_FCLKDIV.Bits.FDIV4
#define NVM_FCLKDIV_FDIV5               _NVM_FCLKDIV.Bits.FDIV5
#define NVM_FCLKDIV_FDIVLCK             _NVM_FCLKDIV.Bits.FDIVLCK
#define NVM_FCLKDIV_FDIVLD              _NVM_FCLKDIV.Bits.FDIVLD
#define NVM_FCLKDIV_FDIV                _NVM_FCLKDIV.MergedBits.grpFDIV

#define NVM_FCLKDIV_FDIV0_MASK          0x01U
#define NVM_FCLKDIV_FDIV1_MASK          0x02U
#define NVM_FCLKDIV_FDIV2_MASK          0x04U
#define NVM_FCLKDIV_FDIV3_MASK          0x08U
#define NVM_FCLKDIV_FDIV4_MASK          0x10U
#define NVM_FCLKDIV_FDIV5_MASK          0x20U
#define NVM_FCLKDIV_FDIVLCK_MASK        0x40U
#define NVM_FCLKDIV_FDIVLD_MASK         0x80U
#define NVM_FCLKDIV_FDIV_MASK           0x3FU
#define NVM_FCLKDIV_FDIV_BITNUM         0x00U


/*** NVM_FSEC - Flash Security Register; 0x00003021 ***/
typedef union {
  byte Byte;
  struct {
    byte SEC0        :1; 
    byte SEC1        :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte KEYEN0      :1; 
    byte KEYEN1      :1; 
  } Bits;
  struct {
    byte grpSEC  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpKEYEN :2;
  } MergedBits;
} NVM_FSECSTR;
extern volatile NVM_FSECSTR _NVM_FSEC @0x00003021;
#define NVM_FSEC                        _NVM_FSEC.Byte
#define NVM_FSEC_SEC0                   _NVM_FSEC.Bits.SEC0
#define NVM_FSEC_SEC1                   _NVM_FSEC.Bits.SEC1
#define NVM_FSEC_KEYEN0                 _NVM_FSEC.Bits.KEYEN0
#define NVM_FSEC_KEYEN1                 _NVM_FSEC.Bits.KEYEN1
#define NVM_FSEC_SEC                    _NVM_FSEC.MergedBits.grpSEC
#define NVM_FSEC_KEYEN                  _NVM_FSEC.MergedBits.grpKEYEN

#define NVM_FSEC_SEC0_MASK              0x01U
#define NVM_FSEC_SEC1_MASK              0x02U
#define NVM_FSEC_KEYEN0_MASK            0x40U
#define NVM_FSEC_KEYEN1_MASK            0x80U
#define NVM_FSEC_SEC_MASK               0x03U
#define NVM_FSEC_SEC_BITNUM             0x00U
#define NVM_FSEC_KEYEN_MASK             0xC0U
#define NVM_FSEC_KEYEN_BITNUM           0x06U


/*** NVM_FCCOBIX - Flash CCOB Index Register; 0x00003022 ***/
typedef union {
  byte Byte;
  struct {
    byte CCOBIX0     :1;                                       /* Common Command Register Index, bit 0 */
    byte CCOBIX1     :1;                                       /* Common Command Register Index, bit 1 */
    byte CCOBIX2     :1;                                       /* Common Command Register Index, bit 2 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpCCOBIX :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} NVM_FCCOBIXSTR;
extern volatile NVM_FCCOBIXSTR _NVM_FCCOBIX @0x00003022;
#define NVM_FCCOBIX                     _NVM_FCCOBIX.Byte
#define NVM_FCCOBIX_CCOBIX0             _NVM_FCCOBIX.Bits.CCOBIX0
#define NVM_FCCOBIX_CCOBIX1             _NVM_FCCOBIX.Bits.CCOBIX1
#define NVM_FCCOBIX_CCOBIX2             _NVM_FCCOBIX.Bits.CCOBIX2
#define NVM_FCCOBIX_CCOBIX              _NVM_FCCOBIX.MergedBits.grpCCOBIX

#define NVM_FCCOBIX_CCOBIX0_MASK        0x01U
#define NVM_FCCOBIX_CCOBIX1_MASK        0x02U
#define NVM_FCCOBIX_CCOBIX2_MASK        0x04U
#define NVM_FCCOBIX_CCOBIX_MASK         0x07U
#define NVM_FCCOBIX_CCOBIX_BITNUM       0x00U


/*** NVM_FCNFG - Flash Configuration Register; 0x00003024 ***/
typedef union {
  byte Byte;
  struct {
    byte FSFD        :1;                                       /* Force Single Bit Fault Detect */
    byte FDFD        :1;                                       /* Force Double Bit Fault Detect */
    byte             :1; 
    byte             :1; 
    byte IGNSF       :1;                                       /* Ignore Single Bit Fault */
    byte             :1; 
    byte             :1; 
    byte CCIE        :1;                                       /* Command Complete Interrupt Enable */
  } Bits;
} NVM_FCNFGSTR;
extern volatile NVM_FCNFGSTR _NVM_FCNFG @0x00003024;
#define NVM_FCNFG                       _NVM_FCNFG.Byte
#define NVM_FCNFG_FSFD                  _NVM_FCNFG.Bits.FSFD
#define NVM_FCNFG_FDFD                  _NVM_FCNFG.Bits.FDFD
#define NVM_FCNFG_IGNSF                 _NVM_FCNFG.Bits.IGNSF
#define NVM_FCNFG_CCIE                  _NVM_FCNFG.Bits.CCIE

#define NVM_FCNFG_FSFD_MASK             0x01U
#define NVM_FCNFG_FDFD_MASK             0x02U
#define NVM_FCNFG_IGNSF_MASK            0x10U
#define NVM_FCNFG_CCIE_MASK             0x80U


/*** NVM_FERCNFG - Flash Error Configuration Register; 0x00003025 ***/
typedef union {
  byte Byte;
  struct {
    byte SFDIE       :1;                                       /* Single Bit Fault Detect Interrupt Enable */
    byte DFDIE       :1;                                       /* Double Bit Fault Detect Interrupt Enable */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} NVM_FERCNFGSTR;
extern volatile NVM_FERCNFGSTR _NVM_FERCNFG @0x00003025;
#define NVM_FERCNFG                     _NVM_FERCNFG.Byte
#define NVM_FERCNFG_SFDIE               _NVM_FERCNFG.Bits.SFDIE
#define NVM_FERCNFG_DFDIE               _NVM_FERCNFG.Bits.DFDIE

#define NVM_FERCNFG_SFDIE_MASK          0x01U
#define NVM_FERCNFG_DFDIE_MASK          0x02U


/*** NVM_FSTAT - Flash Status Register; 0x00003026 ***/
typedef union {
  byte Byte;
  struct {
    byte MGSTAT0     :1; 
    byte MGSTAT1     :1; 
    byte             :1; 
    byte MGBUSY      :1;                                       /* Memory Controller Busy Flag */
    byte FPVIOL      :1;                                       /* Flash Protection Violation Flag */
    byte ACCERR      :1;                                       /* Flash Access Error Flag */
    byte             :1; 
    byte CCIF        :1;                                       /* Command Complete Interrupt Flag */
  } Bits;
  struct {
    byte grpMGSTAT :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} NVM_FSTATSTR;
extern volatile NVM_FSTATSTR _NVM_FSTAT @0x00003026;
#define NVM_FSTAT                       _NVM_FSTAT.Byte
#define NVM_FSTAT_MGSTAT0               _NVM_FSTAT.Bits.MGSTAT0
#define NVM_FSTAT_MGSTAT1               _NVM_FSTAT.Bits.MGSTAT1
#define NVM_FSTAT_MGBUSY                _NVM_FSTAT.Bits.MGBUSY
#define NVM_FSTAT_FPVIOL                _NVM_FSTAT.Bits.FPVIOL
#define NVM_FSTAT_ACCERR                _NVM_FSTAT.Bits.ACCERR
#define NVM_FSTAT_CCIF                  _NVM_FSTAT.Bits.CCIF
#define NVM_FSTAT_MGSTAT                _NVM_FSTAT.MergedBits.grpMGSTAT

#define NVM_FSTAT_MGSTAT0_MASK          0x01U
#define NVM_FSTAT_MGSTAT1_MASK          0x02U
#define NVM_FSTAT_MGBUSY_MASK           0x08U
#define NVM_FSTAT_FPVIOL_MASK           0x10U
#define NVM_FSTAT_ACCERR_MASK           0x20U
#define NVM_FSTAT_CCIF_MASK             0x80U
#define NVM_FSTAT_MGSTAT_MASK           0x03U
#define NVM_FSTAT_MGSTAT_BITNUM         0x00U


/*** NVM_FERSTAT - Flash Error Status Register; 0x00003027 ***/
typedef union {
  byte Byte;
  struct {
    byte SFDIF       :1;                                       /* Single Bit Fault Detect Interrupt Flag */
    byte DFDIF       :1;                                       /* Double Bit Fault Detect Interrupt Flag */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} NVM_FERSTATSTR;
extern volatile NVM_FERSTATSTR _NVM_FERSTAT @0x00003027;
#define NVM_FERSTAT                     _NVM_FERSTAT.Byte
#define NVM_FERSTAT_SFDIF               _NVM_FERSTAT.Bits.SFDIF
#define NVM_FERSTAT_DFDIF               _NVM_FERSTAT.Bits.DFDIF

#define NVM_FERSTAT_SFDIF_MASK          0x01U
#define NVM_FERSTAT_DFDIF_MASK          0x02U


/*** NVM_FPROT - Flash Protection Register; 0x00003028 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FPHS0       :1; 
    byte FPHS1       :1; 
    byte FPHDIS      :1;                                       /* Flash Protection Higher Address Range Disable */
    byte             :1; 
    byte FPOPEN      :1;                                       /* Flash Protection Operation Enable */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFPHS :2;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} NVM_FPROTSTR;
extern volatile NVM_FPROTSTR _NVM_FPROT @0x00003028;
#define NVM_FPROT                       _NVM_FPROT.Byte
#define NVM_FPROT_FPHS0                 _NVM_FPROT.Bits.FPHS0
#define NVM_FPROT_FPHS1                 _NVM_FPROT.Bits.FPHS1
#define NVM_FPROT_FPHDIS                _NVM_FPROT.Bits.FPHDIS
#define NVM_FPROT_FPOPEN                _NVM_FPROT.Bits.FPOPEN
#define NVM_FPROT_FPHS                  _NVM_FPROT.MergedBits.grpFPHS

#define NVM_FPROT_FPHS0_MASK            0x08U
#define NVM_FPROT_FPHS1_MASK            0x10U
#define NVM_FPROT_FPHDIS_MASK           0x20U
#define NVM_FPROT_FPOPEN_MASK           0x80U
#define NVM_FPROT_FPHS_MASK             0x18U
#define NVM_FPROT_FPHS_BITNUM           0x03U


/*** NVM_EEPROT - EEPROM Protection Register; 0x00003029 ***/
typedef union {
  byte Byte;
  struct {
    byte DPS0        :1;                                       /* EEPROM Protection Size, bit 0 */
    byte DPS1        :1;                                       /* EEPROM Protection Size, bit 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte DPOPEN      :1;                                       /* EEPROM Protection Control */
  } Bits;
  struct {
    byte grpDPS  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} NVM_EEPROTSTR;
extern volatile NVM_EEPROTSTR _NVM_EEPROT @0x00003029;
#define NVM_EEPROT                      _NVM_EEPROT.Byte
#define NVM_EEPROT_DPS0                 _NVM_EEPROT.Bits.DPS0
#define NVM_EEPROT_DPS1                 _NVM_EEPROT.Bits.DPS1
#define NVM_EEPROT_DPOPEN               _NVM_EEPROT.Bits.DPOPEN
#define NVM_EEPROT_DPS                  _NVM_EEPROT.MergedBits.grpDPS

#define NVM_EEPROT_DPS0_MASK            0x01U
#define NVM_EEPROT_DPS1_MASK            0x02U
#define NVM_EEPROT_DPOPEN_MASK          0x80U
#define NVM_EEPROT_DPS_MASK             0x03U
#define NVM_EEPROT_DPS_BITNUM           0x00U


/*** NVM_FCCOB - Flash Common Command Object Register; 0x0000302A ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** NVM_FCCOBHI - Flash Common Command Object Register:High; 0x0000302A ***/
    union {
      byte Byte;
      struct {
        byte CCOB0       :1;                                       /* Common Command Object Bit 15:8, bit 0 */
        byte CCOB1       :1;                                       /* Common Command Object Bit 15:8, bit 1 */
        byte CCOB2       :1;                                       /* Common Command Object Bit 15:8, bit 2 */
        byte CCOB3       :1;                                       /* Common Command Object Bit 15:8, bit 3 */
        byte CCOB4       :1;                                       /* Common Command Object Bit 15:8, bit 4 */
        byte CCOB5       :1;                                       /* Common Command Object Bit 15:8, bit 5 */
        byte CCOB6       :1;                                       /* Common Command Object Bit 15:8, bit 6 */
        byte CCOB7       :1;                                       /* Common Command Object Bit 15:8, bit 7 */
      } Bits;
    } NVM_FCCOBHISTR;
    #define NVM_FCCOBHI                 _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Byte
    #define NVM_FCCOBHI_CCOB0           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB0
    #define NVM_FCCOBHI_CCOB1           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB1
    #define NVM_FCCOBHI_CCOB2           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB2
    #define NVM_FCCOBHI_CCOB3           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB3
    #define NVM_FCCOBHI_CCOB4           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB4
    #define NVM_FCCOBHI_CCOB5           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB5
    #define NVM_FCCOBHI_CCOB6           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB6
    #define NVM_FCCOBHI_CCOB7           _NVM_FCCOB.Overlap_STR.NVM_FCCOBHISTR.Bits.CCOB7
    
    #define NVM_FCCOBHI_CCOB0_MASK      0x01U
    #define NVM_FCCOBHI_CCOB1_MASK      0x02U
    #define NVM_FCCOBHI_CCOB2_MASK      0x04U
    #define NVM_FCCOBHI_CCOB3_MASK      0x08U
    #define NVM_FCCOBHI_CCOB4_MASK      0x10U
    #define NVM_FCCOBHI_CCOB5_MASK      0x20U
    #define NVM_FCCOBHI_CCOB6_MASK      0x40U
    #define NVM_FCCOBHI_CCOB7_MASK      0x80U
    

    /*** NVM_FCCOBLO - Flash Common Command Object Register: Low; 0x0000302B ***/
    union {
      byte Byte;
      struct {
        byte CCOB0       :1;                                       /* Common Command Object Bit 7:0, bit 0 */
        byte CCOB1       :1;                                       /* Common Command Object Bit 7:0, bit 1 */
        byte CCOB2       :1;                                       /* Common Command Object Bit 7:0, bit 2 */
        byte CCOB3       :1;                                       /* Common Command Object Bit 7:0, bit 3 */
        byte CCOB4       :1;                                       /* Common Command Object Bit 7:0, bit 4 */
        byte CCOB5       :1;                                       /* Common Command Object Bit 7:0, bit 5 */
        byte CCOB6       :1;                                       /* Common Command Object Bit 7:0, bit 6 */
        byte CCOB7       :1;                                       /* Common Command Object Bit 7:0, bit 7 */
      } Bits;
    } NVM_FCCOBLOSTR;
    #define NVM_FCCOBLO                 _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Byte
    #define NVM_FCCOBLO_CCOB0           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB0
    #define NVM_FCCOBLO_CCOB1           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB1
    #define NVM_FCCOBLO_CCOB2           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB2
    #define NVM_FCCOBLO_CCOB3           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB3
    #define NVM_FCCOBLO_CCOB4           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB4
    #define NVM_FCCOBLO_CCOB5           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB5
    #define NVM_FCCOBLO_CCOB6           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB6
    #define NVM_FCCOBLO_CCOB7           _NVM_FCCOB.Overlap_STR.NVM_FCCOBLOSTR.Bits.CCOB7
    
    #define NVM_FCCOBLO_CCOB0_MASK      0x01U
    #define NVM_FCCOBLO_CCOB1_MASK      0x02U
    #define NVM_FCCOBLO_CCOB2_MASK      0x04U
    #define NVM_FCCOBLO_CCOB3_MASK      0x08U
    #define NVM_FCCOBLO_CCOB4_MASK      0x10U
    #define NVM_FCCOBLO_CCOB5_MASK      0x20U
    #define NVM_FCCOBLO_CCOB6_MASK      0x40U
    #define NVM_FCCOBLO_CCOB7_MASK      0x80U
    
  } Overlap_STR;

} NVM_FCCOBSTR;
extern volatile NVM_FCCOBSTR _NVM_FCCOB @0x0000302A;
#define NVM_FCCOB                       _NVM_FCCOB.Word


/*** NVM_FOPT - Flash Option Register; 0x0000302C ***/
typedef union {
  byte Byte;
  struct {
    byte NV0         :1;                                       /* Nonvolatile Bits, bit 0 */
    byte NV1         :1;                                       /* Nonvolatile Bits, bit 1 */
    byte NV2         :1;                                       /* Nonvolatile Bits, bit 2 */
    byte NV3         :1;                                       /* Nonvolatile Bits, bit 3 */
    byte NV4         :1;                                       /* Nonvolatile Bits, bit 4 */
    byte NV5         :1;                                       /* Nonvolatile Bits, bit 5 */
    byte NV6         :1;                                       /* Nonvolatile Bits, bit 6 */
    byte NV7         :1;                                       /* Nonvolatile Bits, bit 7 */
  } Bits;
} NVM_FOPTSTR;
extern volatile NVM_FOPTSTR _NVM_FOPT @0x0000302C;
#define NVM_FOPT                        _NVM_FOPT.Byte
#define NVM_FOPT_NV0                    _NVM_FOPT.Bits.NV0
#define NVM_FOPT_NV1                    _NVM_FOPT.Bits.NV1
#define NVM_FOPT_NV2                    _NVM_FOPT.Bits.NV2
#define NVM_FOPT_NV3                    _NVM_FOPT.Bits.NV3
#define NVM_FOPT_NV4                    _NVM_FOPT.Bits.NV4
#define NVM_FOPT_NV5                    _NVM_FOPT.Bits.NV5
#define NVM_FOPT_NV6                    _NVM_FOPT.Bits.NV6
#define NVM_FOPT_NV7                    _NVM_FOPT.Bits.NV7

#define NVM_FOPT_NV0_MASK               0x01U
#define NVM_FOPT_NV1_MASK               0x02U
#define NVM_FOPT_NV2_MASK               0x04U
#define NVM_FOPT_NV3_MASK               0x08U
#define NVM_FOPT_NV4_MASK               0x10U
#define NVM_FOPT_NV5_MASK               0x20U
#define NVM_FOPT_NV6_MASK               0x40U
#define NVM_FOPT_NV7_MASK               0x80U


/*** WDOG_CS1 - Watchdog Control and Status Register 1; 0x00003030 ***/
typedef union {
  byte Byte;
  struct {
    byte STOP        :1;                                       /* Stop Enable */
    byte WAIT        :1;                                       /* Wait Enable */
    byte DBG         :1;                                       /* Debug Enable */
    byte TST0        :1;                                       /* Watchdog Test, bit 0 */
    byte TST1        :1;                                       /* Watchdog Test, bit 1 */
    byte UPDATE      :1;                                       /* Allow updates */
    byte INT         :1;                                       /* Watchdog Interrupt */
    byte EN          :1;                                       /* Watchdog Enable */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpTST  :2;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} WDOG_CS1STR;
extern volatile WDOG_CS1STR _WDOG_CS1 @0x00003030;
#define WDOG_CS1                        _WDOG_CS1.Byte
#define WDOG_CS1_STOP                   _WDOG_CS1.Bits.STOP
#define WDOG_CS1_WAIT                   _WDOG_CS1.Bits.WAIT
#define WDOG_CS1_DBG                    _WDOG_CS1.Bits.DBG
#define WDOG_CS1_TST0                   _WDOG_CS1.Bits.TST0
#define WDOG_CS1_TST1                   _WDOG_CS1.Bits.TST1
#define WDOG_CS1_UPDATE                 _WDOG_CS1.Bits.UPDATE
#define WDOG_CS1_INT                    _WDOG_CS1.Bits.INT
#define WDOG_CS1_EN                     _WDOG_CS1.Bits.EN
#define WDOG_CS1_TST                    _WDOG_CS1.MergedBits.grpTST

#define WDOG_CS1_STOP_MASK              0x01U
#define WDOG_CS1_WAIT_MASK              0x02U
#define WDOG_CS1_DBG_MASK               0x04U
#define WDOG_CS1_TST0_MASK              0x08U
#define WDOG_CS1_TST1_MASK              0x10U
#define WDOG_CS1_UPDATE_MASK            0x20U
#define WDOG_CS1_INT_MASK               0x40U
#define WDOG_CS1_EN_MASK                0x80U
#define WDOG_CS1_TST_MASK               0x18U
#define WDOG_CS1_TST_BITNUM             0x03U


/*** WDOG_CS2 - Watchdog Control and Status Register 2; 0x00003031 ***/
typedef union {
  byte Byte;
  struct {
    byte CLK0        :1;                                       /* Watchdog Clock, bit 0 */
    byte CLK1        :1;                                       /* Watchdog Clock, bit 1 */
    byte             :1; 
    byte             :1; 
    byte PRES        :1;                                       /* Watchdog Prescalar */
    byte             :1; 
    byte FLG         :1;                                       /* Watchdog Interrupt Flag */
    byte WIN         :1;                                       /* Watchdog Window */
  } Bits;
  struct {
    byte grpCLK  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} WDOG_CS2STR;
extern volatile WDOG_CS2STR _WDOG_CS2 @0x00003031;
#define WDOG_CS2                        _WDOG_CS2.Byte
#define WDOG_CS2_CLK0                   _WDOG_CS2.Bits.CLK0
#define WDOG_CS2_CLK1                   _WDOG_CS2.Bits.CLK1
#define WDOG_CS2_PRES                   _WDOG_CS2.Bits.PRES
#define WDOG_CS2_FLG                    _WDOG_CS2.Bits.FLG
#define WDOG_CS2_WIN                    _WDOG_CS2.Bits.WIN
#define WDOG_CS2_CLK                    _WDOG_CS2.MergedBits.grpCLK

#define WDOG_CS2_CLK0_MASK              0x01U
#define WDOG_CS2_CLK1_MASK              0x02U
#define WDOG_CS2_PRES_MASK              0x10U
#define WDOG_CS2_FLG_MASK               0x40U
#define WDOG_CS2_WIN_MASK               0x80U
#define WDOG_CS2_CLK_MASK               0x03U
#define WDOG_CS2_CLK_BITNUM             0x00U


/*** WDOG_CNT - Watchdog Counter Register; 0x00003032 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** WDOG_CNTH - Watchdog Counter Register: High; 0x00003032 ***/
    union {
      byte Byte;
    } WDOG_CNTHSTR;
    #define WDOG_CNTH                   _WDOG_CNT.Overlap_STR.WDOG_CNTHSTR.Byte
    

    /*** WDOG_CNTL - Watchdog Counter Register: Low; 0x00003033 ***/
    union {
      byte Byte;
    } WDOG_CNTLSTR;
    #define WDOG_CNTL                   _WDOG_CNT.Overlap_STR.WDOG_CNTLSTR.Byte
    
  } Overlap_STR;

} WDOG_CNTSTR;
extern volatile WDOG_CNTSTR _WDOG_CNT @0x00003032;
#define WDOG_CNT                        _WDOG_CNT.Word


/*** WDOG_TOVAL - Watchdog Timer Register; 0x00003034 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** WDOG_TOVALH - Watchdog Timeout Value Register: High; 0x00003034 ***/
    union {
      byte Byte;
    } WDOG_TOVALHSTR;
    #define WDOG_TOVALH                 _WDOG_TOVAL.Overlap_STR.WDOG_TOVALHSTR.Byte
    

    /*** WDOG_TOVALL - Watchdog Timeout Value Register: Low; 0x00003035 ***/
    union {
      byte Byte;
    } WDOG_TOVALLSTR;
    #define WDOG_TOVALL                 _WDOG_TOVAL.Overlap_STR.WDOG_TOVALLSTR.Byte
    
  } Overlap_STR;

} WDOG_TOVALSTR;
extern volatile WDOG_TOVALSTR _WDOG_TOVAL @0x00003034;
#define WDOG_TOVAL                      _WDOG_TOVAL.Word


/*** WDOG_WIN - Watchdog Window Register; 0x00003036 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** WDOG_WINH - Watchdog Window Register: High; 0x00003036 ***/
    union {
      byte Byte;
    } WDOG_WINHSTR;
    #define WDOG_WINH                   _WDOG_WIN.Overlap_STR.WDOG_WINHSTR.Byte
    

    /*** WDOG_WINL - Watchdog Window Register: Low; 0x00003037 ***/
    union {
      byte Byte;
    } WDOG_WINLSTR;
    #define WDOG_WINL                   _WDOG_WIN.Overlap_STR.WDOG_WINLSTR.Byte
    
  } Overlap_STR;

} WDOG_WINSTR;
extern volatile WDOG_WINSTR _WDOG_WIN @0x00003036;
#define WDOG_WIN                        _WDOG_WIN.Word


/*** ICS_C1 - ICS Control Register 1; 0x00003038 ***/
typedef union {
  byte Byte;
  struct {
    byte IREFSTEN    :1;                                       /* Internal Reference Stop Enable */
    byte IRCLKEN     :1;                                       /* Internal Reference Clock Enable */
    byte IREFS       :1;                                       /* Internal Reference Select */
    byte RDIV0       :1;                                       /* Reference Divider, bit 0 */
    byte RDIV1       :1;                                       /* Reference Divider, bit 1 */
    byte RDIV2       :1;                                       /* Reference Divider, bit 2 */
    byte CLKS0       :1;                                       /* Clock Source Select, bit 0 */
    byte CLKS1       :1;                                       /* Clock Source Select, bit 1 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpRDIV :3;
    byte grpCLKS :2;
  } MergedBits;
} ICS_C1STR;
extern volatile ICS_C1STR _ICS_C1 @0x00003038;
#define ICS_C1                          _ICS_C1.Byte
#define ICS_C1_IREFSTEN                 _ICS_C1.Bits.IREFSTEN
#define ICS_C1_IRCLKEN                  _ICS_C1.Bits.IRCLKEN
#define ICS_C1_IREFS                    _ICS_C1.Bits.IREFS
#define ICS_C1_RDIV0                    _ICS_C1.Bits.RDIV0
#define ICS_C1_RDIV1                    _ICS_C1.Bits.RDIV1
#define ICS_C1_RDIV2                    _ICS_C1.Bits.RDIV2
#define ICS_C1_CLKS0                    _ICS_C1.Bits.CLKS0
#define ICS_C1_CLKS1                    _ICS_C1.Bits.CLKS1
#define ICS_C1_RDIV                     _ICS_C1.MergedBits.grpRDIV
#define ICS_C1_CLKS                     _ICS_C1.MergedBits.grpCLKS

#define ICS_C1_IREFSTEN_MASK            0x01U
#define ICS_C1_IRCLKEN_MASK             0x02U
#define ICS_C1_IREFS_MASK               0x04U
#define ICS_C1_RDIV0_MASK               0x08U
#define ICS_C1_RDIV1_MASK               0x10U
#define ICS_C1_RDIV2_MASK               0x20U
#define ICS_C1_CLKS0_MASK               0x40U
#define ICS_C1_CLKS1_MASK               0x80U
#define ICS_C1_RDIV_MASK                0x38U
#define ICS_C1_RDIV_BITNUM              0x03U
#define ICS_C1_CLKS_MASK                0xC0U
#define ICS_C1_CLKS_BITNUM              0x06U


/*** ICS_C2 - ICS Control Register 2; 0x00003039 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte LP          :1;                                       /* Low Power Select */
    byte BDIV0       :1;                                       /* Bus Frequency Divider, bit 0 */
    byte BDIV1       :1;                                       /* Bus Frequency Divider, bit 1 */
    byte BDIV2       :1;                                       /* Bus Frequency Divider, bit 2 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpBDIV :3;
  } MergedBits;
} ICS_C2STR;
extern volatile ICS_C2STR _ICS_C2 @0x00003039;
#define ICS_C2                          _ICS_C2.Byte
#define ICS_C2_LP                       _ICS_C2.Bits.LP
#define ICS_C2_BDIV0                    _ICS_C2.Bits.BDIV0
#define ICS_C2_BDIV1                    _ICS_C2.Bits.BDIV1
#define ICS_C2_BDIV2                    _ICS_C2.Bits.BDIV2
#define ICS_C2_BDIV                     _ICS_C2.MergedBits.grpBDIV

#define ICS_C2_LP_MASK                  0x10U
#define ICS_C2_BDIV0_MASK               0x20U
#define ICS_C2_BDIV1_MASK               0x40U
#define ICS_C2_BDIV2_MASK               0x80U
#define ICS_C2_BDIV_MASK                0xE0U
#define ICS_C2_BDIV_BITNUM              0x05U


/*** ICS_C3 - ICS Control Register 3; 0x0000303A ***/
typedef union {
  byte Byte;
  struct {
    byte SCTRIM0     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 0 */
    byte SCTRIM1     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 1 */
    byte SCTRIM2     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 2 */
    byte SCTRIM3     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 3 */
    byte SCTRIM4     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 4 */
    byte SCTRIM5     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 5 */
    byte SCTRIM6     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 6 */
    byte SCTRIM7     :1;                                       /* Slow Internal Reference Clock Trim Setting, bit 7 */
  } Bits;
} ICS_C3STR;
extern volatile ICS_C3STR _ICS_C3 @0x0000303A;
#define ICS_C3                          _ICS_C3.Byte
#define ICS_C3_SCTRIM0                  _ICS_C3.Bits.SCTRIM0
#define ICS_C3_SCTRIM1                  _ICS_C3.Bits.SCTRIM1
#define ICS_C3_SCTRIM2                  _ICS_C3.Bits.SCTRIM2
#define ICS_C3_SCTRIM3                  _ICS_C3.Bits.SCTRIM3
#define ICS_C3_SCTRIM4                  _ICS_C3.Bits.SCTRIM4
#define ICS_C3_SCTRIM5                  _ICS_C3.Bits.SCTRIM5
#define ICS_C3_SCTRIM6                  _ICS_C3.Bits.SCTRIM6
#define ICS_C3_SCTRIM7                  _ICS_C3.Bits.SCTRIM7

#define ICS_C3_SCTRIM0_MASK             0x01U
#define ICS_C3_SCTRIM1_MASK             0x02U
#define ICS_C3_SCTRIM2_MASK             0x04U
#define ICS_C3_SCTRIM3_MASK             0x08U
#define ICS_C3_SCTRIM4_MASK             0x10U
#define ICS_C3_SCTRIM5_MASK             0x20U
#define ICS_C3_SCTRIM6_MASK             0x40U
#define ICS_C3_SCTRIM7_MASK             0x80U


/*** ICS_C4 - ICS Control Register 4; 0x0000303B ***/
typedef union {
  byte Byte;
  struct {
    byte SCFTRIM     :1;                                       /* Slow Internal Reference Clock Fine Trim */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte CME         :1;                                       /* Clock Monitor Enable */
    byte             :1; 
    byte LOLIE       :1;                                       /* Loss of Lock Interrupt */
  } Bits;
} ICS_C4STR;
extern volatile ICS_C4STR _ICS_C4 @0x0000303B;
#define ICS_C4                          _ICS_C4.Byte
#define ICS_C4_SCFTRIM                  _ICS_C4.Bits.SCFTRIM
#define ICS_C4_CME                      _ICS_C4.Bits.CME
#define ICS_C4_LOLIE                    _ICS_C4.Bits.LOLIE

#define ICS_C4_SCFTRIM_MASK             0x01U
#define ICS_C4_CME_MASK                 0x20U
#define ICS_C4_LOLIE_MASK               0x80U


/*** ICS_S - ICS Status Register; 0x0000303C ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte CLKST0      :1;                                       /* Clock Mode Status, bit 0 */
    byte CLKST1      :1;                                       /* Clock Mode Status, bit 1 */
    byte IREFST      :1;                                       /* Internal Reference Status */
    byte             :1; 
    byte LOCK        :1;                                       /* Lock Status */
    byte LOLS        :1;                                       /* Loss of Lock Status */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpCLKST :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ICS_SSTR;
extern volatile ICS_SSTR _ICS_S @0x0000303C;
#define ICS_S                           _ICS_S.Byte
#define ICS_S_CLKST0                    _ICS_S.Bits.CLKST0
#define ICS_S_CLKST1                    _ICS_S.Bits.CLKST1
#define ICS_S_IREFST                    _ICS_S.Bits.IREFST
#define ICS_S_LOCK                      _ICS_S.Bits.LOCK
#define ICS_S_LOLS                      _ICS_S.Bits.LOLS
#define ICS_S_CLKST                     _ICS_S.MergedBits.grpCLKST

#define ICS_S_CLKST0_MASK               0x04U
#define ICS_S_CLKST1_MASK               0x08U
#define ICS_S_IREFST_MASK               0x10U
#define ICS_S_LOCK_MASK                 0x40U
#define ICS_S_LOLS_MASK                 0x80U
#define ICS_S_CLKST_MASK                0x0CU
#define ICS_S_CLKST_BITNUM              0x02U


/*** ICS_OSCSC - OSC Status and Control Register; 0x0000303E ***/
typedef union {
  byte Byte;
  struct {
    byte OSCINIT     :1;                                       /* OSC Initialization */
    byte HGO         :1;                                       /* High Gain Oscillator Select */
    byte RANGE       :1;                                       /* Frequency Range Select */
    byte             :1; 
    byte OSCOS       :1;                                       /* OSC Output Select */
    byte OSCSTEN     :1;                                       /* OSC Enable in Stop mode */
    byte             :1; 
    byte OSCEN       :1;                                       /* OSC Enable */
  } Bits;
} ICS_OSCSCSTR;
extern volatile ICS_OSCSCSTR _ICS_OSCSC @0x0000303E;
#define ICS_OSCSC                       _ICS_OSCSC.Byte
#define ICS_OSCSC_OSCINIT               _ICS_OSCSC.Bits.OSCINIT
#define ICS_OSCSC_HGO                   _ICS_OSCSC.Bits.HGO
#define ICS_OSCSC_RANGE                 _ICS_OSCSC.Bits.RANGE
#define ICS_OSCSC_OSCOS                 _ICS_OSCSC.Bits.OSCOS
#define ICS_OSCSC_OSCSTEN               _ICS_OSCSC.Bits.OSCSTEN
#define ICS_OSCSC_OSCEN                 _ICS_OSCSC.Bits.OSCEN

#define ICS_OSCSC_OSCINIT_MASK          0x01U
#define ICS_OSCSC_HGO_MASK              0x02U
#define ICS_OSCSC_RANGE_MASK            0x04U
#define ICS_OSCSC_OSCOS_MASK            0x10U
#define ICS_OSCSC_OSCSTEN_MASK          0x20U
#define ICS_OSCSC_OSCEN_MASK            0x80U


/*** PMC_SPMSC1 - System Power Management Status and Control 1 Register; 0x00003040 ***/
typedef union {
  byte Byte;
  struct {
    byte BGBE        :1;                                       /* Bandgap Buffer Enable */
    byte BGBDS       :1;                                       /* Bandgap Buffer Drive Select */
    byte LVDE        :1;                                       /* Low-Voltage Detect Enable */
    byte LVDSE       :1;                                       /* Low-Voltage Detect Stop Enable */
    byte LVDRE       :1;                                       /* Low-Voltage Detect Reset Enable */
    byte LVWIE       :1;                                       /* Low-Voltage Warning Interrupt Enable */
    byte LVWACK      :1;                                       /* Low-Voltage Warning Acknowledge */
    byte LVWF        :1;                                       /* Low-Voltage Warning Flag */
  } Bits;
} PMC_SPMSC1STR;
extern volatile PMC_SPMSC1STR _PMC_SPMSC1 @0x00003040;
#define PMC_SPMSC1                      _PMC_SPMSC1.Byte
#define PMC_SPMSC1_BGBE                 _PMC_SPMSC1.Bits.BGBE
#define PMC_SPMSC1_BGBDS                _PMC_SPMSC1.Bits.BGBDS
#define PMC_SPMSC1_LVDE                 _PMC_SPMSC1.Bits.LVDE
#define PMC_SPMSC1_LVDSE                _PMC_SPMSC1.Bits.LVDSE
#define PMC_SPMSC1_LVDRE                _PMC_SPMSC1.Bits.LVDRE
#define PMC_SPMSC1_LVWIE                _PMC_SPMSC1.Bits.LVWIE
#define PMC_SPMSC1_LVWACK               _PMC_SPMSC1.Bits.LVWACK
#define PMC_SPMSC1_LVWF                 _PMC_SPMSC1.Bits.LVWF

#define PMC_SPMSC1_BGBE_MASK            0x01U
#define PMC_SPMSC1_BGBDS_MASK           0x02U
#define PMC_SPMSC1_LVDE_MASK            0x04U
#define PMC_SPMSC1_LVDSE_MASK           0x08U
#define PMC_SPMSC1_LVDRE_MASK           0x10U
#define PMC_SPMSC1_LVWIE_MASK           0x20U
#define PMC_SPMSC1_LVWACK_MASK          0x40U
#define PMC_SPMSC1_LVWF_MASK            0x80U


/*** PMC_SPMSC2 - System Power Management Status and Control 2 Register; 0x00003041 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte LVWV0       :1;                                       /* Low-Voltage Warning Voltage Select, bit 0 */
    byte LVWV1       :1;                                       /* Low-Voltage Warning Voltage Select, bit 1 */
    byte LVDV        :1;                                       /* Low-Voltage Detect Voltage Select */
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpLVWV :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMC_SPMSC2STR;
extern volatile PMC_SPMSC2STR _PMC_SPMSC2 @0x00003041;
#define PMC_SPMSC2                      _PMC_SPMSC2.Byte
#define PMC_SPMSC2_LVWV0                _PMC_SPMSC2.Bits.LVWV0
#define PMC_SPMSC2_LVWV1                _PMC_SPMSC2.Bits.LVWV1
#define PMC_SPMSC2_LVDV                 _PMC_SPMSC2.Bits.LVDV
#define PMC_SPMSC2_LVWV                 _PMC_SPMSC2.MergedBits.grpLVWV

#define PMC_SPMSC2_LVWV0_MASK           0x10U
#define PMC_SPMSC2_LVWV1_MASK           0x20U
#define PMC_SPMSC2_LVDV_MASK            0x40U
#define PMC_SPMSC2_LVWV_MASK            0x30U
#define PMC_SPMSC2_LVWV_BITNUM          0x04U


/*** SYS_ILLAH - Illegal Address Register: High; 0x0000304A ***/
typedef union {
  byte Byte;
  struct {
    byte ADDR0       :1;                                       /* High 8-bit of illegal address, bit 0 */
    byte ADDR1       :1;                                       /* High 8-bit of illegal address, bit 1 */
    byte ADDR2       :1;                                       /* High 8-bit of illegal address, bit 2 */
    byte ADDR3       :1;                                       /* High 8-bit of illegal address, bit 3 */
    byte ADDR4       :1;                                       /* High 8-bit of illegal address, bit 4 */
    byte ADDR5       :1;                                       /* High 8-bit of illegal address, bit 5 */
    byte ADDR6       :1;                                       /* High 8-bit of illegal address, bit 6 */
    byte ADDR7       :1;                                       /* High 8-bit of illegal address, bit 7 */
  } Bits;
} SYS_ILLAHSTR;
extern volatile SYS_ILLAHSTR _SYS_ILLAH @0x0000304A;
#define SYS_ILLAH                       _SYS_ILLAH.Byte
#define SYS_ILLAH_ADDR0                 _SYS_ILLAH.Bits.ADDR0
#define SYS_ILLAH_ADDR1                 _SYS_ILLAH.Bits.ADDR1
#define SYS_ILLAH_ADDR2                 _SYS_ILLAH.Bits.ADDR2
#define SYS_ILLAH_ADDR3                 _SYS_ILLAH.Bits.ADDR3
#define SYS_ILLAH_ADDR4                 _SYS_ILLAH.Bits.ADDR4
#define SYS_ILLAH_ADDR5                 _SYS_ILLAH.Bits.ADDR5
#define SYS_ILLAH_ADDR6                 _SYS_ILLAH.Bits.ADDR6
#define SYS_ILLAH_ADDR7                 _SYS_ILLAH.Bits.ADDR7

#define SYS_ILLAH_ADDR0_MASK            0x01U
#define SYS_ILLAH_ADDR1_MASK            0x02U
#define SYS_ILLAH_ADDR2_MASK            0x04U
#define SYS_ILLAH_ADDR3_MASK            0x08U
#define SYS_ILLAH_ADDR4_MASK            0x10U
#define SYS_ILLAH_ADDR5_MASK            0x20U
#define SYS_ILLAH_ADDR6_MASK            0x40U
#define SYS_ILLAH_ADDR7_MASK            0x80U


/*** SYS_ILLAL - Illegal Address Register: Low; 0x0000304B ***/
typedef union {
  byte Byte;
  struct {
    byte ADDR0       :1;                                       /* Low 8-bit of illegal address, bit 0 */
    byte ADDR1       :1;                                       /* Low 8-bit of illegal address, bit 1 */
    byte ADDR2       :1;                                       /* Low 8-bit of illegal address, bit 2 */
    byte ADDR3       :1;                                       /* Low 8-bit of illegal address, bit 3 */
    byte ADDR4       :1;                                       /* Low 8-bit of illegal address, bit 4 */
    byte ADDR5       :1;                                       /* Low 8-bit of illegal address, bit 5 */
    byte ADDR6       :1;                                       /* Low 8-bit of illegal address, bit 6 */
    byte ADDR7       :1;                                       /* Low 8-bit of illegal address, bit 7 */
  } Bits;
} SYS_ILLALSTR;
extern volatile SYS_ILLALSTR _SYS_ILLAL @0x0000304B;
#define SYS_ILLAL                       _SYS_ILLAL.Byte
#define SYS_ILLAL_ADDR0                 _SYS_ILLAL.Bits.ADDR0
#define SYS_ILLAL_ADDR1                 _SYS_ILLAL.Bits.ADDR1
#define SYS_ILLAL_ADDR2                 _SYS_ILLAL.Bits.ADDR2
#define SYS_ILLAL_ADDR3                 _SYS_ILLAL.Bits.ADDR3
#define SYS_ILLAL_ADDR4                 _SYS_ILLAL.Bits.ADDR4
#define SYS_ILLAL_ADDR5                 _SYS_ILLAL.Bits.ADDR5
#define SYS_ILLAL_ADDR6                 _SYS_ILLAL.Bits.ADDR6
#define SYS_ILLAL_ADDR7                 _SYS_ILLAL.Bits.ADDR7

#define SYS_ILLAL_ADDR0_MASK            0x01U
#define SYS_ILLAL_ADDR1_MASK            0x02U
#define SYS_ILLAL_ADDR2_MASK            0x04U
#define SYS_ILLAL_ADDR3_MASK            0x08U
#define SYS_ILLAL_ADDR4_MASK            0x10U
#define SYS_ILLAL_ADDR5_MASK            0x20U
#define SYS_ILLAL_ADDR6_MASK            0x40U
#define SYS_ILLAL_ADDR7_MASK            0x80U


/*** IPC_ILRS0 - Interrupt Level Setting Registers n; 0x00003050 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS0STR;
extern volatile IPC_ILRS0STR _IPC_ILRS0 @0x00003050;
#define IPC_ILRS0                       _IPC_ILRS0.Byte
#define IPC_ILRS0_ILRn00                _IPC_ILRS0.Bits.ILRn00
#define IPC_ILRS0_ILRn01                _IPC_ILRS0.Bits.ILRn01
#define IPC_ILRS0_ILRn10                _IPC_ILRS0.Bits.ILRn10
#define IPC_ILRS0_ILRn11                _IPC_ILRS0.Bits.ILRn11
#define IPC_ILRS0_ILRn20                _IPC_ILRS0.Bits.ILRn20
#define IPC_ILRS0_ILRn21                _IPC_ILRS0.Bits.ILRn21
#define IPC_ILRS0_ILRn30                _IPC_ILRS0.Bits.ILRn30
#define IPC_ILRS0_ILRn31                _IPC_ILRS0.Bits.ILRn31
/* IPC_ILRS_ARR: Access 10 IPC_ILRSx registers in an array */
#define IPC_ILRS_ARR                    ((volatile byte * __far) &IPC_ILRS0)
#define IPC_ILRS0_ILRn0                 _IPC_ILRS0.MergedBits.grpILRn0
#define IPC_ILRS0_ILRn1                 _IPC_ILRS0.MergedBits.grpILRn1
#define IPC_ILRS0_ILRn2                 _IPC_ILRS0.MergedBits.grpILRn2
#define IPC_ILRS0_ILRn3                 _IPC_ILRS0.MergedBits.grpILRn3

#define IPC_ILRS0_ILRn00_MASK           0x01U
#define IPC_ILRS0_ILRn01_MASK           0x02U
#define IPC_ILRS0_ILRn10_MASK           0x04U
#define IPC_ILRS0_ILRn11_MASK           0x08U
#define IPC_ILRS0_ILRn20_MASK           0x10U
#define IPC_ILRS0_ILRn21_MASK           0x20U
#define IPC_ILRS0_ILRn30_MASK           0x40U
#define IPC_ILRS0_ILRn31_MASK           0x80U
#define IPC_ILRS0_ILRn0_MASK            0x03U
#define IPC_ILRS0_ILRn0_BITNUM          0x00U
#define IPC_ILRS0_ILRn1_MASK            0x0CU
#define IPC_ILRS0_ILRn1_BITNUM          0x02U
#define IPC_ILRS0_ILRn2_MASK            0x30U
#define IPC_ILRS0_ILRn2_BITNUM          0x04U
#define IPC_ILRS0_ILRn3_MASK            0xC0U
#define IPC_ILRS0_ILRn3_BITNUM          0x06U


/*** IPC_ILRS1 - Interrupt Level Setting Registers n; 0x00003051 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS1STR;
extern volatile IPC_ILRS1STR _IPC_ILRS1 @0x00003051;
#define IPC_ILRS1                       _IPC_ILRS1.Byte
#define IPC_ILRS1_ILRn00                _IPC_ILRS1.Bits.ILRn00
#define IPC_ILRS1_ILRn01                _IPC_ILRS1.Bits.ILRn01
#define IPC_ILRS1_ILRn10                _IPC_ILRS1.Bits.ILRn10
#define IPC_ILRS1_ILRn11                _IPC_ILRS1.Bits.ILRn11
#define IPC_ILRS1_ILRn20                _IPC_ILRS1.Bits.ILRn20
#define IPC_ILRS1_ILRn21                _IPC_ILRS1.Bits.ILRn21
#define IPC_ILRS1_ILRn30                _IPC_ILRS1.Bits.ILRn30
#define IPC_ILRS1_ILRn31                _IPC_ILRS1.Bits.ILRn31
#define IPC_ILRS1_ILRn0                 _IPC_ILRS1.MergedBits.grpILRn0
#define IPC_ILRS1_ILRn1                 _IPC_ILRS1.MergedBits.grpILRn1
#define IPC_ILRS1_ILRn2                 _IPC_ILRS1.MergedBits.grpILRn2
#define IPC_ILRS1_ILRn3                 _IPC_ILRS1.MergedBits.grpILRn3

#define IPC_ILRS1_ILRn00_MASK           0x01U
#define IPC_ILRS1_ILRn01_MASK           0x02U
#define IPC_ILRS1_ILRn10_MASK           0x04U
#define IPC_ILRS1_ILRn11_MASK           0x08U
#define IPC_ILRS1_ILRn20_MASK           0x10U
#define IPC_ILRS1_ILRn21_MASK           0x20U
#define IPC_ILRS1_ILRn30_MASK           0x40U
#define IPC_ILRS1_ILRn31_MASK           0x80U
#define IPC_ILRS1_ILRn0_MASK            0x03U
#define IPC_ILRS1_ILRn0_BITNUM          0x00U
#define IPC_ILRS1_ILRn1_MASK            0x0CU
#define IPC_ILRS1_ILRn1_BITNUM          0x02U
#define IPC_ILRS1_ILRn2_MASK            0x30U
#define IPC_ILRS1_ILRn2_BITNUM          0x04U
#define IPC_ILRS1_ILRn3_MASK            0xC0U
#define IPC_ILRS1_ILRn3_BITNUM          0x06U


/*** IPC_ILRS2 - Interrupt Level Setting Registers n; 0x00003052 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS2STR;
extern volatile IPC_ILRS2STR _IPC_ILRS2 @0x00003052;
#define IPC_ILRS2                       _IPC_ILRS2.Byte
#define IPC_ILRS2_ILRn00                _IPC_ILRS2.Bits.ILRn00
#define IPC_ILRS2_ILRn01                _IPC_ILRS2.Bits.ILRn01
#define IPC_ILRS2_ILRn10                _IPC_ILRS2.Bits.ILRn10
#define IPC_ILRS2_ILRn11                _IPC_ILRS2.Bits.ILRn11
#define IPC_ILRS2_ILRn20                _IPC_ILRS2.Bits.ILRn20
#define IPC_ILRS2_ILRn21                _IPC_ILRS2.Bits.ILRn21
#define IPC_ILRS2_ILRn30                _IPC_ILRS2.Bits.ILRn30
#define IPC_ILRS2_ILRn31                _IPC_ILRS2.Bits.ILRn31
#define IPC_ILRS2_ILRn0                 _IPC_ILRS2.MergedBits.grpILRn0
#define IPC_ILRS2_ILRn1                 _IPC_ILRS2.MergedBits.grpILRn1
#define IPC_ILRS2_ILRn2                 _IPC_ILRS2.MergedBits.grpILRn2
#define IPC_ILRS2_ILRn3                 _IPC_ILRS2.MergedBits.grpILRn3

#define IPC_ILRS2_ILRn00_MASK           0x01U
#define IPC_ILRS2_ILRn01_MASK           0x02U
#define IPC_ILRS2_ILRn10_MASK           0x04U
#define IPC_ILRS2_ILRn11_MASK           0x08U
#define IPC_ILRS2_ILRn20_MASK           0x10U
#define IPC_ILRS2_ILRn21_MASK           0x20U
#define IPC_ILRS2_ILRn30_MASK           0x40U
#define IPC_ILRS2_ILRn31_MASK           0x80U
#define IPC_ILRS2_ILRn0_MASK            0x03U
#define IPC_ILRS2_ILRn0_BITNUM          0x00U
#define IPC_ILRS2_ILRn1_MASK            0x0CU
#define IPC_ILRS2_ILRn1_BITNUM          0x02U
#define IPC_ILRS2_ILRn2_MASK            0x30U
#define IPC_ILRS2_ILRn2_BITNUM          0x04U
#define IPC_ILRS2_ILRn3_MASK            0xC0U
#define IPC_ILRS2_ILRn3_BITNUM          0x06U


/*** IPC_ILRS3 - Interrupt Level Setting Registers n; 0x00003053 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS3STR;
extern volatile IPC_ILRS3STR _IPC_ILRS3 @0x00003053;
#define IPC_ILRS3                       _IPC_ILRS3.Byte
#define IPC_ILRS3_ILRn00                _IPC_ILRS3.Bits.ILRn00
#define IPC_ILRS3_ILRn01                _IPC_ILRS3.Bits.ILRn01
#define IPC_ILRS3_ILRn10                _IPC_ILRS3.Bits.ILRn10
#define IPC_ILRS3_ILRn11                _IPC_ILRS3.Bits.ILRn11
#define IPC_ILRS3_ILRn20                _IPC_ILRS3.Bits.ILRn20
#define IPC_ILRS3_ILRn21                _IPC_ILRS3.Bits.ILRn21
#define IPC_ILRS3_ILRn30                _IPC_ILRS3.Bits.ILRn30
#define IPC_ILRS3_ILRn31                _IPC_ILRS3.Bits.ILRn31
#define IPC_ILRS3_ILRn0                 _IPC_ILRS3.MergedBits.grpILRn0
#define IPC_ILRS3_ILRn1                 _IPC_ILRS3.MergedBits.grpILRn1
#define IPC_ILRS3_ILRn2                 _IPC_ILRS3.MergedBits.grpILRn2
#define IPC_ILRS3_ILRn3                 _IPC_ILRS3.MergedBits.grpILRn3

#define IPC_ILRS3_ILRn00_MASK           0x01U
#define IPC_ILRS3_ILRn01_MASK           0x02U
#define IPC_ILRS3_ILRn10_MASK           0x04U
#define IPC_ILRS3_ILRn11_MASK           0x08U
#define IPC_ILRS3_ILRn20_MASK           0x10U
#define IPC_ILRS3_ILRn21_MASK           0x20U
#define IPC_ILRS3_ILRn30_MASK           0x40U
#define IPC_ILRS3_ILRn31_MASK           0x80U
#define IPC_ILRS3_ILRn0_MASK            0x03U
#define IPC_ILRS3_ILRn0_BITNUM          0x00U
#define IPC_ILRS3_ILRn1_MASK            0x0CU
#define IPC_ILRS3_ILRn1_BITNUM          0x02U
#define IPC_ILRS3_ILRn2_MASK            0x30U
#define IPC_ILRS3_ILRn2_BITNUM          0x04U
#define IPC_ILRS3_ILRn3_MASK            0xC0U
#define IPC_ILRS3_ILRn3_BITNUM          0x06U


/*** IPC_ILRS4 - Interrupt Level Setting Registers n; 0x00003054 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS4STR;
extern volatile IPC_ILRS4STR _IPC_ILRS4 @0x00003054;
#define IPC_ILRS4                       _IPC_ILRS4.Byte
#define IPC_ILRS4_ILRn00                _IPC_ILRS4.Bits.ILRn00
#define IPC_ILRS4_ILRn01                _IPC_ILRS4.Bits.ILRn01
#define IPC_ILRS4_ILRn10                _IPC_ILRS4.Bits.ILRn10
#define IPC_ILRS4_ILRn11                _IPC_ILRS4.Bits.ILRn11
#define IPC_ILRS4_ILRn20                _IPC_ILRS4.Bits.ILRn20
#define IPC_ILRS4_ILRn21                _IPC_ILRS4.Bits.ILRn21
#define IPC_ILRS4_ILRn30                _IPC_ILRS4.Bits.ILRn30
#define IPC_ILRS4_ILRn31                _IPC_ILRS4.Bits.ILRn31
#define IPC_ILRS4_ILRn0                 _IPC_ILRS4.MergedBits.grpILRn0
#define IPC_ILRS4_ILRn1                 _IPC_ILRS4.MergedBits.grpILRn1
#define IPC_ILRS4_ILRn2                 _IPC_ILRS4.MergedBits.grpILRn2
#define IPC_ILRS4_ILRn3                 _IPC_ILRS4.MergedBits.grpILRn3

#define IPC_ILRS4_ILRn00_MASK           0x01U
#define IPC_ILRS4_ILRn01_MASK           0x02U
#define IPC_ILRS4_ILRn10_MASK           0x04U
#define IPC_ILRS4_ILRn11_MASK           0x08U
#define IPC_ILRS4_ILRn20_MASK           0x10U
#define IPC_ILRS4_ILRn21_MASK           0x20U
#define IPC_ILRS4_ILRn30_MASK           0x40U
#define IPC_ILRS4_ILRn31_MASK           0x80U
#define IPC_ILRS4_ILRn0_MASK            0x03U
#define IPC_ILRS4_ILRn0_BITNUM          0x00U
#define IPC_ILRS4_ILRn1_MASK            0x0CU
#define IPC_ILRS4_ILRn1_BITNUM          0x02U
#define IPC_ILRS4_ILRn2_MASK            0x30U
#define IPC_ILRS4_ILRn2_BITNUM          0x04U
#define IPC_ILRS4_ILRn3_MASK            0xC0U
#define IPC_ILRS4_ILRn3_BITNUM          0x06U


/*** IPC_ILRS5 - Interrupt Level Setting Registers n; 0x00003055 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS5STR;
extern volatile IPC_ILRS5STR _IPC_ILRS5 @0x00003055;
#define IPC_ILRS5                       _IPC_ILRS5.Byte
#define IPC_ILRS5_ILRn00                _IPC_ILRS5.Bits.ILRn00
#define IPC_ILRS5_ILRn01                _IPC_ILRS5.Bits.ILRn01
#define IPC_ILRS5_ILRn10                _IPC_ILRS5.Bits.ILRn10
#define IPC_ILRS5_ILRn11                _IPC_ILRS5.Bits.ILRn11
#define IPC_ILRS5_ILRn20                _IPC_ILRS5.Bits.ILRn20
#define IPC_ILRS5_ILRn21                _IPC_ILRS5.Bits.ILRn21
#define IPC_ILRS5_ILRn30                _IPC_ILRS5.Bits.ILRn30
#define IPC_ILRS5_ILRn31                _IPC_ILRS5.Bits.ILRn31
#define IPC_ILRS5_ILRn0                 _IPC_ILRS5.MergedBits.grpILRn0
#define IPC_ILRS5_ILRn1                 _IPC_ILRS5.MergedBits.grpILRn1
#define IPC_ILRS5_ILRn2                 _IPC_ILRS5.MergedBits.grpILRn2
#define IPC_ILRS5_ILRn3                 _IPC_ILRS5.MergedBits.grpILRn3

#define IPC_ILRS5_ILRn00_MASK           0x01U
#define IPC_ILRS5_ILRn01_MASK           0x02U
#define IPC_ILRS5_ILRn10_MASK           0x04U
#define IPC_ILRS5_ILRn11_MASK           0x08U
#define IPC_ILRS5_ILRn20_MASK           0x10U
#define IPC_ILRS5_ILRn21_MASK           0x20U
#define IPC_ILRS5_ILRn30_MASK           0x40U
#define IPC_ILRS5_ILRn31_MASK           0x80U
#define IPC_ILRS5_ILRn0_MASK            0x03U
#define IPC_ILRS5_ILRn0_BITNUM          0x00U
#define IPC_ILRS5_ILRn1_MASK            0x0CU
#define IPC_ILRS5_ILRn1_BITNUM          0x02U
#define IPC_ILRS5_ILRn2_MASK            0x30U
#define IPC_ILRS5_ILRn2_BITNUM          0x04U
#define IPC_ILRS5_ILRn3_MASK            0xC0U
#define IPC_ILRS5_ILRn3_BITNUM          0x06U


/*** IPC_ILRS6 - Interrupt Level Setting Registers n; 0x00003056 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS6STR;
extern volatile IPC_ILRS6STR _IPC_ILRS6 @0x00003056;
#define IPC_ILRS6                       _IPC_ILRS6.Byte
#define IPC_ILRS6_ILRn00                _IPC_ILRS6.Bits.ILRn00
#define IPC_ILRS6_ILRn01                _IPC_ILRS6.Bits.ILRn01
#define IPC_ILRS6_ILRn10                _IPC_ILRS6.Bits.ILRn10
#define IPC_ILRS6_ILRn11                _IPC_ILRS6.Bits.ILRn11
#define IPC_ILRS6_ILRn20                _IPC_ILRS6.Bits.ILRn20
#define IPC_ILRS6_ILRn21                _IPC_ILRS6.Bits.ILRn21
#define IPC_ILRS6_ILRn30                _IPC_ILRS6.Bits.ILRn30
#define IPC_ILRS6_ILRn31                _IPC_ILRS6.Bits.ILRn31
#define IPC_ILRS6_ILRn0                 _IPC_ILRS6.MergedBits.grpILRn0
#define IPC_ILRS6_ILRn1                 _IPC_ILRS6.MergedBits.grpILRn1
#define IPC_ILRS6_ILRn2                 _IPC_ILRS6.MergedBits.grpILRn2
#define IPC_ILRS6_ILRn3                 _IPC_ILRS6.MergedBits.grpILRn3

#define IPC_ILRS6_ILRn00_MASK           0x01U
#define IPC_ILRS6_ILRn01_MASK           0x02U
#define IPC_ILRS6_ILRn10_MASK           0x04U
#define IPC_ILRS6_ILRn11_MASK           0x08U
#define IPC_ILRS6_ILRn20_MASK           0x10U
#define IPC_ILRS6_ILRn21_MASK           0x20U
#define IPC_ILRS6_ILRn30_MASK           0x40U
#define IPC_ILRS6_ILRn31_MASK           0x80U
#define IPC_ILRS6_ILRn0_MASK            0x03U
#define IPC_ILRS6_ILRn0_BITNUM          0x00U
#define IPC_ILRS6_ILRn1_MASK            0x0CU
#define IPC_ILRS6_ILRn1_BITNUM          0x02U
#define IPC_ILRS6_ILRn2_MASK            0x30U
#define IPC_ILRS6_ILRn2_BITNUM          0x04U
#define IPC_ILRS6_ILRn3_MASK            0xC0U
#define IPC_ILRS6_ILRn3_BITNUM          0x06U


/*** IPC_ILRS7 - Interrupt Level Setting Registers n; 0x00003057 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS7STR;
extern volatile IPC_ILRS7STR _IPC_ILRS7 @0x00003057;
#define IPC_ILRS7                       _IPC_ILRS7.Byte
#define IPC_ILRS7_ILRn00                _IPC_ILRS7.Bits.ILRn00
#define IPC_ILRS7_ILRn01                _IPC_ILRS7.Bits.ILRn01
#define IPC_ILRS7_ILRn10                _IPC_ILRS7.Bits.ILRn10
#define IPC_ILRS7_ILRn11                _IPC_ILRS7.Bits.ILRn11
#define IPC_ILRS7_ILRn20                _IPC_ILRS7.Bits.ILRn20
#define IPC_ILRS7_ILRn21                _IPC_ILRS7.Bits.ILRn21
#define IPC_ILRS7_ILRn30                _IPC_ILRS7.Bits.ILRn30
#define IPC_ILRS7_ILRn31                _IPC_ILRS7.Bits.ILRn31
#define IPC_ILRS7_ILRn0                 _IPC_ILRS7.MergedBits.grpILRn0
#define IPC_ILRS7_ILRn1                 _IPC_ILRS7.MergedBits.grpILRn1
#define IPC_ILRS7_ILRn2                 _IPC_ILRS7.MergedBits.grpILRn2
#define IPC_ILRS7_ILRn3                 _IPC_ILRS7.MergedBits.grpILRn3

#define IPC_ILRS7_ILRn00_MASK           0x01U
#define IPC_ILRS7_ILRn01_MASK           0x02U
#define IPC_ILRS7_ILRn10_MASK           0x04U
#define IPC_ILRS7_ILRn11_MASK           0x08U
#define IPC_ILRS7_ILRn20_MASK           0x10U
#define IPC_ILRS7_ILRn21_MASK           0x20U
#define IPC_ILRS7_ILRn30_MASK           0x40U
#define IPC_ILRS7_ILRn31_MASK           0x80U
#define IPC_ILRS7_ILRn0_MASK            0x03U
#define IPC_ILRS7_ILRn0_BITNUM          0x00U
#define IPC_ILRS7_ILRn1_MASK            0x0CU
#define IPC_ILRS7_ILRn1_BITNUM          0x02U
#define IPC_ILRS7_ILRn2_MASK            0x30U
#define IPC_ILRS7_ILRn2_BITNUM          0x04U
#define IPC_ILRS7_ILRn3_MASK            0xC0U
#define IPC_ILRS7_ILRn3_BITNUM          0x06U


/*** IPC_ILRS8 - Interrupt Level Setting Registers n; 0x00003058 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS8STR;
extern volatile IPC_ILRS8STR _IPC_ILRS8 @0x00003058;
#define IPC_ILRS8                       _IPC_ILRS8.Byte
#define IPC_ILRS8_ILRn00                _IPC_ILRS8.Bits.ILRn00
#define IPC_ILRS8_ILRn01                _IPC_ILRS8.Bits.ILRn01
#define IPC_ILRS8_ILRn10                _IPC_ILRS8.Bits.ILRn10
#define IPC_ILRS8_ILRn11                _IPC_ILRS8.Bits.ILRn11
#define IPC_ILRS8_ILRn20                _IPC_ILRS8.Bits.ILRn20
#define IPC_ILRS8_ILRn21                _IPC_ILRS8.Bits.ILRn21
#define IPC_ILRS8_ILRn30                _IPC_ILRS8.Bits.ILRn30
#define IPC_ILRS8_ILRn31                _IPC_ILRS8.Bits.ILRn31
#define IPC_ILRS8_ILRn0                 _IPC_ILRS8.MergedBits.grpILRn0
#define IPC_ILRS8_ILRn1                 _IPC_ILRS8.MergedBits.grpILRn1
#define IPC_ILRS8_ILRn2                 _IPC_ILRS8.MergedBits.grpILRn2
#define IPC_ILRS8_ILRn3                 _IPC_ILRS8.MergedBits.grpILRn3

#define IPC_ILRS8_ILRn00_MASK           0x01U
#define IPC_ILRS8_ILRn01_MASK           0x02U
#define IPC_ILRS8_ILRn10_MASK           0x04U
#define IPC_ILRS8_ILRn11_MASK           0x08U
#define IPC_ILRS8_ILRn20_MASK           0x10U
#define IPC_ILRS8_ILRn21_MASK           0x20U
#define IPC_ILRS8_ILRn30_MASK           0x40U
#define IPC_ILRS8_ILRn31_MASK           0x80U
#define IPC_ILRS8_ILRn0_MASK            0x03U
#define IPC_ILRS8_ILRn0_BITNUM          0x00U
#define IPC_ILRS8_ILRn1_MASK            0x0CU
#define IPC_ILRS8_ILRn1_BITNUM          0x02U
#define IPC_ILRS8_ILRn2_MASK            0x30U
#define IPC_ILRS8_ILRn2_BITNUM          0x04U
#define IPC_ILRS8_ILRn3_MASK            0xC0U
#define IPC_ILRS8_ILRn3_BITNUM          0x06U


/*** IPC_ILRS9 - Interrupt Level Setting Registers n; 0x00003059 ***/
typedef union {
  byte Byte;
  struct {
    byte ILRn00      :1;                                       /* Interrupt Level Register for Source n+0, bit 0 */
    byte ILRn01      :1;                                       /* Interrupt Level Register for Source n+0, bit 1 */
    byte ILRn10      :1;                                       /* Interrupt Level Register for Source n+1, bit 0 */
    byte ILRn11      :1;                                       /* Interrupt Level Register for Source n+1, bit 1 */
    byte ILRn20      :1;                                       /* Interrupt Level Register for Source n+2, bit 0 */
    byte ILRn21      :1;                                       /* Interrupt Level Register for Source n+2, bit 1 */
    byte ILRn30      :1;                                       /* Interrupt Level Register for Source n+3, bit 0 */
    byte ILRn31      :1;                                       /* Interrupt Level Register for Source n+3, bit 1 */
  } Bits;
  struct {
    byte grpILRn0 :2;
    byte grpILRn1 :2;
    byte grpILRn2 :2;
    byte grpILRn3 :2;
  } MergedBits;
} IPC_ILRS9STR;
extern volatile IPC_ILRS9STR _IPC_ILRS9 @0x00003059;
#define IPC_ILRS9                       _IPC_ILRS9.Byte
#define IPC_ILRS9_ILRn00                _IPC_ILRS9.Bits.ILRn00
#define IPC_ILRS9_ILRn01                _IPC_ILRS9.Bits.ILRn01
#define IPC_ILRS9_ILRn10                _IPC_ILRS9.Bits.ILRn10
#define IPC_ILRS9_ILRn11                _IPC_ILRS9.Bits.ILRn11
#define IPC_ILRS9_ILRn20                _IPC_ILRS9.Bits.ILRn20
#define IPC_ILRS9_ILRn21                _IPC_ILRS9.Bits.ILRn21
#define IPC_ILRS9_ILRn30                _IPC_ILRS9.Bits.ILRn30
#define IPC_ILRS9_ILRn31                _IPC_ILRS9.Bits.ILRn31
#define IPC_ILRS9_ILRn0                 _IPC_ILRS9.MergedBits.grpILRn0
#define IPC_ILRS9_ILRn1                 _IPC_ILRS9.MergedBits.grpILRn1
#define IPC_ILRS9_ILRn2                 _IPC_ILRS9.MergedBits.grpILRn2
#define IPC_ILRS9_ILRn3                 _IPC_ILRS9.MergedBits.grpILRn3

#define IPC_ILRS9_ILRn00_MASK           0x01U
#define IPC_ILRS9_ILRn01_MASK           0x02U
#define IPC_ILRS9_ILRn10_MASK           0x04U
#define IPC_ILRS9_ILRn11_MASK           0x08U
#define IPC_ILRS9_ILRn20_MASK           0x10U
#define IPC_ILRS9_ILRn21_MASK           0x20U
#define IPC_ILRS9_ILRn30_MASK           0x40U
#define IPC_ILRS9_ILRn31_MASK           0x80U
#define IPC_ILRS9_ILRn0_MASK            0x03U
#define IPC_ILRS9_ILRn0_BITNUM          0x00U
#define IPC_ILRS9_ILRn1_MASK            0x0CU
#define IPC_ILRS9_ILRn1_BITNUM          0x02U
#define IPC_ILRS9_ILRn2_MASK            0x30U
#define IPC_ILRS9_ILRn2_BITNUM          0x04U
#define IPC_ILRS9_ILRn3_MASK            0xC0U
#define IPC_ILRS9_ILRn3_BITNUM          0x06U


/*** RTC_SC1 - RTC Status and Control Register 1; 0x0000306A ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte RTIE        :1;                                       /* Real-Time Interrupt Enable */
    byte RTIF        :1;                                       /* Real-Time Interrupt Flag */
  } Bits;
} RTC_SC1STR;
extern volatile RTC_SC1STR _RTC_SC1 @0x0000306A;
#define RTC_SC1                         _RTC_SC1.Byte
#define RTC_SC1_RTIE                    _RTC_SC1.Bits.RTIE
#define RTC_SC1_RTIF                    _RTC_SC1.Bits.RTIF

#define RTC_SC1_RTIE_MASK               0x40U
#define RTC_SC1_RTIF_MASK               0x80U


/*** RTC_SC2 - RTC Status and Control Register 2; 0x0000306B ***/
typedef union {
  byte Byte;
  struct {
    byte RTCPS0      :1;                                       /* Real-Time Clock Prescaler Select, bit 0 */
    byte RTCPS1      :1;                                       /* Real-Time Clock Prescaler Select, bit 1 */
    byte RTCPS2      :1;                                       /* Real-Time Clock Prescaler Select, bit 2 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte RTCLKS0     :1;                                       /* Real-Time Clock Source Select, bit 0 */
    byte RTCLKS1     :1;                                       /* Real-Time Clock Source Select, bit 1 */
  } Bits;
  struct {
    byte grpRTCPS :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpRTCLKS :2;
  } MergedBits;
} RTC_SC2STR;
extern volatile RTC_SC2STR _RTC_SC2 @0x0000306B;
#define RTC_SC2                         _RTC_SC2.Byte
#define RTC_SC2_RTCPS0                  _RTC_SC2.Bits.RTCPS0
#define RTC_SC2_RTCPS1                  _RTC_SC2.Bits.RTCPS1
#define RTC_SC2_RTCPS2                  _RTC_SC2.Bits.RTCPS2
#define RTC_SC2_RTCLKS0                 _RTC_SC2.Bits.RTCLKS0
#define RTC_SC2_RTCLKS1                 _RTC_SC2.Bits.RTCLKS1
#define RTC_SC2_RTCPS                   _RTC_SC2.MergedBits.grpRTCPS
#define RTC_SC2_RTCLKS                  _RTC_SC2.MergedBits.grpRTCLKS

#define RTC_SC2_RTCPS0_MASK             0x01U
#define RTC_SC2_RTCPS1_MASK             0x02U
#define RTC_SC2_RTCPS2_MASK             0x04U
#define RTC_SC2_RTCLKS0_MASK            0x40U
#define RTC_SC2_RTCLKS1_MASK            0x80U
#define RTC_SC2_RTCPS_MASK              0x07U
#define RTC_SC2_RTCPS_BITNUM            0x00U
#define RTC_SC2_RTCLKS_MASK             0xC0U
#define RTC_SC2_RTCLKS_BITNUM           0x06U


/*** RTC_MOD - RTC Modulo Register; 0x0000306C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** RTC_MODH - RTC Modulo Register: High; 0x0000306C ***/
    union {
      byte Byte;
    } RTC_MODHSTR;
    #define RTC_MODH                    _RTC_MOD.Overlap_STR.RTC_MODHSTR.Byte
    

    /*** RTC_MODL - RTC Modulo Register: Low; 0x0000306D ***/
    union {
      byte Byte;
    } RTC_MODLSTR;
    #define RTC_MODL                    _RTC_MOD.Overlap_STR.RTC_MODLSTR.Byte
    
  } Overlap_STR;

} RTC_MODSTR;
extern volatile RTC_MODSTR _RTC_MOD @0x0000306C;
#define RTC_MOD                         _RTC_MOD.Word


/*** RTC_CNT - RTC Counter Register; 0x0000306E ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** RTC_CNTH - RTC Counter Register: High; 0x0000306E ***/
    union {
      byte Byte;
    } RTC_CNTHSTR;
    #define RTC_CNTH                    _RTC_CNT.Overlap_STR.RTC_CNTHSTR.Byte
    

    /*** RTC_CNTL - RTC Counter Register: Low; 0x0000306F ***/
    union {
      byte Byte;
    } RTC_CNTLSTR;
    #define RTC_CNTL                    _RTC_CNT.Overlap_STR.RTC_CNTLSTR.Byte
    
  } Overlap_STR;

} RTC_CNTSTR;
extern volatile RTC_CNTSTR _RTC_CNT @0x0000306E;
#define RTC_CNT                         _RTC_CNT.Word


/*** KBI0_PE - KBIx Pin Enable Register; 0x0000307C ***/
typedef union {
  byte Byte;
  struct {
    byte KBIPE0      :1; 
    byte KBIPE1      :1; 
    byte KBIPE2      :1; 
    byte KBIPE3      :1; 
    byte KBIPE4      :1; 
    byte KBIPE5      :1; 
    byte KBIPE6      :1; 
    byte KBIPE7      :1; 
  } Bits;
} KBI0_PESTR;
extern volatile KBI0_PESTR _KBI0_PE @0x0000307C;
#define KBI0_PE                         _KBI0_PE.Byte
#define KBI0_PE_KBIPE0                  _KBI0_PE.Bits.KBIPE0
#define KBI0_PE_KBIPE1                  _KBI0_PE.Bits.KBIPE1
#define KBI0_PE_KBIPE2                  _KBI0_PE.Bits.KBIPE2
#define KBI0_PE_KBIPE3                  _KBI0_PE.Bits.KBIPE3
#define KBI0_PE_KBIPE4                  _KBI0_PE.Bits.KBIPE4
#define KBI0_PE_KBIPE5                  _KBI0_PE.Bits.KBIPE5
#define KBI0_PE_KBIPE6                  _KBI0_PE.Bits.KBIPE6
#define KBI0_PE_KBIPE7                  _KBI0_PE.Bits.KBIPE7

#define KBI0_PE_KBIPE0_MASK             0x01U
#define KBI0_PE_KBIPE1_MASK             0x02U
#define KBI0_PE_KBIPE2_MASK             0x04U
#define KBI0_PE_KBIPE3_MASK             0x08U
#define KBI0_PE_KBIPE4_MASK             0x10U
#define KBI0_PE_KBIPE5_MASK             0x20U
#define KBI0_PE_KBIPE6_MASK             0x40U
#define KBI0_PE_KBIPE7_MASK             0x80U


/*** KBI0_ES - KBIx Edge Select Register; 0x0000307D ***/
typedef union {
  byte Byte;
  struct {
    byte KBEDG0      :1; 
    byte KBEDG1      :1; 
    byte KBEDG2      :1; 
    byte KBEDG3      :1; 
    byte KBEDG4      :1; 
    byte KBEDG5      :1; 
    byte KBEDG6      :1; 
    byte KBEDG7      :1; 
  } Bits;
} KBI0_ESSTR;
extern volatile KBI0_ESSTR _KBI0_ES @0x0000307D;
#define KBI0_ES                         _KBI0_ES.Byte
#define KBI0_ES_KBEDG0                  _KBI0_ES.Bits.KBEDG0
#define KBI0_ES_KBEDG1                  _KBI0_ES.Bits.KBEDG1
#define KBI0_ES_KBEDG2                  _KBI0_ES.Bits.KBEDG2
#define KBI0_ES_KBEDG3                  _KBI0_ES.Bits.KBEDG3
#define KBI0_ES_KBEDG4                  _KBI0_ES.Bits.KBEDG4
#define KBI0_ES_KBEDG5                  _KBI0_ES.Bits.KBEDG5
#define KBI0_ES_KBEDG6                  _KBI0_ES.Bits.KBEDG6
#define KBI0_ES_KBEDG7                  _KBI0_ES.Bits.KBEDG7

#define KBI0_ES_KBEDG0_MASK             0x01U
#define KBI0_ES_KBEDG1_MASK             0x02U
#define KBI0_ES_KBEDG2_MASK             0x04U
#define KBI0_ES_KBEDG3_MASK             0x08U
#define KBI0_ES_KBEDG4_MASK             0x10U
#define KBI0_ES_KBEDG5_MASK             0x20U
#define KBI0_ES_KBEDG6_MASK             0x40U
#define KBI0_ES_KBEDG7_MASK             0x80U


/*** SCI0_BD - SCI0 Baud Rate Register; 0x00003080 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** SCI0_BDH - SCI Baud Rate Register: High; 0x00003080 ***/
    union {
      byte Byte;
      struct {
        byte SBR0        :1;                                       /* Baud Rate Modulo Divisor, bit 0 */
        byte SBR1        :1;                                       /* Baud Rate Modulo Divisor, bit 1 */
        byte SBR2        :1;                                       /* Baud Rate Modulo Divisor, bit 2 */
        byte SBR3        :1;                                       /* Baud Rate Modulo Divisor, bit 3 */
        byte SBR4        :1;                                       /* Baud Rate Modulo Divisor, bit 4 */
        byte SBNS        :1;                                       /* Stop Bit Number Select */
        byte RXEDGIE     :1;                                       /* RxD Input Active Edge Interrupt Enable (for RXEDGIF) */
        byte LBKDIE      :1;                                       /* LIN Break Detect Interrupt Enable (for LBKDIF) */
      } Bits;
      struct {
        byte grpSBR :5;
        byte     :1;
        byte     :1;
        byte     :1;
      } MergedBits;
    } SCI0_BDHSTR;
    #define SCI0_BDH                    _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Byte
    #define SCI0_BDH_SBR0               _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.SBR0
    #define SCI0_BDH_SBR1               _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.SBR1
    #define SCI0_BDH_SBR2               _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.SBR2
    #define SCI0_BDH_SBR3               _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.SBR3
    #define SCI0_BDH_SBR4               _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.SBR4
    #define SCI0_BDH_SBNS               _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.SBNS
    #define SCI0_BDH_RXEDGIE            _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.RXEDGIE
    #define SCI0_BDH_LBKDIE             _SCI0_BD.Overlap_STR.SCI0_BDHSTR.Bits.LBKDIE
    #define SCI0_BDH_SBR                _SCI0_BD.Overlap_STR.SCI0_BDHSTR.MergedBits.grpSBR
    
    #define SCI0_BDH_SBR0_MASK          0x01U
    #define SCI0_BDH_SBR1_MASK          0x02U
    #define SCI0_BDH_SBR2_MASK          0x04U
    #define SCI0_BDH_SBR3_MASK          0x08U
    #define SCI0_BDH_SBR4_MASK          0x10U
    #define SCI0_BDH_SBNS_MASK          0x20U
    #define SCI0_BDH_RXEDGIE_MASK       0x40U
    #define SCI0_BDH_LBKDIE_MASK        0x80U
    #define SCI0_BDH_SBR_MASK           0x1FU
    #define SCI0_BDH_SBR_BITNUM         0x00U
    

    /*** SCI0_BDL - SCI Baud Rate Register: Low; 0x00003081 ***/
    union {
      byte Byte;
      struct {
        byte SBR0        :1;                                       /* Baud Rate Modulo Divisor, bit 0 */
        byte SBR1        :1;                                       /* Baud Rate Modulo Divisor, bit 1 */
        byte SBR2        :1;                                       /* Baud Rate Modulo Divisor, bit 2 */
        byte SBR3        :1;                                       /* Baud Rate Modulo Divisor, bit 3 */
        byte SBR4        :1;                                       /* Baud Rate Modulo Divisor, bit 4 */
        byte SBR5        :1;                                       /* Baud Rate Modulo Divisor, bit 5 */
        byte SBR6        :1;                                       /* Baud Rate Modulo Divisor, bit 6 */
        byte SBR7        :1;                                       /* Baud Rate Modulo Divisor, bit 7 */
      } Bits;
    } SCI0_BDLSTR;
    #define SCI0_BDL                    _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Byte
    #define SCI0_BDL_SBR0               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR0
    #define SCI0_BDL_SBR1               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR1
    #define SCI0_BDL_SBR2               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR2
    #define SCI0_BDL_SBR3               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR3
    #define SCI0_BDL_SBR4               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR4
    #define SCI0_BDL_SBR5               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR5
    #define SCI0_BDL_SBR6               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR6
    #define SCI0_BDL_SBR7               _SCI0_BD.Overlap_STR.SCI0_BDLSTR.Bits.SBR7
    
    #define SCI0_BDL_SBR0_MASK          0x01U
    #define SCI0_BDL_SBR1_MASK          0x02U
    #define SCI0_BDL_SBR2_MASK          0x04U
    #define SCI0_BDL_SBR3_MASK          0x08U
    #define SCI0_BDL_SBR4_MASK          0x10U
    #define SCI0_BDL_SBR5_MASK          0x20U
    #define SCI0_BDL_SBR6_MASK          0x40U
    #define SCI0_BDL_SBR7_MASK          0x80U
    
  } Overlap_STR;

} SCI0_BDSTR;
extern volatile SCI0_BDSTR _SCI0_BD @0x00003080;
#define SCI0_BD                         _SCI0_BD.Word


/*** SCI0_C1 - SCI Control Register 1; 0x00003082 ***/
typedef union {
  byte Byte;
  struct {
    byte PT          :1;                                       /* Parity Type */
    byte PE          :1;                                       /* Parity Enable */
    byte ILT         :1;                                       /* Idle Line Type Select */
    byte WAKE        :1;                                       /* Receiver Wakeup Method Select */
    byte M           :1;                                       /* 9-Bit or 8-Bit Mode Select */
    byte RSRC        :1;                                       /* Receiver Source Select */
    byte SCISWAI     :1;                                       /* SCI Stops in Wait Mode */
    byte LOOPS       :1;                                       /* Loop Mode Select */
  } Bits;
} SCI0_C1STR;
extern volatile SCI0_C1STR _SCI0_C1 @0x00003082;
#define SCI0_C1                         _SCI0_C1.Byte
#define SCI0_C1_PT                      _SCI0_C1.Bits.PT
#define SCI0_C1_PE                      _SCI0_C1.Bits.PE
#define SCI0_C1_ILT                     _SCI0_C1.Bits.ILT
#define SCI0_C1_WAKE                    _SCI0_C1.Bits.WAKE
#define SCI0_C1_M                       _SCI0_C1.Bits.M
#define SCI0_C1_RSRC                    _SCI0_C1.Bits.RSRC
#define SCI0_C1_SCISWAI                 _SCI0_C1.Bits.SCISWAI
#define SCI0_C1_LOOPS                   _SCI0_C1.Bits.LOOPS

#define SCI0_C1_PT_MASK                 0x01U
#define SCI0_C1_PE_MASK                 0x02U
#define SCI0_C1_ILT_MASK                0x04U
#define SCI0_C1_WAKE_MASK               0x08U
#define SCI0_C1_M_MASK                  0x10U
#define SCI0_C1_RSRC_MASK               0x20U
#define SCI0_C1_SCISWAI_MASK            0x40U
#define SCI0_C1_LOOPS_MASK              0x80U


/*** SCI0_C2 - SCI Control Register 2; 0x00003083 ***/
typedef union {
  byte Byte;
  struct {
    byte SBK         :1;                                       /* Send Break */
    byte RWU         :1;                                       /* Receiver Wakeup Control */
    byte RE          :1;                                       /* Receiver Enable */
    byte TE          :1;                                       /* Transmitter Enable */
    byte ILIE        :1;                                       /* Idle Line Interrupt Enable for IDLE */
    byte RIE         :1;                                       /* Receiver Interrupt Enable for RDRF */
    byte TCIE        :1;                                       /* Transmission Complete Interrupt Enable for TC */
    byte TIE         :1;                                       /* Transmit Interrupt Enable for TDRE */
  } Bits;
} SCI0_C2STR;
extern volatile SCI0_C2STR _SCI0_C2 @0x00003083;
#define SCI0_C2                         _SCI0_C2.Byte
#define SCI0_C2_SBK                     _SCI0_C2.Bits.SBK
#define SCI0_C2_RWU                     _SCI0_C2.Bits.RWU
#define SCI0_C2_RE                      _SCI0_C2.Bits.RE
#define SCI0_C2_TE                      _SCI0_C2.Bits.TE
#define SCI0_C2_ILIE                    _SCI0_C2.Bits.ILIE
#define SCI0_C2_RIE                     _SCI0_C2.Bits.RIE
#define SCI0_C2_TCIE                    _SCI0_C2.Bits.TCIE
#define SCI0_C2_TIE                     _SCI0_C2.Bits.TIE

#define SCI0_C2_SBK_MASK                0x01U
#define SCI0_C2_RWU_MASK                0x02U
#define SCI0_C2_RE_MASK                 0x04U
#define SCI0_C2_TE_MASK                 0x08U
#define SCI0_C2_ILIE_MASK               0x10U
#define SCI0_C2_RIE_MASK                0x20U
#define SCI0_C2_TCIE_MASK               0x40U
#define SCI0_C2_TIE_MASK                0x80U


/*** SCI0_S1 - SCI Status Register 1; 0x00003084 ***/
typedef union {
  byte Byte;
  struct {
    byte PF          :1;                                       /* Parity Error Flag */
    byte FE          :1;                                       /* Framing Error Flag */
    byte NF          :1;                                       /* Noise Flag */
    byte OR          :1;                                       /* Receiver Overrun Flag */
    byte IDLE        :1;                                       /* Idle Line Flag */
    byte RDRF        :1;                                       /* Receive Data Register Full Flag */
    byte TC          :1;                                       /* Transmission Complete Flag */
    byte TDRE        :1;                                       /* Transmit Data Register Empty Flag */
  } Bits;
} SCI0_S1STR;
extern volatile SCI0_S1STR _SCI0_S1 @0x00003084;
#define SCI0_S1                         _SCI0_S1.Byte
#define SCI0_S1_PF                      _SCI0_S1.Bits.PF
#define SCI0_S1_FE                      _SCI0_S1.Bits.FE
#define SCI0_S1_NF                      _SCI0_S1.Bits.NF
#define SCI0_S1_OR                      _SCI0_S1.Bits.OR
#define SCI0_S1_IDLE                    _SCI0_S1.Bits.IDLE
#define SCI0_S1_RDRF                    _SCI0_S1.Bits.RDRF
#define SCI0_S1_TC                      _SCI0_S1.Bits.TC
#define SCI0_S1_TDRE                    _SCI0_S1.Bits.TDRE

#define SCI0_S1_PF_MASK                 0x01U
#define SCI0_S1_FE_MASK                 0x02U
#define SCI0_S1_NF_MASK                 0x04U
#define SCI0_S1_OR_MASK                 0x08U
#define SCI0_S1_IDLE_MASK               0x10U
#define SCI0_S1_RDRF_MASK               0x20U
#define SCI0_S1_TC_MASK                 0x40U
#define SCI0_S1_TDRE_MASK               0x80U


/*** SCI0_S2 - SCI Status Register 2; 0x00003085 ***/
typedef union {
  byte Byte;
  struct {
    byte RAF         :1;                                       /* Receiver Active Flag */
    byte LBKDE       :1;                                       /* LIN Break Detection Enable */
    byte BRK13       :1;                                       /* Break Character Generation Length */
    byte RWUID       :1;                                       /* Receive Wake Up Idle Detect */
    byte RXINV       :1;                                       /* Receive Data Inversion */
    byte             :1; 
    byte RXEDGIF     :1;                                       /* RxD Pin Active Edge Interrupt Flag */
    byte LBKDIF      :1;                                       /* LIN Break Detect Interrupt Flag */
  } Bits;
} SCI0_S2STR;
extern volatile SCI0_S2STR _SCI0_S2 @0x00003085;
#define SCI0_S2                         _SCI0_S2.Byte
#define SCI0_S2_RAF                     _SCI0_S2.Bits.RAF
#define SCI0_S2_LBKDE                   _SCI0_S2.Bits.LBKDE
#define SCI0_S2_BRK13                   _SCI0_S2.Bits.BRK13
#define SCI0_S2_RWUID                   _SCI0_S2.Bits.RWUID
#define SCI0_S2_RXINV                   _SCI0_S2.Bits.RXINV
#define SCI0_S2_RXEDGIF                 _SCI0_S2.Bits.RXEDGIF
#define SCI0_S2_LBKDIF                  _SCI0_S2.Bits.LBKDIF

#define SCI0_S2_RAF_MASK                0x01U
#define SCI0_S2_LBKDE_MASK              0x02U
#define SCI0_S2_BRK13_MASK              0x04U
#define SCI0_S2_RWUID_MASK              0x08U
#define SCI0_S2_RXINV_MASK              0x10U
#define SCI0_S2_RXEDGIF_MASK            0x40U
#define SCI0_S2_LBKDIF_MASK             0x80U


/*** SCI0_C3 - SCI Control Register 3; 0x00003086 ***/
typedef union {
  byte Byte;
  struct {
    byte PEIE        :1;                                       /* Parity Error Interrupt Enable */
    byte FEIE        :1;                                       /* Framing Error Interrupt Enable */
    byte NEIE        :1;                                       /* Noise Error Interrupt Enable */
    byte ORIE        :1;                                       /* Overrun Interrupt Enable */
    byte TXINV       :1;                                       /* Transmit Data Inversion */
    byte TXDIR       :1;                                       /* TxD Pin Direction in Single-Wire Mode */
    byte T8          :1;                                       /* Ninth Data Bit for Transmitter */
    byte R8          :1;                                       /* Ninth Data Bit for Receiver */
  } Bits;
} SCI0_C3STR;
extern volatile SCI0_C3STR _SCI0_C3 @0x00003086;
#define SCI0_C3                         _SCI0_C3.Byte
#define SCI0_C3_PEIE                    _SCI0_C3.Bits.PEIE
#define SCI0_C3_FEIE                    _SCI0_C3.Bits.FEIE
#define SCI0_C3_NEIE                    _SCI0_C3.Bits.NEIE
#define SCI0_C3_ORIE                    _SCI0_C3.Bits.ORIE
#define SCI0_C3_TXINV                   _SCI0_C3.Bits.TXINV
#define SCI0_C3_TXDIR                   _SCI0_C3.Bits.TXDIR
#define SCI0_C3_T8                      _SCI0_C3.Bits.T8
#define SCI0_C3_R8                      _SCI0_C3.Bits.R8

#define SCI0_C3_PEIE_MASK               0x01U
#define SCI0_C3_FEIE_MASK               0x02U
#define SCI0_C3_NEIE_MASK               0x04U
#define SCI0_C3_ORIE_MASK               0x08U
#define SCI0_C3_TXINV_MASK              0x10U
#define SCI0_C3_TXDIR_MASK              0x20U
#define SCI0_C3_T8_MASK                 0x40U
#define SCI0_C3_R8_MASK                 0x80U


/*** SCI0_D - SCI Data Register; 0x00003087 ***/
typedef union {
  byte Byte;
  struct {
    byte R0T0        :1;                                       /* Read receive data buffer 0 or write transmit data buffer 0 */
    byte R1T1        :1;                                       /* Read receive data buffer 1 or write transmit data buffer 1 */
    byte R2T2        :1;                                       /* Read receive data buffer 2 or write transmit data buffer 2 */
    byte R3T3        :1;                                       /* Read receive data buffer 3 or write transmit data buffer 3 */
    byte R4T4        :1;                                       /* Read receive data buffer 4 or write transmit data buffer 4 */
    byte R5T5        :1;                                       /* Read receive data buffer 5 or write transmit data buffer 5 */
    byte R6T6        :1;                                       /* Read receive data buffer 6 or write transmit data buffer 6 */
    byte R7T7        :1;                                       /* Read receive data buffer 7 or write transmit data buffer 7 */
  } Bits;
} SCI0_DSTR;
extern volatile SCI0_DSTR _SCI0_D @0x00003087;
#define SCI0_D                          _SCI0_D.Byte
#define SCI0_D_R0T0                     _SCI0_D.Bits.R0T0
#define SCI0_D_R1T1                     _SCI0_D.Bits.R1T1
#define SCI0_D_R2T2                     _SCI0_D.Bits.R2T2
#define SCI0_D_R3T3                     _SCI0_D.Bits.R3T3
#define SCI0_D_R4T4                     _SCI0_D.Bits.R4T4
#define SCI0_D_R5T5                     _SCI0_D.Bits.R5T5
#define SCI0_D_R6T6                     _SCI0_D.Bits.R6T6
#define SCI0_D_R7T7                     _SCI0_D.Bits.R7T7

#define SCI0_D_R0T0_MASK                0x01U
#define SCI0_D_R1T1_MASK                0x02U
#define SCI0_D_R2T2_MASK                0x04U
#define SCI0_D_R3T3_MASK                0x08U
#define SCI0_D_R4T4_MASK                0x10U
#define SCI0_D_R5T5_MASK                0x20U
#define SCI0_D_R6T6_MASK                0x40U
#define SCI0_D_R7T7_MASK                0x80U


/*** ADC_APCTL1 - Pin Control 1 Register; 0x000030AC ***/
typedef union {
  byte Byte;
  struct {
    byte ADPC0       :1;                                       /* ADC Pin Control 0 */
    byte ADPC1       :1;                                       /* ADC Pin Control 1 */
    byte ADPC2       :1;                                       /* ADC Pin Control 2 */
    byte ADPC3       :1;                                       /* ADC Pin Control 3 */
    byte ADPC4       :1;                                       /* ADC Pin Control 4 */
    byte ADPC5       :1;                                       /* ADC Pin Control 5 */
    byte ADPC6       :1;                                       /* ADC Pin Control 6 */
    byte ADPC7       :1;                                       /* ADC Pin Control 7 */
  } Bits;
} ADC_APCTL1STR;
extern volatile ADC_APCTL1STR _ADC_APCTL1 @0x000030AC;
#define ADC_APCTL1                      _ADC_APCTL1.Byte
#define ADC_APCTL1_ADPC0                _ADC_APCTL1.Bits.ADPC0
#define ADC_APCTL1_ADPC1                _ADC_APCTL1.Bits.ADPC1
#define ADC_APCTL1_ADPC2                _ADC_APCTL1.Bits.ADPC2
#define ADC_APCTL1_ADPC3                _ADC_APCTL1.Bits.ADPC3
#define ADC_APCTL1_ADPC4                _ADC_APCTL1.Bits.ADPC4
#define ADC_APCTL1_ADPC5                _ADC_APCTL1.Bits.ADPC5
#define ADC_APCTL1_ADPC6                _ADC_APCTL1.Bits.ADPC6
#define ADC_APCTL1_ADPC7                _ADC_APCTL1.Bits.ADPC7

#define ADC_APCTL1_ADPC0_MASK           0x01U
#define ADC_APCTL1_ADPC1_MASK           0x02U
#define ADC_APCTL1_ADPC2_MASK           0x04U
#define ADC_APCTL1_ADPC3_MASK           0x08U
#define ADC_APCTL1_ADPC4_MASK           0x10U
#define ADC_APCTL1_ADPC5_MASK           0x20U
#define ADC_APCTL1_ADPC6_MASK           0x40U
#define ADC_APCTL1_ADPC7_MASK           0x80U


/*** PORT_HDRVE - Port High Drive Enable Register; 0x000030AF ***/
typedef union {
  byte Byte;
  struct {
    byte PTB4        :1;                                       /* PTB4 */
    byte PTB5        :1;                                       /* PTB5 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTB_4 :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_HDRVESTR;
extern volatile PORT_HDRVESTR _PORT_HDRVE @0x000030AF;
#define PORT_HDRVE                      _PORT_HDRVE.Byte
#define PORT_HDRVE_PTB4                 _PORT_HDRVE.Bits.PTB4
#define PORT_HDRVE_PTB5                 _PORT_HDRVE.Bits.PTB5
#define PORT_HDRVE_PTB_4                _PORT_HDRVE.MergedBits.grpPTB_4
#define PORT_HDRVE_PTB                  PORT_HDRVE_PTB_4

#define PORT_HDRVE_PTB4_MASK            0x01U
#define PORT_HDRVE_PTB5_MASK            0x02U
#define PORT_HDRVE_PTB_4_MASK           0x03U
#define PORT_HDRVE_PTB_4_BITNUM         0x00U


/*** PORT_PTAOE - Port A Output Enable Register; 0x000030B0 ***/
typedef union {
  byte Byte;
  struct {
    byte PTAOE0      :1;                                       /* Output Enable for Port A Bit 0 */
    byte PTAOE1      :1;                                       /* Output Enable for Port A Bit 1 */
    byte PTAOE2      :1;                                       /* Output Enable for Port A Bit 2 */
    byte PTAOE3      :1;                                       /* Output Enable for Port A Bit 3 */
    byte PTAOE4      :1;                                       /* Output Enable for Port A Bit 4 */
    byte PTAOE5      :1;                                       /* Output Enable for Port A Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTAOE :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTAOESTR;
extern volatile PORT_PTAOESTR _PORT_PTAOE @0x000030B0;
#define PORT_PTAOE                      _PORT_PTAOE.Byte
#define PORT_PTAOE_PTAOE0               _PORT_PTAOE.Bits.PTAOE0
#define PORT_PTAOE_PTAOE1               _PORT_PTAOE.Bits.PTAOE1
#define PORT_PTAOE_PTAOE2               _PORT_PTAOE.Bits.PTAOE2
#define PORT_PTAOE_PTAOE3               _PORT_PTAOE.Bits.PTAOE3
#define PORT_PTAOE_PTAOE4               _PORT_PTAOE.Bits.PTAOE4
#define PORT_PTAOE_PTAOE5               _PORT_PTAOE.Bits.PTAOE5
#define PORT_PTAOE_PTAOE                _PORT_PTAOE.MergedBits.grpPTAOE

#define PORT_PTAOE_PTAOE0_MASK          0x01U
#define PORT_PTAOE_PTAOE1_MASK          0x02U
#define PORT_PTAOE_PTAOE2_MASK          0x04U
#define PORT_PTAOE_PTAOE3_MASK          0x08U
#define PORT_PTAOE_PTAOE4_MASK          0x10U
#define PORT_PTAOE_PTAOE5_MASK          0x20U
#define PORT_PTAOE_PTAOE_MASK           0x3FU
#define PORT_PTAOE_PTAOE_BITNUM         0x00U


/*** PORT_PTBOE - Port B Output Enable Register; 0x000030B1 ***/
typedef union {
  byte Byte;
  struct {
    byte PTBOE0      :1;                                       /* Output Enable for Port B Bit 0 */
    byte PTBOE1      :1;                                       /* Output Enable for Port B Bit 1 */
    byte PTBOE2      :1;                                       /* Output Enable for Port B Bit 2 */
    byte PTBOE3      :1;                                       /* Output Enable for Port B Bit 3 */
    byte PTBOE4      :1;                                       /* Output Enable for Port B Bit 4 */
    byte PTBOE5      :1;                                       /* Output Enable for Port B Bit 5 */
    byte PTBOE6      :1;                                       /* Output Enable for Port B Bit 6 */
    byte PTBOE7      :1;                                       /* Output Enable for Port B Bit 7 */
  } Bits;
} PORT_PTBOESTR;
extern volatile PORT_PTBOESTR _PORT_PTBOE @0x000030B1;
#define PORT_PTBOE                      _PORT_PTBOE.Byte
#define PORT_PTBOE_PTBOE0               _PORT_PTBOE.Bits.PTBOE0
#define PORT_PTBOE_PTBOE1               _PORT_PTBOE.Bits.PTBOE1
#define PORT_PTBOE_PTBOE2               _PORT_PTBOE.Bits.PTBOE2
#define PORT_PTBOE_PTBOE3               _PORT_PTBOE.Bits.PTBOE3
#define PORT_PTBOE_PTBOE4               _PORT_PTBOE.Bits.PTBOE4
#define PORT_PTBOE_PTBOE5               _PORT_PTBOE.Bits.PTBOE5
#define PORT_PTBOE_PTBOE6               _PORT_PTBOE.Bits.PTBOE6
#define PORT_PTBOE_PTBOE7               _PORT_PTBOE.Bits.PTBOE7

#define PORT_PTBOE_PTBOE0_MASK          0x01U
#define PORT_PTBOE_PTBOE1_MASK          0x02U
#define PORT_PTBOE_PTBOE2_MASK          0x04U
#define PORT_PTBOE_PTBOE3_MASK          0x08U
#define PORT_PTBOE_PTBOE4_MASK          0x10U
#define PORT_PTBOE_PTBOE5_MASK          0x20U
#define PORT_PTBOE_PTBOE6_MASK          0x40U
#define PORT_PTBOE_PTBOE7_MASK          0x80U


/*** PORT_PTCOE - Port C Output Enable Register; 0x000030B2 ***/
typedef union {
  byte Byte;
  struct {
    byte PTCOE0      :1;                                       /* Output Enable for Port C Bit 0 */
    byte PTCOE1      :1;                                       /* Output Enable for Port C Bit 1 */
    byte PTCOE2      :1;                                       /* Output Enable for Port C Bit 2 */
    byte PTCOE3      :1;                                       /* Output Enable for Port C Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTCOE :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTCOESTR;
extern volatile PORT_PTCOESTR _PORT_PTCOE @0x000030B2;
#define PORT_PTCOE                      _PORT_PTCOE.Byte
#define PORT_PTCOE_PTCOE0               _PORT_PTCOE.Bits.PTCOE0
#define PORT_PTCOE_PTCOE1               _PORT_PTCOE.Bits.PTCOE1
#define PORT_PTCOE_PTCOE2               _PORT_PTCOE.Bits.PTCOE2
#define PORT_PTCOE_PTCOE3               _PORT_PTCOE.Bits.PTCOE3
#define PORT_PTCOE_PTCOE                _PORT_PTCOE.MergedBits.grpPTCOE

#define PORT_PTCOE_PTCOE0_MASK          0x01U
#define PORT_PTCOE_PTCOE1_MASK          0x02U
#define PORT_PTCOE_PTCOE2_MASK          0x04U
#define PORT_PTCOE_PTCOE3_MASK          0x08U
#define PORT_PTCOE_PTCOE_MASK           0x0FU
#define PORT_PTCOE_PTCOE_BITNUM         0x00U


/*** PORT_PTAIE - Port A Input Enable Register; 0x000030B8 ***/
typedef union {
  byte Byte;
  struct {
    byte PTAIE0      :1;                                       /* Input Enable for Port A Bit 0 */
    byte PTAIE1      :1;                                       /* Input Enable for Port A Bit 1 */
    byte PTAIE2      :1;                                       /* Input Enable for Port A Bit 2 */
    byte PTAIE3      :1;                                       /* Input Enable for Port A Bit 3 */
    byte             :1; 
    byte PTAIE5      :1;                                       /* Input Enable for Port A Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTAIE :4;
    byte         :1;
    byte grpPTAIE_5 :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTAIESTR;
extern volatile PORT_PTAIESTR _PORT_PTAIE @0x000030B8;
#define PORT_PTAIE                      _PORT_PTAIE.Byte
#define PORT_PTAIE_PTAIE0               _PORT_PTAIE.Bits.PTAIE0
#define PORT_PTAIE_PTAIE1               _PORT_PTAIE.Bits.PTAIE1
#define PORT_PTAIE_PTAIE2               _PORT_PTAIE.Bits.PTAIE2
#define PORT_PTAIE_PTAIE3               _PORT_PTAIE.Bits.PTAIE3
#define PORT_PTAIE_PTAIE5               _PORT_PTAIE.Bits.PTAIE5
#define PORT_PTAIE_PTAIE                _PORT_PTAIE.MergedBits.grpPTAIE

#define PORT_PTAIE_PTAIE0_MASK          0x01U
#define PORT_PTAIE_PTAIE1_MASK          0x02U
#define PORT_PTAIE_PTAIE2_MASK          0x04U
#define PORT_PTAIE_PTAIE3_MASK          0x08U
#define PORT_PTAIE_PTAIE5_MASK          0x20U
#define PORT_PTAIE_PTAIE_MASK           0x0FU
#define PORT_PTAIE_PTAIE_BITNUM         0x00U


/*** PORT_PTBIE - Port B Input Enable Register; 0x000030B9 ***/
typedef union {
  byte Byte;
  struct {
    byte PTBIE0      :1;                                       /* Input Enable for Port B Bit 0 */
    byte PTBIE1      :1;                                       /* Input Enable for Port B Bit 1 */
    byte PTBIE2      :1;                                       /* Input Enable for Port B Bit 2 */
    byte PTBIE3      :1;                                       /* Input Enable for Port B Bit 3 */
    byte PTBIE4      :1;                                       /* Input Enable for Port B Bit 4 */
    byte PTBIE5      :1;                                       /* Input Enable for Port B Bit 5 */
    byte PTBIE6      :1;                                       /* Input Enable for Port B Bit 6 */
    byte PTBIE7      :1;                                       /* Input Enable for Port B Bit 7 */
  } Bits;
} PORT_PTBIESTR;
extern volatile PORT_PTBIESTR _PORT_PTBIE @0x000030B9;
#define PORT_PTBIE                      _PORT_PTBIE.Byte
#define PORT_PTBIE_PTBIE0               _PORT_PTBIE.Bits.PTBIE0
#define PORT_PTBIE_PTBIE1               _PORT_PTBIE.Bits.PTBIE1
#define PORT_PTBIE_PTBIE2               _PORT_PTBIE.Bits.PTBIE2
#define PORT_PTBIE_PTBIE3               _PORT_PTBIE.Bits.PTBIE3
#define PORT_PTBIE_PTBIE4               _PORT_PTBIE.Bits.PTBIE4
#define PORT_PTBIE_PTBIE5               _PORT_PTBIE.Bits.PTBIE5
#define PORT_PTBIE_PTBIE6               _PORT_PTBIE.Bits.PTBIE6
#define PORT_PTBIE_PTBIE7               _PORT_PTBIE.Bits.PTBIE7

#define PORT_PTBIE_PTBIE0_MASK          0x01U
#define PORT_PTBIE_PTBIE1_MASK          0x02U
#define PORT_PTBIE_PTBIE2_MASK          0x04U
#define PORT_PTBIE_PTBIE3_MASK          0x08U
#define PORT_PTBIE_PTBIE4_MASK          0x10U
#define PORT_PTBIE_PTBIE5_MASK          0x20U
#define PORT_PTBIE_PTBIE6_MASK          0x40U
#define PORT_PTBIE_PTBIE7_MASK          0x80U


/*** PORT_PTCIE - Port C Input Enable Register; 0x000030BA ***/
typedef union {
  byte Byte;
  struct {
    byte PTCIE0      :1;                                       /* Input Enable for Port C Bit 0 */
    byte PTCIE1      :1;                                       /* Input Enable for Port C Bit 1 */
    byte PTCIE2      :1;                                       /* Input Enable for Port C Bit 2 */
    byte PTCIE3      :1;                                       /* Input Enable for Port C Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTCIE :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTCIESTR;
extern volatile PORT_PTCIESTR _PORT_PTCIE @0x000030BA;
#define PORT_PTCIE                      _PORT_PTCIE.Byte
#define PORT_PTCIE_PTCIE0               _PORT_PTCIE.Bits.PTCIE0
#define PORT_PTCIE_PTCIE1               _PORT_PTCIE.Bits.PTCIE1
#define PORT_PTCIE_PTCIE2               _PORT_PTCIE.Bits.PTCIE2
#define PORT_PTCIE_PTCIE3               _PORT_PTCIE.Bits.PTCIE3
#define PORT_PTCIE_PTCIE                _PORT_PTCIE.MergedBits.grpPTCIE

#define PORT_PTCIE_PTCIE0_MASK          0x01U
#define PORT_PTCIE_PTCIE1_MASK          0x02U
#define PORT_PTCIE_PTCIE2_MASK          0x04U
#define PORT_PTCIE_PTCIE3_MASK          0x08U
#define PORT_PTCIE_PTCIE_MASK           0x0FU
#define PORT_PTCIE_PTCIE_BITNUM         0x00U


/*** PORT_IOFLT0 - Port Filter Register 0; 0x000030EC ***/
typedef union {
  byte Byte;
  struct {
    byte FLTA0       :1;                                       /* Filter selection for input from PTA, bit 0 */
    byte FLTA1       :1;                                       /* Filter selection for input from PTA, bit 1 */
    byte FLTB0       :1;                                       /* Filter selection for input from PTB, bit 0 */
    byte FLTB1       :1;                                       /* Filter selection for input from PTB, bit 1 */
    byte FLTC0       :1;                                       /* Filter selection for input from PTC, bit 0 */
    byte FLTC1       :1;                                       /* Filter selection for input from PTC, bit 1 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpFLTA :2;
    byte grpFLTB :2;
    byte grpFLTC :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_IOFLT0STR;
extern volatile PORT_IOFLT0STR _PORT_IOFLT0 @0x000030EC;
#define PORT_IOFLT0                     _PORT_IOFLT0.Byte
#define PORT_IOFLT0_FLTA0               _PORT_IOFLT0.Bits.FLTA0
#define PORT_IOFLT0_FLTA1               _PORT_IOFLT0.Bits.FLTA1
#define PORT_IOFLT0_FLTB0               _PORT_IOFLT0.Bits.FLTB0
#define PORT_IOFLT0_FLTB1               _PORT_IOFLT0.Bits.FLTB1
#define PORT_IOFLT0_FLTC0               _PORT_IOFLT0.Bits.FLTC0
#define PORT_IOFLT0_FLTC1               _PORT_IOFLT0.Bits.FLTC1
#define PORT_IOFLT0_FLTA                _PORT_IOFLT0.MergedBits.grpFLTA
#define PORT_IOFLT0_FLTB                _PORT_IOFLT0.MergedBits.grpFLTB
#define PORT_IOFLT0_FLTC                _PORT_IOFLT0.MergedBits.grpFLTC

#define PORT_IOFLT0_FLTA0_MASK          0x01U
#define PORT_IOFLT0_FLTA1_MASK          0x02U
#define PORT_IOFLT0_FLTB0_MASK          0x04U
#define PORT_IOFLT0_FLTB1_MASK          0x08U
#define PORT_IOFLT0_FLTC0_MASK          0x10U
#define PORT_IOFLT0_FLTC1_MASK          0x20U
#define PORT_IOFLT0_FLTA_MASK           0x03U
#define PORT_IOFLT0_FLTA_BITNUM         0x00U
#define PORT_IOFLT0_FLTB_MASK           0x0CU
#define PORT_IOFLT0_FLTB_BITNUM         0x02U
#define PORT_IOFLT0_FLTC_MASK           0x30U
#define PORT_IOFLT0_FLTC_BITNUM         0x04U


/*** PORT_IOFLT2 - Port Filter Register 2; 0x000030EE ***/
typedef union {
  byte Byte;
  struct {
    byte FLTRST0     :1;                                       /* Filter selection for input from RESET/IRQ, bit 0 */
    byte FLTRST1     :1;                                       /* Filter selection for input from RESET/IRQ, bit 1 */
    byte FLTKBI00    :1;                                       /* Filter selection for input from KBI0, bit 0 */
    byte FLTKBI01    :1;                                       /* Filter selection for input from KBI0, bit 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpFLTRST :2;
    byte grpFLTKBI0 :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_IOFLT2STR;
extern volatile PORT_IOFLT2STR _PORT_IOFLT2 @0x000030EE;
#define PORT_IOFLT2                     _PORT_IOFLT2.Byte
#define PORT_IOFLT2_FLTRST0             _PORT_IOFLT2.Bits.FLTRST0
#define PORT_IOFLT2_FLTRST1             _PORT_IOFLT2.Bits.FLTRST1
#define PORT_IOFLT2_FLTKBI00            _PORT_IOFLT2.Bits.FLTKBI00
#define PORT_IOFLT2_FLTKBI01            _PORT_IOFLT2.Bits.FLTKBI01
#define PORT_IOFLT2_FLTRST              _PORT_IOFLT2.MergedBits.grpFLTRST
#define PORT_IOFLT2_FLTKBI0             _PORT_IOFLT2.MergedBits.grpFLTKBI0

#define PORT_IOFLT2_FLTRST0_MASK        0x01U
#define PORT_IOFLT2_FLTRST1_MASK        0x02U
#define PORT_IOFLT2_FLTKBI00_MASK       0x04U
#define PORT_IOFLT2_FLTKBI01_MASK       0x08U
#define PORT_IOFLT2_FLTRST_MASK         0x03U
#define PORT_IOFLT2_FLTRST_BITNUM       0x00U
#define PORT_IOFLT2_FLTKBI0_MASK        0x0CU
#define PORT_IOFLT2_FLTKBI0_BITNUM      0x02U


/*** PORT_FCLKDIV - Port Clock Division Register; 0x000030EF ***/
typedef union {
  byte Byte;
  struct {
    byte FLTDIV10    :1;                                       /* , bit 0 */
    byte FLTDIV11    :1;                                       /* , bit 1 */
    byte FLTDIV20    :1;                                       /* , bit 0 */
    byte FLTDIV21    :1;                                       /* , bit 1 */
    byte FLTDIV22    :1;                                       /* , bit 2 */
    byte FLTDIV30    :1;                                       /* , bit 0 */
    byte FLTDIV31    :1;                                       /* , bit 1 */
    byte FLTDIV32    :1;                                       /* , bit 2 */
  } Bits;
  struct {
    byte grpFLTDIV1 :2;
    byte grpFLTDIV2 :3;
    byte grpFLTDIV3 :3;
  } MergedBits;
} PORT_FCLKDIVSTR;
extern volatile PORT_FCLKDIVSTR _PORT_FCLKDIV @0x000030EF;
#define PORT_FCLKDIV                    _PORT_FCLKDIV.Byte
#define PORT_FCLKDIV_FLTDIV10           _PORT_FCLKDIV.Bits.FLTDIV10
#define PORT_FCLKDIV_FLTDIV11           _PORT_FCLKDIV.Bits.FLTDIV11
#define PORT_FCLKDIV_FLTDIV20           _PORT_FCLKDIV.Bits.FLTDIV20
#define PORT_FCLKDIV_FLTDIV21           _PORT_FCLKDIV.Bits.FLTDIV21
#define PORT_FCLKDIV_FLTDIV22           _PORT_FCLKDIV.Bits.FLTDIV22
#define PORT_FCLKDIV_FLTDIV30           _PORT_FCLKDIV.Bits.FLTDIV30
#define PORT_FCLKDIV_FLTDIV31           _PORT_FCLKDIV.Bits.FLTDIV31
#define PORT_FCLKDIV_FLTDIV32           _PORT_FCLKDIV.Bits.FLTDIV32
#define PORT_FCLKDIV_FLTDIV1            _PORT_FCLKDIV.MergedBits.grpFLTDIV1
#define PORT_FCLKDIV_FLTDIV2            _PORT_FCLKDIV.MergedBits.grpFLTDIV2
#define PORT_FCLKDIV_FLTDIV3            _PORT_FCLKDIV.MergedBits.grpFLTDIV3

#define PORT_FCLKDIV_FLTDIV10_MASK      0x01U
#define PORT_FCLKDIV_FLTDIV11_MASK      0x02U
#define PORT_FCLKDIV_FLTDIV20_MASK      0x04U
#define PORT_FCLKDIV_FLTDIV21_MASK      0x08U
#define PORT_FCLKDIV_FLTDIV22_MASK      0x10U
#define PORT_FCLKDIV_FLTDIV30_MASK      0x20U
#define PORT_FCLKDIV_FLTDIV31_MASK      0x40U
#define PORT_FCLKDIV_FLTDIV32_MASK      0x80U
#define PORT_FCLKDIV_FLTDIV1_MASK       0x03U
#define PORT_FCLKDIV_FLTDIV1_BITNUM     0x00U
#define PORT_FCLKDIV_FLTDIV2_MASK       0x1CU
#define PORT_FCLKDIV_FLTDIV2_BITNUM     0x02U
#define PORT_FCLKDIV_FLTDIV3_MASK       0xE0U
#define PORT_FCLKDIV_FLTDIV3_BITNUM     0x05U


/*** PORT_PTAPE - Port A Pullup Enable Register; 0x000030F0 ***/
typedef union {
  byte Byte;
  struct {
    byte PTAPE0      :1;                                       /* Pull Enable for Port A Bit 0 */
    byte PTAPE1      :1;                                       /* Pull Enable for Port A Bit 1 */
    byte PTAPE2      :1;                                       /* Pull Enable for Port A Bit 2 */
    byte PTAPE3      :1;                                       /* Pull Enable for Port A Bit 3 */
    byte             :1; 
    byte PTAPE5      :1;                                       /* Pull Enable for Port A Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTAPE :4;
    byte         :1;
    byte grpPTAPE_5 :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTAPESTR;
extern volatile PORT_PTAPESTR _PORT_PTAPE @0x000030F0;
#define PORT_PTAPE                      _PORT_PTAPE.Byte
#define PORT_PTAPE_PTAPE0               _PORT_PTAPE.Bits.PTAPE0
#define PORT_PTAPE_PTAPE1               _PORT_PTAPE.Bits.PTAPE1
#define PORT_PTAPE_PTAPE2               _PORT_PTAPE.Bits.PTAPE2
#define PORT_PTAPE_PTAPE3               _PORT_PTAPE.Bits.PTAPE3
#define PORT_PTAPE_PTAPE5               _PORT_PTAPE.Bits.PTAPE5
#define PORT_PTAPE_PTAPE                _PORT_PTAPE.MergedBits.grpPTAPE

#define PORT_PTAPE_PTAPE0_MASK          0x01U
#define PORT_PTAPE_PTAPE1_MASK          0x02U
#define PORT_PTAPE_PTAPE2_MASK          0x04U
#define PORT_PTAPE_PTAPE3_MASK          0x08U
#define PORT_PTAPE_PTAPE5_MASK          0x20U
#define PORT_PTAPE_PTAPE_MASK           0x0FU
#define PORT_PTAPE_PTAPE_BITNUM         0x00U


/*** PORT_PTBPE - Port B Pullup Enable Register; 0x000030F1 ***/
typedef union {
  byte Byte;
  struct {
    byte PTBPE0      :1;                                       /* Pull Enable for Port B Bit 0 */
    byte PTBPE1      :1;                                       /* Pull Enable for Port B Bit 1 */
    byte PTBPE2      :1;                                       /* Pull Enable for Port B Bit 2 */
    byte PTBPE3      :1;                                       /* Pull Enable for Port B Bit 3 */
    byte PTBPE4      :1;                                       /* Pull Enable for Port B Bit 4 */
    byte PTBPE5      :1;                                       /* Pull Enable for Port B Bit 5 */
    byte PTBPE6      :1;                                       /* Pull Enable for Port B Bit 6 */
    byte PTBPE7      :1;                                       /* Pull Enable for Port B Bit 7 */
  } Bits;
} PORT_PTBPESTR;
extern volatile PORT_PTBPESTR _PORT_PTBPE @0x000030F1;
#define PORT_PTBPE                      _PORT_PTBPE.Byte
#define PORT_PTBPE_PTBPE0               _PORT_PTBPE.Bits.PTBPE0
#define PORT_PTBPE_PTBPE1               _PORT_PTBPE.Bits.PTBPE1
#define PORT_PTBPE_PTBPE2               _PORT_PTBPE.Bits.PTBPE2
#define PORT_PTBPE_PTBPE3               _PORT_PTBPE.Bits.PTBPE3
#define PORT_PTBPE_PTBPE4               _PORT_PTBPE.Bits.PTBPE4
#define PORT_PTBPE_PTBPE5               _PORT_PTBPE.Bits.PTBPE5
#define PORT_PTBPE_PTBPE6               _PORT_PTBPE.Bits.PTBPE6
#define PORT_PTBPE_PTBPE7               _PORT_PTBPE.Bits.PTBPE7

#define PORT_PTBPE_PTBPE0_MASK          0x01U
#define PORT_PTBPE_PTBPE1_MASK          0x02U
#define PORT_PTBPE_PTBPE2_MASK          0x04U
#define PORT_PTBPE_PTBPE3_MASK          0x08U
#define PORT_PTBPE_PTBPE4_MASK          0x10U
#define PORT_PTBPE_PTBPE5_MASK          0x20U
#define PORT_PTBPE_PTBPE6_MASK          0x40U
#define PORT_PTBPE_PTBPE7_MASK          0x80U


/*** PORT_PTCPE - Port C Pullup Enable Register; 0x000030F2 ***/
typedef union {
  byte Byte;
  struct {
    byte PTCPE0      :1;                                       /* Pull Enable for Port C Bit 0 */
    byte PTCPE1      :1;                                       /* Pull Enable for Port C Bit 1 */
    byte PTCPE2      :1;                                       /* Pull Enable for Port C Bit 2 */
    byte PTCPE3      :1;                                       /* Pull Enable for Port C Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTCPE :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PORT_PTCPESTR;
extern volatile PORT_PTCPESTR _PORT_PTCPE @0x000030F2;
#define PORT_PTCPE                      _PORT_PTCPE.Byte
#define PORT_PTCPE_PTCPE0               _PORT_PTCPE.Bits.PTCPE0
#define PORT_PTCPE_PTCPE1               _PORT_PTCPE.Bits.PTCPE1
#define PORT_PTCPE_PTCPE2               _PORT_PTCPE.Bits.PTCPE2
#define PORT_PTCPE_PTCPE3               _PORT_PTCPE.Bits.PTCPE3
#define PORT_PTCPE_PTCPE                _PORT_PTCPE.MergedBits.grpPTCPE

#define PORT_PTCPE_PTCPE0_MASK          0x01U
#define PORT_PTCPE_PTCPE1_MASK          0x02U
#define PORT_PTCPE_PTCPE2_MASK          0x04U
#define PORT_PTCPE_PTCPE3_MASK          0x08U
#define PORT_PTCPE_PTCPE_MASK           0x0FU
#define PORT_PTCPE_PTCPE_BITNUM         0x00U


/*** SYS_UUID1 - Universally Unique Identifier Register 1; 0x000030F8 ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID1STR;
extern volatile SYS_UUID1STR _SYS_UUID1 @0x000030F8;
#define SYS_UUID1                       _SYS_UUID1.Byte
#define SYS_UUID1_ID0                   _SYS_UUID1.Bits.ID0
#define SYS_UUID1_ID1                   _SYS_UUID1.Bits.ID1
#define SYS_UUID1_ID2                   _SYS_UUID1.Bits.ID2
#define SYS_UUID1_ID3                   _SYS_UUID1.Bits.ID3
#define SYS_UUID1_ID4                   _SYS_UUID1.Bits.ID4
#define SYS_UUID1_ID5                   _SYS_UUID1.Bits.ID5
#define SYS_UUID1_ID6                   _SYS_UUID1.Bits.ID6
#define SYS_UUID1_ID7                   _SYS_UUID1.Bits.ID7

#define SYS_UUID1_ID0_MASK              0x01U
#define SYS_UUID1_ID1_MASK              0x02U
#define SYS_UUID1_ID2_MASK              0x04U
#define SYS_UUID1_ID3_MASK              0x08U
#define SYS_UUID1_ID4_MASK              0x10U
#define SYS_UUID1_ID5_MASK              0x20U
#define SYS_UUID1_ID6_MASK              0x40U
#define SYS_UUID1_ID7_MASK              0x80U


/*** SYS_UUID2 - Universally Unique Identifier Register 2; 0x000030F9 ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID2STR;
extern volatile SYS_UUID2STR _SYS_UUID2 @0x000030F9;
#define SYS_UUID2                       _SYS_UUID2.Byte
#define SYS_UUID2_ID0                   _SYS_UUID2.Bits.ID0
#define SYS_UUID2_ID1                   _SYS_UUID2.Bits.ID1
#define SYS_UUID2_ID2                   _SYS_UUID2.Bits.ID2
#define SYS_UUID2_ID3                   _SYS_UUID2.Bits.ID3
#define SYS_UUID2_ID4                   _SYS_UUID2.Bits.ID4
#define SYS_UUID2_ID5                   _SYS_UUID2.Bits.ID5
#define SYS_UUID2_ID6                   _SYS_UUID2.Bits.ID6
#define SYS_UUID2_ID7                   _SYS_UUID2.Bits.ID7

#define SYS_UUID2_ID0_MASK              0x01U
#define SYS_UUID2_ID1_MASK              0x02U
#define SYS_UUID2_ID2_MASK              0x04U
#define SYS_UUID2_ID3_MASK              0x08U
#define SYS_UUID2_ID4_MASK              0x10U
#define SYS_UUID2_ID5_MASK              0x20U
#define SYS_UUID2_ID6_MASK              0x40U
#define SYS_UUID2_ID7_MASK              0x80U


/*** SYS_UUID3 - Universally Unique Identifier Register 3; 0x000030FA ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID3STR;
extern volatile SYS_UUID3STR _SYS_UUID3 @0x000030FA;
#define SYS_UUID3                       _SYS_UUID3.Byte
#define SYS_UUID3_ID0                   _SYS_UUID3.Bits.ID0
#define SYS_UUID3_ID1                   _SYS_UUID3.Bits.ID1
#define SYS_UUID3_ID2                   _SYS_UUID3.Bits.ID2
#define SYS_UUID3_ID3                   _SYS_UUID3.Bits.ID3
#define SYS_UUID3_ID4                   _SYS_UUID3.Bits.ID4
#define SYS_UUID3_ID5                   _SYS_UUID3.Bits.ID5
#define SYS_UUID3_ID6                   _SYS_UUID3.Bits.ID6
#define SYS_UUID3_ID7                   _SYS_UUID3.Bits.ID7

#define SYS_UUID3_ID0_MASK              0x01U
#define SYS_UUID3_ID1_MASK              0x02U
#define SYS_UUID3_ID2_MASK              0x04U
#define SYS_UUID3_ID3_MASK              0x08U
#define SYS_UUID3_ID4_MASK              0x10U
#define SYS_UUID3_ID5_MASK              0x20U
#define SYS_UUID3_ID6_MASK              0x40U
#define SYS_UUID3_ID7_MASK              0x80U


/*** SYS_UUID4 - Universally Unique Identifier Register 4; 0x000030FB ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID4STR;
extern volatile SYS_UUID4STR _SYS_UUID4 @0x000030FB;
#define SYS_UUID4                       _SYS_UUID4.Byte
#define SYS_UUID4_ID0                   _SYS_UUID4.Bits.ID0
#define SYS_UUID4_ID1                   _SYS_UUID4.Bits.ID1
#define SYS_UUID4_ID2                   _SYS_UUID4.Bits.ID2
#define SYS_UUID4_ID3                   _SYS_UUID4.Bits.ID3
#define SYS_UUID4_ID4                   _SYS_UUID4.Bits.ID4
#define SYS_UUID4_ID5                   _SYS_UUID4.Bits.ID5
#define SYS_UUID4_ID6                   _SYS_UUID4.Bits.ID6
#define SYS_UUID4_ID7                   _SYS_UUID4.Bits.ID7

#define SYS_UUID4_ID0_MASK              0x01U
#define SYS_UUID4_ID1_MASK              0x02U
#define SYS_UUID4_ID2_MASK              0x04U
#define SYS_UUID4_ID3_MASK              0x08U
#define SYS_UUID4_ID4_MASK              0x10U
#define SYS_UUID4_ID5_MASK              0x20U
#define SYS_UUID4_ID6_MASK              0x40U
#define SYS_UUID4_ID7_MASK              0x80U


/*** SYS_UUID5 - Universally Unique Identifier Register 5; 0x000030FC ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID5STR;
extern volatile SYS_UUID5STR _SYS_UUID5 @0x000030FC;
#define SYS_UUID5                       _SYS_UUID5.Byte
#define SYS_UUID5_ID0                   _SYS_UUID5.Bits.ID0
#define SYS_UUID5_ID1                   _SYS_UUID5.Bits.ID1
#define SYS_UUID5_ID2                   _SYS_UUID5.Bits.ID2
#define SYS_UUID5_ID3                   _SYS_UUID5.Bits.ID3
#define SYS_UUID5_ID4                   _SYS_UUID5.Bits.ID4
#define SYS_UUID5_ID5                   _SYS_UUID5.Bits.ID5
#define SYS_UUID5_ID6                   _SYS_UUID5.Bits.ID6
#define SYS_UUID5_ID7                   _SYS_UUID5.Bits.ID7

#define SYS_UUID5_ID0_MASK              0x01U
#define SYS_UUID5_ID1_MASK              0x02U
#define SYS_UUID5_ID2_MASK              0x04U
#define SYS_UUID5_ID3_MASK              0x08U
#define SYS_UUID5_ID4_MASK              0x10U
#define SYS_UUID5_ID5_MASK              0x20U
#define SYS_UUID5_ID6_MASK              0x40U
#define SYS_UUID5_ID7_MASK              0x80U


/*** SYS_UUID6 - Universally Unique Identifier Register 6; 0x000030FD ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID6STR;
extern volatile SYS_UUID6STR _SYS_UUID6 @0x000030FD;
#define SYS_UUID6                       _SYS_UUID6.Byte
#define SYS_UUID6_ID0                   _SYS_UUID6.Bits.ID0
#define SYS_UUID6_ID1                   _SYS_UUID6.Bits.ID1
#define SYS_UUID6_ID2                   _SYS_UUID6.Bits.ID2
#define SYS_UUID6_ID3                   _SYS_UUID6.Bits.ID3
#define SYS_UUID6_ID4                   _SYS_UUID6.Bits.ID4
#define SYS_UUID6_ID5                   _SYS_UUID6.Bits.ID5
#define SYS_UUID6_ID6                   _SYS_UUID6.Bits.ID6
#define SYS_UUID6_ID7                   _SYS_UUID6.Bits.ID7

#define SYS_UUID6_ID0_MASK              0x01U
#define SYS_UUID6_ID1_MASK              0x02U
#define SYS_UUID6_ID2_MASK              0x04U
#define SYS_UUID6_ID3_MASK              0x08U
#define SYS_UUID6_ID4_MASK              0x10U
#define SYS_UUID6_ID5_MASK              0x20U
#define SYS_UUID6_ID6_MASK              0x40U
#define SYS_UUID6_ID7_MASK              0x80U


/*** SYS_UUID7 - Universally Unique Identifier Register 7; 0x000030FE ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID7STR;
extern volatile SYS_UUID7STR _SYS_UUID7 @0x000030FE;
#define SYS_UUID7                       _SYS_UUID7.Byte
#define SYS_UUID7_ID0                   _SYS_UUID7.Bits.ID0
#define SYS_UUID7_ID1                   _SYS_UUID7.Bits.ID1
#define SYS_UUID7_ID2                   _SYS_UUID7.Bits.ID2
#define SYS_UUID7_ID3                   _SYS_UUID7.Bits.ID3
#define SYS_UUID7_ID4                   _SYS_UUID7.Bits.ID4
#define SYS_UUID7_ID5                   _SYS_UUID7.Bits.ID5
#define SYS_UUID7_ID6                   _SYS_UUID7.Bits.ID6
#define SYS_UUID7_ID7                   _SYS_UUID7.Bits.ID7

#define SYS_UUID7_ID0_MASK              0x01U
#define SYS_UUID7_ID1_MASK              0x02U
#define SYS_UUID7_ID2_MASK              0x04U
#define SYS_UUID7_ID3_MASK              0x08U
#define SYS_UUID7_ID4_MASK              0x10U
#define SYS_UUID7_ID5_MASK              0x20U
#define SYS_UUID7_ID6_MASK              0x40U
#define SYS_UUID7_ID7_MASK              0x80U


/*** SYS_UUID8 - Universally Unique Identifier Register 8; 0x000030FF ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Universally Unique Identifier, bit 0 */
    byte ID1         :1;                                       /* Universally Unique Identifier, bit 1 */
    byte ID2         :1;                                       /* Universally Unique Identifier, bit 2 */
    byte ID3         :1;                                       /* Universally Unique Identifier, bit 3 */
    byte ID4         :1;                                       /* Universally Unique Identifier, bit 4 */
    byte ID5         :1;                                       /* Universally Unique Identifier, bit 5 */
    byte ID6         :1;                                       /* Universally Unique Identifier, bit 6 */
    byte ID7         :1;                                       /* Universally Unique Identifier, bit 7 */
  } Bits;
} SYS_UUID8STR;
extern volatile SYS_UUID8STR _SYS_UUID8 @0x000030FF;
#define SYS_UUID8                       _SYS_UUID8.Byte
#define SYS_UUID8_ID0                   _SYS_UUID8.Bits.ID0
#define SYS_UUID8_ID1                   _SYS_UUID8.Bits.ID1
#define SYS_UUID8_ID2                   _SYS_UUID8.Bits.ID2
#define SYS_UUID8_ID3                   _SYS_UUID8.Bits.ID3
#define SYS_UUID8_ID4                   _SYS_UUID8.Bits.ID4
#define SYS_UUID8_ID5                   _SYS_UUID8.Bits.ID5
#define SYS_UUID8_ID6                   _SYS_UUID8.Bits.ID6
#define SYS_UUID8_ID7                   _SYS_UUID8.Bits.ID7

#define SYS_UUID8_ID0_MASK              0x01U
#define SYS_UUID8_ID1_MASK              0x02U
#define SYS_UUID8_ID2_MASK              0x04U
#define SYS_UUID8_ID3_MASK              0x08U
#define SYS_UUID8_ID4_MASK              0x10U
#define SYS_UUID8_ID5_MASK              0x20U
#define SYS_UUID8_ID6_MASK              0x40U
#define SYS_UUID8_ID7_MASK              0x80U


/*** NV_BACKKEY0 - Back Door Key Register n; 0x0000FF70 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY0STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY0_INIT @0x0000FF70 = <NV_BACKKEY0_INITVAL>; */
#define _NV_BACKKEY0 (*(const NV_BACKKEY0STR * __far)0x0000FF70)
#define NV_BACKKEY0                     _NV_BACKKEY0.Byte
#define NV_BACKKEY0_BACKKEY0            _NV_BACKKEY0.Bits.BACKKEY0
#define NV_BACKKEY0_BACKKEY1            _NV_BACKKEY0.Bits.BACKKEY1
#define NV_BACKKEY0_BACKKEY2            _NV_BACKKEY0.Bits.BACKKEY2
#define NV_BACKKEY0_BACKKEY3            _NV_BACKKEY0.Bits.BACKKEY3
#define NV_BACKKEY0_BACKKEY4            _NV_BACKKEY0.Bits.BACKKEY4
#define NV_BACKKEY0_BACKKEY5            _NV_BACKKEY0.Bits.BACKKEY5
#define NV_BACKKEY0_BACKKEY6            _NV_BACKKEY0.Bits.BACKKEY6
#define NV_BACKKEY0_BACKKEY7            _NV_BACKKEY0.Bits.BACKKEY7
/* NV_BACKKEY_ARR: Access 8 NV_BACKKEYx registers in an array */
#define NV_BACKKEY_ARR                  ((volatile byte * __far) &NV_BACKKEY0)

#define NV_BACKKEY0_BACKKEY0_MASK       0x01U
#define NV_BACKKEY0_BACKKEY1_MASK       0x02U
#define NV_BACKKEY0_BACKKEY2_MASK       0x04U
#define NV_BACKKEY0_BACKKEY3_MASK       0x08U
#define NV_BACKKEY0_BACKKEY4_MASK       0x10U
#define NV_BACKKEY0_BACKKEY5_MASK       0x20U
#define NV_BACKKEY0_BACKKEY6_MASK       0x40U
#define NV_BACKKEY0_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY1 - Back Door Key Register n; 0x0000FF71 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY1STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY1_INIT @0x0000FF71 = <NV_BACKKEY1_INITVAL>; */
#define _NV_BACKKEY1 (*(const NV_BACKKEY1STR * __far)0x0000FF71)
#define NV_BACKKEY1                     _NV_BACKKEY1.Byte
#define NV_BACKKEY1_BACKKEY0            _NV_BACKKEY1.Bits.BACKKEY0
#define NV_BACKKEY1_BACKKEY1            _NV_BACKKEY1.Bits.BACKKEY1
#define NV_BACKKEY1_BACKKEY2            _NV_BACKKEY1.Bits.BACKKEY2
#define NV_BACKKEY1_BACKKEY3            _NV_BACKKEY1.Bits.BACKKEY3
#define NV_BACKKEY1_BACKKEY4            _NV_BACKKEY1.Bits.BACKKEY4
#define NV_BACKKEY1_BACKKEY5            _NV_BACKKEY1.Bits.BACKKEY5
#define NV_BACKKEY1_BACKKEY6            _NV_BACKKEY1.Bits.BACKKEY6
#define NV_BACKKEY1_BACKKEY7            _NV_BACKKEY1.Bits.BACKKEY7

#define NV_BACKKEY1_BACKKEY0_MASK       0x01U
#define NV_BACKKEY1_BACKKEY1_MASK       0x02U
#define NV_BACKKEY1_BACKKEY2_MASK       0x04U
#define NV_BACKKEY1_BACKKEY3_MASK       0x08U
#define NV_BACKKEY1_BACKKEY4_MASK       0x10U
#define NV_BACKKEY1_BACKKEY5_MASK       0x20U
#define NV_BACKKEY1_BACKKEY6_MASK       0x40U
#define NV_BACKKEY1_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY2 - Back Door Key Register n; 0x0000FF72 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY2STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY2_INIT @0x0000FF72 = <NV_BACKKEY2_INITVAL>; */
#define _NV_BACKKEY2 (*(const NV_BACKKEY2STR * __far)0x0000FF72)
#define NV_BACKKEY2                     _NV_BACKKEY2.Byte
#define NV_BACKKEY2_BACKKEY0            _NV_BACKKEY2.Bits.BACKKEY0
#define NV_BACKKEY2_BACKKEY1            _NV_BACKKEY2.Bits.BACKKEY1
#define NV_BACKKEY2_BACKKEY2            _NV_BACKKEY2.Bits.BACKKEY2
#define NV_BACKKEY2_BACKKEY3            _NV_BACKKEY2.Bits.BACKKEY3
#define NV_BACKKEY2_BACKKEY4            _NV_BACKKEY2.Bits.BACKKEY4
#define NV_BACKKEY2_BACKKEY5            _NV_BACKKEY2.Bits.BACKKEY5
#define NV_BACKKEY2_BACKKEY6            _NV_BACKKEY2.Bits.BACKKEY6
#define NV_BACKKEY2_BACKKEY7            _NV_BACKKEY2.Bits.BACKKEY7

#define NV_BACKKEY2_BACKKEY0_MASK       0x01U
#define NV_BACKKEY2_BACKKEY1_MASK       0x02U
#define NV_BACKKEY2_BACKKEY2_MASK       0x04U
#define NV_BACKKEY2_BACKKEY3_MASK       0x08U
#define NV_BACKKEY2_BACKKEY4_MASK       0x10U
#define NV_BACKKEY2_BACKKEY5_MASK       0x20U
#define NV_BACKKEY2_BACKKEY6_MASK       0x40U
#define NV_BACKKEY2_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY3 - Back Door Key Register n; 0x0000FF73 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY3STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY3_INIT @0x0000FF73 = <NV_BACKKEY3_INITVAL>; */
#define _NV_BACKKEY3 (*(const NV_BACKKEY3STR * __far)0x0000FF73)
#define NV_BACKKEY3                     _NV_BACKKEY3.Byte
#define NV_BACKKEY3_BACKKEY0            _NV_BACKKEY3.Bits.BACKKEY0
#define NV_BACKKEY3_BACKKEY1            _NV_BACKKEY3.Bits.BACKKEY1
#define NV_BACKKEY3_BACKKEY2            _NV_BACKKEY3.Bits.BACKKEY2
#define NV_BACKKEY3_BACKKEY3            _NV_BACKKEY3.Bits.BACKKEY3
#define NV_BACKKEY3_BACKKEY4            _NV_BACKKEY3.Bits.BACKKEY4
#define NV_BACKKEY3_BACKKEY5            _NV_BACKKEY3.Bits.BACKKEY5
#define NV_BACKKEY3_BACKKEY6            _NV_BACKKEY3.Bits.BACKKEY6
#define NV_BACKKEY3_BACKKEY7            _NV_BACKKEY3.Bits.BACKKEY7

#define NV_BACKKEY3_BACKKEY0_MASK       0x01U
#define NV_BACKKEY3_BACKKEY1_MASK       0x02U
#define NV_BACKKEY3_BACKKEY2_MASK       0x04U
#define NV_BACKKEY3_BACKKEY3_MASK       0x08U
#define NV_BACKKEY3_BACKKEY4_MASK       0x10U
#define NV_BACKKEY3_BACKKEY5_MASK       0x20U
#define NV_BACKKEY3_BACKKEY6_MASK       0x40U
#define NV_BACKKEY3_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY4 - Back Door Key Register n; 0x0000FF74 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY4STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY4_INIT @0x0000FF74 = <NV_BACKKEY4_INITVAL>; */
#define _NV_BACKKEY4 (*(const NV_BACKKEY4STR * __far)0x0000FF74)
#define NV_BACKKEY4                     _NV_BACKKEY4.Byte
#define NV_BACKKEY4_BACKKEY0            _NV_BACKKEY4.Bits.BACKKEY0
#define NV_BACKKEY4_BACKKEY1            _NV_BACKKEY4.Bits.BACKKEY1
#define NV_BACKKEY4_BACKKEY2            _NV_BACKKEY4.Bits.BACKKEY2
#define NV_BACKKEY4_BACKKEY3            _NV_BACKKEY4.Bits.BACKKEY3
#define NV_BACKKEY4_BACKKEY4            _NV_BACKKEY4.Bits.BACKKEY4
#define NV_BACKKEY4_BACKKEY5            _NV_BACKKEY4.Bits.BACKKEY5
#define NV_BACKKEY4_BACKKEY6            _NV_BACKKEY4.Bits.BACKKEY6
#define NV_BACKKEY4_BACKKEY7            _NV_BACKKEY4.Bits.BACKKEY7

#define NV_BACKKEY4_BACKKEY0_MASK       0x01U
#define NV_BACKKEY4_BACKKEY1_MASK       0x02U
#define NV_BACKKEY4_BACKKEY2_MASK       0x04U
#define NV_BACKKEY4_BACKKEY3_MASK       0x08U
#define NV_BACKKEY4_BACKKEY4_MASK       0x10U
#define NV_BACKKEY4_BACKKEY5_MASK       0x20U
#define NV_BACKKEY4_BACKKEY6_MASK       0x40U
#define NV_BACKKEY4_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY5 - Back Door Key Register n; 0x0000FF75 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY5STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY5_INIT @0x0000FF75 = <NV_BACKKEY5_INITVAL>; */
#define _NV_BACKKEY5 (*(const NV_BACKKEY5STR * __far)0x0000FF75)
#define NV_BACKKEY5                     _NV_BACKKEY5.Byte
#define NV_BACKKEY5_BACKKEY0            _NV_BACKKEY5.Bits.BACKKEY0
#define NV_BACKKEY5_BACKKEY1            _NV_BACKKEY5.Bits.BACKKEY1
#define NV_BACKKEY5_BACKKEY2            _NV_BACKKEY5.Bits.BACKKEY2
#define NV_BACKKEY5_BACKKEY3            _NV_BACKKEY5.Bits.BACKKEY3
#define NV_BACKKEY5_BACKKEY4            _NV_BACKKEY5.Bits.BACKKEY4
#define NV_BACKKEY5_BACKKEY5            _NV_BACKKEY5.Bits.BACKKEY5
#define NV_BACKKEY5_BACKKEY6            _NV_BACKKEY5.Bits.BACKKEY6
#define NV_BACKKEY5_BACKKEY7            _NV_BACKKEY5.Bits.BACKKEY7

#define NV_BACKKEY5_BACKKEY0_MASK       0x01U
#define NV_BACKKEY5_BACKKEY1_MASK       0x02U
#define NV_BACKKEY5_BACKKEY2_MASK       0x04U
#define NV_BACKKEY5_BACKKEY3_MASK       0x08U
#define NV_BACKKEY5_BACKKEY4_MASK       0x10U
#define NV_BACKKEY5_BACKKEY5_MASK       0x20U
#define NV_BACKKEY5_BACKKEY6_MASK       0x40U
#define NV_BACKKEY5_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY6 - Back Door Key Register n; 0x0000FF76 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY6STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY6_INIT @0x0000FF76 = <NV_BACKKEY6_INITVAL>; */
#define _NV_BACKKEY6 (*(const NV_BACKKEY6STR * __far)0x0000FF76)
#define NV_BACKKEY6                     _NV_BACKKEY6.Byte
#define NV_BACKKEY6_BACKKEY0            _NV_BACKKEY6.Bits.BACKKEY0
#define NV_BACKKEY6_BACKKEY1            _NV_BACKKEY6.Bits.BACKKEY1
#define NV_BACKKEY6_BACKKEY2            _NV_BACKKEY6.Bits.BACKKEY2
#define NV_BACKKEY6_BACKKEY3            _NV_BACKKEY6.Bits.BACKKEY3
#define NV_BACKKEY6_BACKKEY4            _NV_BACKKEY6.Bits.BACKKEY4
#define NV_BACKKEY6_BACKKEY5            _NV_BACKKEY6.Bits.BACKKEY5
#define NV_BACKKEY6_BACKKEY6            _NV_BACKKEY6.Bits.BACKKEY6
#define NV_BACKKEY6_BACKKEY7            _NV_BACKKEY6.Bits.BACKKEY7

#define NV_BACKKEY6_BACKKEY0_MASK       0x01U
#define NV_BACKKEY6_BACKKEY1_MASK       0x02U
#define NV_BACKKEY6_BACKKEY2_MASK       0x04U
#define NV_BACKKEY6_BACKKEY3_MASK       0x08U
#define NV_BACKKEY6_BACKKEY4_MASK       0x10U
#define NV_BACKKEY6_BACKKEY5_MASK       0x20U
#define NV_BACKKEY6_BACKKEY6_MASK       0x40U
#define NV_BACKKEY6_BACKKEY7_MASK       0x80U


/*** NV_BACKKEY7 - Back Door Key Register n; 0x0000FF77 ***/
typedef union {
  byte Byte;
  struct {
    byte BACKKEY0    :1;                                       /* Back Door Key, bit 0 */
    byte BACKKEY1    :1;                                       /* Back Door Key, bit 1 */
    byte BACKKEY2    :1;                                       /* Back Door Key, bit 2 */
    byte BACKKEY3    :1;                                       /* Back Door Key, bit 3 */
    byte BACKKEY4    :1;                                       /* Back Door Key, bit 4 */
    byte BACKKEY5    :1;                                       /* Back Door Key, bit 5 */
    byte BACKKEY6    :1;                                       /* Back Door Key, bit 6 */
    byte BACKKEY7    :1;                                       /* Back Door Key, bit 7 */
  } Bits;
} NV_BACKKEY7STR;
/* Tip for register initialization in the user code:  const byte NV_BACKKEY7_INIT @0x0000FF77 = <NV_BACKKEY7_INITVAL>; */
#define _NV_BACKKEY7 (*(const NV_BACKKEY7STR * __far)0x0000FF77)
#define NV_BACKKEY7                     _NV_BACKKEY7.Byte
#define NV_BACKKEY7_BACKKEY0            _NV_BACKKEY7.Bits.BACKKEY0
#define NV_BACKKEY7_BACKKEY1            _NV_BACKKEY7.Bits.BACKKEY1
#define NV_BACKKEY7_BACKKEY2            _NV_BACKKEY7.Bits.BACKKEY2
#define NV_BACKKEY7_BACKKEY3            _NV_BACKKEY7.Bits.BACKKEY3
#define NV_BACKKEY7_BACKKEY4            _NV_BACKKEY7.Bits.BACKKEY4
#define NV_BACKKEY7_BACKKEY5            _NV_BACKKEY7.Bits.BACKKEY5
#define NV_BACKKEY7_BACKKEY6            _NV_BACKKEY7.Bits.BACKKEY6
#define NV_BACKKEY7_BACKKEY7            _NV_BACKKEY7.Bits.BACKKEY7

#define NV_BACKKEY7_BACKKEY0_MASK       0x01U
#define NV_BACKKEY7_BACKKEY1_MASK       0x02U
#define NV_BACKKEY7_BACKKEY2_MASK       0x04U
#define NV_BACKKEY7_BACKKEY3_MASK       0x08U
#define NV_BACKKEY7_BACKKEY4_MASK       0x10U
#define NV_BACKKEY7_BACKKEY5_MASK       0x20U
#define NV_BACKKEY7_BACKKEY6_MASK       0x40U
#define NV_BACKKEY7_BACKKEY7_MASK       0x80U


/*** NV_FPROT - Flash Protection Register; 0x0000FF7C ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FPHS0       :1;                                       /* Flash Protection Higher Address Size, bit 0 */
    byte FPHS1       :1;                                       /* Flash Protection Higher Address Size, bit 1 */
    byte FPHDIS      :1;                                       /* Flash Protection Higher Address Range Disable */
    byte             :1; 
    byte FPOPEN      :1;                                       /* Flash Protection Operation Enable */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFPHS :2;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} NV_FPROTSTR;
/* Tip for register initialization in the user code:  const byte NV_FPROT_INIT @0x0000FF7C = <NV_FPROT_INITVAL>; */
#define _NV_FPROT (*(const NV_FPROTSTR * __far)0x0000FF7C)
#define NV_FPROT                        _NV_FPROT.Byte
#define NV_FPROT_FPHS0                  _NV_FPROT.Bits.FPHS0
#define NV_FPROT_FPHS1                  _NV_FPROT.Bits.FPHS1
#define NV_FPROT_FPHDIS                 _NV_FPROT.Bits.FPHDIS
#define NV_FPROT_FPOPEN                 _NV_FPROT.Bits.FPOPEN
#define NV_FPROT_FPHS                   _NV_FPROT.MergedBits.grpFPHS

#define NV_FPROT_FPHS0_MASK             0x08U
#define NV_FPROT_FPHS1_MASK             0x10U
#define NV_FPROT_FPHDIS_MASK            0x20U
#define NV_FPROT_FPOPEN_MASK            0x80U
#define NV_FPROT_FPHS_MASK              0x18U
#define NV_FPROT_FPHS_BITNUM            0x03U


/*** NV_EEPROT - EEPROM Protection Register; 0x0000FF7D ***/
typedef union {
  byte Byte;
  struct {
    byte DPS0        :1;                                       /* EEPROM Protection Size, bit 0 */
    byte DPS1        :1;                                       /* EEPROM Protection Size, bit 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte DPOPEN      :1;                                       /* EEPROM Protection Control */
  } Bits;
  struct {
    byte grpDPS  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} NV_EEPROTSTR;
/* Tip for register initialization in the user code:  const byte NV_EEPROT_INIT @0x0000FF7D = <NV_EEPROT_INITVAL>; */
#define _NV_EEPROT (*(const NV_EEPROTSTR * __far)0x0000FF7D)
#define NV_EEPROT                       _NV_EEPROT.Byte
#define NV_EEPROT_DPS0                  _NV_EEPROT.Bits.DPS0
#define NV_EEPROT_DPS1                  _NV_EEPROT.Bits.DPS1
#define NV_EEPROT_DPOPEN                _NV_EEPROT.Bits.DPOPEN
#define NV_EEPROT_DPS                   _NV_EEPROT.MergedBits.grpDPS

#define NV_EEPROT_DPS0_MASK             0x01U
#define NV_EEPROT_DPS1_MASK             0x02U
#define NV_EEPROT_DPOPEN_MASK           0x80U
#define NV_EEPROT_DPS_MASK              0x03U
#define NV_EEPROT_DPS_BITNUM            0x00U


/*** NV_FOPT - Flash Option Register; 0x0000FF7E ***/
typedef union {
  byte Byte;
  struct {
    byte NV0         :1;                                       /* Nonvolatile Bits, bit 0 */
    byte NV1         :1;                                       /* Nonvolatile Bits, bit 1 */
    byte NV2         :1;                                       /* Nonvolatile Bits, bit 2 */
    byte NV3         :1;                                       /* Nonvolatile Bits, bit 3 */
    byte NV4         :1;                                       /* Nonvolatile Bits, bit 4 */
    byte NV5         :1;                                       /* Nonvolatile Bits, bit 5 */
    byte NV6         :1;                                       /* Nonvolatile Bits, bit 6 */
    byte NV7         :1;                                       /* Nonvolatile Bits, bit 7 */
  } Bits;
} NV_FOPTSTR;
/* Tip for register initialization in the user code:  const byte NV_FOPT_INIT @0x0000FF7E = <NV_FOPT_INITVAL>; */
#define _NV_FOPT (*(const NV_FOPTSTR * __far)0x0000FF7E)
#define NV_FOPT                         _NV_FOPT.Byte
#define NV_FOPT_NV0                     _NV_FOPT.Bits.NV0
#define NV_FOPT_NV1                     _NV_FOPT.Bits.NV1
#define NV_FOPT_NV2                     _NV_FOPT.Bits.NV2
#define NV_FOPT_NV3                     _NV_FOPT.Bits.NV3
#define NV_FOPT_NV4                     _NV_FOPT.Bits.NV4
#define NV_FOPT_NV5                     _NV_FOPT.Bits.NV5
#define NV_FOPT_NV6                     _NV_FOPT.Bits.NV6
#define NV_FOPT_NV7                     _NV_FOPT.Bits.NV7

#define NV_FOPT_NV0_MASK                0x01U
#define NV_FOPT_NV1_MASK                0x02U
#define NV_FOPT_NV2_MASK                0x04U
#define NV_FOPT_NV3_MASK                0x08U
#define NV_FOPT_NV4_MASK                0x10U
#define NV_FOPT_NV5_MASK                0x20U
#define NV_FOPT_NV6_MASK                0x40U
#define NV_FOPT_NV7_MASK                0x80U


/*** NV_FSEC - Flash Security Register; 0x0000FF7F ***/
typedef union {
  byte Byte;
  struct {
    byte SEC0        :1;                                       /* Flash Security Bits, bit 0 */
    byte SEC1        :1;                                       /* Flash Security Bits, bit 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte KEYEN0      :1;                                       /* Backdoor Key Security Enable Bits, bit 0 */
    byte KEYEN1      :1;                                       /* Backdoor Key Security Enable Bits, bit 1 */
  } Bits;
  struct {
    byte grpSEC  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpKEYEN :2;
  } MergedBits;
} NV_FSECSTR;
/* Tip for register initialization in the user code:  const byte NV_FSEC_INIT @0x0000FF7F = <NV_FSEC_INITVAL>; */
#define _NV_FSEC (*(const NV_FSECSTR * __far)0x0000FF7F)
#define NV_FSEC                         _NV_FSEC.Byte
#define NV_FSEC_SEC0                    _NV_FSEC.Bits.SEC0
#define NV_FSEC_SEC1                    _NV_FSEC.Bits.SEC1
#define NV_FSEC_KEYEN0                  _NV_FSEC.Bits.KEYEN0
#define NV_FSEC_KEYEN1                  _NV_FSEC.Bits.KEYEN1
#define NV_FSEC_SEC                     _NV_FSEC.MergedBits.grpSEC
#define NV_FSEC_KEYEN                   _NV_FSEC.MergedBits.grpKEYEN

#define NV_FSEC_SEC0_MASK               0x01U
#define NV_FSEC_SEC1_MASK               0x02U
#define NV_FSEC_KEYEN0_MASK             0x40U
#define NV_FSEC_KEYEN1_MASK             0x80U
#define NV_FSEC_SEC_MASK                0x03U
#define NV_FSEC_SEC_BITNUM              0x00U
#define NV_FSEC_KEYEN_MASK              0xC0U
#define NV_FSEC_KEYEN_BITNUM            0x06U




#ifndef __RESET_WATCHDOG
/* Watchdog reset macro */
#ifdef _lint
  #define __RESET_WATCHDOG()  /* empty */
#else
  #define __RESET_WATCHDOG() (void)(WDOG_CNT = 0xA602U, WDOG_CNT = 0xB480U)
#endif
#endif /* __RESET_WATCHDOGO */
/*lint -restore  +esym(960,18.4) Enable MISRA rule (1.1,6.4,18.4) checking. */

#endif

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/

